{
  "after": {
    "comment": "/**\n * Returns all of the items in an array after the specified index.\n * Opposite of [before](#before).\n *\n * ```handlebars\n * <!-- array: ['a', 'b', 'c'] -->\n * {{after array 1}}\n * <!-- results in: '[\"c\"]' -->\n * ```\n * @param {Array} `array` Collection\n * @param {Number} `n` Starting index (number of items to exclude)\n * @return {Array} Array exluding `n` items.\n * @api public\n */",
    "meta": {
      "range": [507, 612],
      "filename": "array.js",
      "lineno": 22,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000023",
        "name": "helpers.after",
        "type": "FunctionExpression",
        "paramnames": ["array", "n"]
      }
    },
    "description": "Returns all of the items in an array after the specified index.\nOpposite of [before](#before).\n\n```handlebars\n<!-- array: ['a', 'b', 'c'] -->\n{{after array 1}}\n<!-- results in: '[\"c\"]' -->\n```",
    "params": [
      {
        "type": { "names": ["Array"] },
        "description": "Collection",
        "name": "`array`"
      },
      {
        "type": { "names": ["Number"] },
        "description": "Starting index (number of items to exclude)",
        "name": "`n`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["Array"] },
        "description": "Array exluding `n` items."
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "after",
    "longname": "helpers.after",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000005",
    "___s": true
  },
  "with": {
    "comment": "Sets the context of the block to the input parameter.\n\n```handlebars\n<!-- {object: {key: 'value'}} -->\n{{#with object}}\n    {{key}}\n<!--Returns 'value'-->\n{{/with}}```"
  },
  "each": {
    "comment": "Loops through array returning value of that array to block.\n\n```handlebars\n<!-- array: [{\"title\": \"Hitchhikers Guide to the Galaxy\"}, {\"title\": \"Harry Potter\"}] -->\n{{#each array}}\n    <p>{{title}}</p>\n<!--Returns <p>Hitchhikers Guide to the Galaxy</p><p>Harry Potter</p>'-->\n{{/each}}```"
  },
  "if": {
    "comment": "Renders block only if value is truthy.\n\n```handlebars\n<!-- value: \"test\" -->\n{{#if value}}\n    {{value}}\n{{else}}\n\"Value Doesn't Exist\"\n{{/if}}```"
  },
  "eq": {
    "comment": "Renders block only if values are equal.\n\n```handlebars\n<!-- value1: \"B\", value2: \"B\" -->\n{{#eq value1 value2}}\n    {{value1}}\n{{else}}\n    {{value2}}\n{{/eq}}```"
  },
  "arrayify": {
    "comment": "/**\n * Cast the given `value` to an array.\n *\n * ```handlebars\n * {{arrayify \"foo\"}}\n * <!-- results in: [ \"foo\" ] -->\n * ```\n * @param {any} `value`\n * @return {Array}\n * @api public\n */",
    "meta": {
      "range": [804, 906],
      "filename": "array.js",
      "lineno": 39,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000046",
        "name": "helpers.arrayify",
        "type": "FunctionExpression",
        "paramnames": ["value"]
      }
    },
    "description": "Cast the given `value` to an array.\n\n```handlebars\n{{arrayify \"foo\"}}\n<!-- results in: [ \"foo\" ] -->\n```",
    "params": [{ "type": { "names": ["any"] }, "name": "`value`" }],
    "returns": [{ "type": { "names": ["Array"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "arrayify",
    "longname": "helpers.arrayify",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000006",
    "___s": true
  },
  "before": {
    "comment": "/**\n * Return all of the items in the collection before the specified\n * count. Opposite of [after](#after).\n *\n * ```handlebars\n * <!-- array: ['a', 'b', 'c'] -->\n * {{before array 2}}\n * <!-- results in: '[\"a\", \"b\"]' -->\n * ```\n * @param {Array} `array`\n * @param {Number} `n`\n * @return {Array} Array excluding items after the given number.\n * @api public\n */",
    "meta": {
      "range": [1273, 1383],
      "filename": "array.js",
      "lineno": 58,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000067",
        "name": "helpers.before",
        "type": "FunctionExpression",
        "paramnames": ["array", "n"]
      }
    },
    "description": "Return all of the items in the collection before the specified\ncount. Opposite of [after](#after).\n\n```handlebars\n<!-- array: ['a', 'b', 'c'] -->\n{{before array 2}}\n<!-- results in: '[\"a\", \"b\"]' -->\n```",
    "params": [
      { "type": { "names": ["Array"] }, "name": "`array`" },
      { "type": { "names": ["Number"] }, "name": "`n`" }
    ],
    "returns": [
      {
        "type": { "names": ["Array"] },
        "description": "Array excluding items after the given number."
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "before",
    "longname": "helpers.before",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000007",
    "___s": true
  },
  "eachIndex": {
    "comment": "/**\n * ```handlebars\n * <!-- array: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] -->\n * {{#eachIndex array}}\n *   {{item}} is {{index}}\n * {{/eachIndex}}\n * ```\n * @param {Array} `array`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [1648, 1833],
      "filename": "array.js",
      "lineno": 77,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000092",
        "name": "helpers.eachIndex",
        "type": "FunctionExpression",
        "paramnames": ["array", "options"]
      },
      "vars": {
        "result": "helpers.eachIndex~result",
        "i": "helpers.eachIndex~i"
      }
    },
    "description": "```handlebars\n<!-- array: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'] -->\n{{#eachIndex array}}\n  {{item}} is {{index}}\n{{/eachIndex}}\n```",
    "params": [
      { "type": { "names": ["Array"] }, "name": "`array`" },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "eachIndex",
    "longname": "helpers.eachIndex",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000008",
    "___s": true
  },
  "filter": {
    "comment": "/**\n * Block helper that filters the given array and renders the block for values that\n * evaluate to `true`, otherwise the inverse block is returned.\n *\n * ```handlebars\n * <!-- array: ['a', 'b', 'c'] -->\n * {{#filter array \"foo\"}}AAA{{else}}BBB{{/filter}}\n * <!-- results in: 'BBB' -->\n * ```\n * @param {Array} `array`\n * @param {any} `value`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [2260, 2886],
      "filename": "array.js",
      "lineno": 102,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000134",
        "name": "helpers.filter",
        "type": "FunctionExpression",
        "paramnames": ["array", "value", "options"]
      },
      "vars": {
        "content": "helpers.filter~content",
        "results": "helpers.filter~results",
        "prop": "helpers.filter~prop",
        "": null,
        "i": "helpers.filter~i"
      }
    },
    "description": "Block helper that filters the given array and renders the block for values that\nevaluate to `true`, otherwise the inverse block is returned.\n\n```handlebars\n<!-- array: ['a', 'b', 'c'] -->\n{{#filter array \"foo\"}}AAA{{else}}BBB{{/filter}}\n<!-- results in: 'BBB' -->\n```",
    "params": [
      { "type": { "names": ["Array"] }, "name": "`array`" },
      { "type": { "names": ["any"] }, "name": "`value`" },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "filter",
    "longname": "helpers.filter",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000014",
    "___s": true
  },
  "first": {
    "comment": "/**\n * Returns the first item, or first `n` items of an array.\n *\n * ```handlebars\n * {{first \"['a', 'b', 'c', 'd', 'e']\" 2}}\n * <!-- results in: '[\"a\", \"b\"]' -->\n * ```\n * @param {Array} `array`\n * @param {Number} `n` Number of items to return, starting at `0`.\n * @return {Array}\n * @api public\n */",
    "meta": {
      "range": [3191, 3352],
      "filename": "array.js",
      "lineno": 142,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000247",
        "name": "helpers.first",
        "type": "FunctionExpression",
        "paramnames": ["array", "n"]
      }
    },
    "description": "Returns the first item, or first `n` items of an array.\n\n```handlebars\n{{first \"['a', 'b', 'c', 'd', 'e']\" 2}}\n<!-- results in: '[\"a\", \"b\"]' -->\n```",
    "params": [
      { "type": { "names": ["Array"] }, "name": "`array`" },
      {
        "type": { "names": ["Number"] },
        "description": "Number of items to return, starting at `0`.",
        "name": "`n`"
      }
    ],
    "returns": [{ "type": { "names": ["Array"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "first",
    "longname": "helpers.first",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000022",
    "___s": true
  },
  "forEach": {
    "comment": "/**\n * Iterates over each item in an array and exposes the current item\n * in the array as context to the inner block. In addition to\n * the current array item, the helper exposes the following variables\n * to the inner block:\n *\n * - `index`\n * - `total`\n * - `isFirst`\n * - `isLast`\n *\n * Also, `@index` is exposed as a private variable, and additional\n * private variables may be defined as hash arguments.\n *\n * ```handlebars\n * <!-- accounts = [\n *   {'name': 'John', 'email': 'john@example.com'},\n *   {'name': 'Malcolm', 'email': 'malcolm@example.com'},\n *   {'name': 'David', 'email': 'david@example.com'}\n * ] -->\n *\n * {{#forEach accounts}}\n *   <a href=\"mailto:{{ email }}\" title=\"Send an email to {{ name }}\">\n *     {{ name }}\n *   </a>{{#unless isLast}}, {{/unless}}\n * {{/forEach}}\n * ```\n * @source <http://stackoverflow.com/questions/13861007>\n * @param {Array} `array`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [4292, 4696],
      "filename": "array.js",
      "lineno": 184,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000283",
        "name": "helpers.forEach",
        "type": "FunctionExpression",
        "paramnames": ["array", "options"]
      },
      "vars": {
        "data": "helpers.forEach~data",
        "len": "helpers.forEach~len",
        "buffer": "helpers.forEach~buffer",
        "i": "helpers.forEach~i",
        "item": "helpers.forEach~item",
        "data.index": "helpers.forEach~data.index",
        "item.index": "helpers.forEach~item.index",
        "item.total": "helpers.forEach~item.total",
        "item.isFirst": "helpers.forEach~item.isFirst",
        "item.isLast": "helpers.forEach~item.isLast"
      }
    },
    "description": "Iterates over each item in an array and exposes the current item\nin the array as context to the inner block. In addition to\nthe current array item, the helper exposes the following variables\nto the inner block:\n\n- `index`\n- `total`\n- `isFirst`\n- `isLast`\n\nAlso, `@index` is exposed as a private variable, and additional\nprivate variables may be defined as hash arguments.\n\n```handlebars\n<!-- accounts = [\n  {'name': 'John', 'email': 'john@example.com'},\n  {'name': 'Malcolm', 'email': 'malcolm@example.com'},\n  {'name': 'David', 'email': 'david@example.com'}\n] -->\n\n{{#forEach accounts}}\n  <a href=\"mailto:{{ email }}\" title=\"Send an email to {{ name }}\">\n    {{ name }}\n  </a>{{#unless isLast}}, {{/unless}}\n{{/forEach}}\n```",
    "tags": [
      {
        "originalTitle": "source",
        "title": "source",
        "text": "<http://stackoverflow.com/questions/13861007>",
        "value": "<http://stackoverflow.com/questions/13861007>"
      },
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "params": [{ "type": { "names": ["Array"] }, "name": "`array`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "name": "forEach",
    "longname": "helpers.forEach",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000023",
    "___s": true
  },
  "inArray": {
    "comment": "/**\n * Block helper that renders the block if an array has the\n * given `value`. Optionally specify an inverse block to render\n * when the array does not have the given value.\n *\n * ```handlebars\n * <!-- array: ['a', 'b', 'c'] -->\n * {{#inArray array \"d\"}}\n *   foo\n * {{else}}\n *   bar\n * {{/inArray}}\n * <!-- results in: 'bar' -->\n * ```\n * @param {Array} `array`\n * @param {any} `value`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [5168, 5290],
      "filename": "array.js",
      "lineno": 224,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000381",
        "name": "helpers.inArray",
        "type": "FunctionExpression",
        "paramnames": ["array", "value", "options"]
      }
    },
    "description": "Block helper that renders the block if an array has the\ngiven `value`. Optionally specify an inverse block to render\nwhen the array does not have the given value.\n\n```handlebars\n<!-- array: ['a', 'b', 'c'] -->\n{{#inArray array \"d\"}}\n  foo\n{{else}}\n  bar\n{{/inArray}}\n<!-- results in: 'bar' -->\n```",
    "params": [
      { "type": { "names": ["Array"] }, "name": "`array`" },
      { "type": { "names": ["any"] }, "name": "`value`" },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "inArray",
    "longname": "helpers.inArray",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000036",
    "___s": true
  },
  "isArray": {
    "comment": "/**\n * Returns true if `value` is an es5 array.\n *\n * ```handlebars\n * {{isArray \"abc\"}}\n * <!-- results in: false -->\n *\n * <!-- array: [1, 2, 3] -->\n * {{isArray array}}\n * <!-- results in: true -->\n * ```\n * @param {any} `value` The value to test.\n * @return {Boolean}\n * @api public\n */",
    "meta": {
      "range": [5585, 5653],
      "filename": "array.js",
      "lineno": 244,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000407",
        "name": "helpers.isArray",
        "type": "FunctionExpression",
        "paramnames": ["value"]
      }
    },
    "description": "Returns true if `value` is an es5 array.\n\n```handlebars\n{{isArray \"abc\"}}\n<!-- results in: false -->\n\n<!-- array: [1, 2, 3] -->\n{{isArray array}}\n<!-- results in: true -->\n```",
    "params": [
      {
        "type": { "names": ["any"] },
        "description": "The value to test.",
        "name": "`value`"
      }
    ],
    "returns": [{ "type": { "names": ["Boolean"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "isArray",
    "longname": "helpers.isArray",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000037",
    "___s": true
  },
  "itemAt": {
    "comment": "/**\n * Returns the item from `array` at index `idx`.\n *\n * ```handlebars\n * <!-- array: ['a', 'b', 'c'] -->\n * {{itemAt array 1}}\n * <!-- results in: 'b' -->\n * ```\n * @param {Array} `array`\n * @param {Number} `idx`\n * @return {any} `value`\n * @block\n * @api public\n */",
    "meta": {
      "range": [5927, 6200],
      "filename": "array.js",
      "lineno": 263,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000421",
        "name": "helpers.itemAt",
        "type": "FunctionExpression",
        "paramnames": ["array", "idx"]
      },
      "vars": { "array": "helpers.itemAt~array", "idx": "helpers.itemAt~idx" }
    },
    "description": "Returns the item from `array` at index `idx`.\n\n```handlebars\n<!-- array: ['a', 'b', 'c'] -->\n{{itemAt array 1}}\n<!-- results in: 'b' -->\n```",
    "params": [
      { "type": { "names": ["Array"] }, "name": "`array`" },
      { "type": { "names": ["Number"] }, "name": "`idx`" }
    ],
    "returns": [{ "type": { "names": ["any"] }, "description": "`value`" }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "itemAt",
    "longname": "helpers.itemAt",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000038",
    "___s": true
  },
  "join": {
    "comment": "/**\n * Join all elements of array into a string, optionally using a\n * given separator.\n *\n * ```handlebars\n * <!-- array: ['a', 'b', 'c'] -->\n * {{join array}}\n * <!-- results in: 'a, b, c' -->\n *\n * {{join array '-'}}\n * <!-- results in: 'a-b-c' -->\n * ```\n * @param {Array} `array`\n * @param {String} `separator` The separator to use. Defaults to `, `.\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [6599, 6822],
      "filename": "array.js",
      "lineno": 294,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000481",
        "name": "helpers.join",
        "type": "FunctionExpression",
        "paramnames": ["array", "separator"]
      },
      "vars": { "separator": "helpers.join~separator" }
    },
    "description": "Join all elements of array into a string, optionally using a\ngiven separator.\n\n```handlebars\n<!-- array: ['a', 'b', 'c'] -->\n{{join array}}\n<!-- results in: 'a, b, c' -->\n\n{{join array '-'}}\n<!-- results in: 'a-b-c' -->\n```",
    "params": [
      { "type": { "names": ["Array"] }, "name": "`array`" },
      {
        "type": { "names": ["String"] },
        "description": "The separator to use. Defaults to `, `.",
        "name": "`separator`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "join",
    "longname": "helpers.join",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000041",
    "___s": true
  },
  "equalsLength": {
    "comment": "/**\n * Returns true if the the length of the given `value` is equal\n * to the given `length`. Can be used as a block or inline helper.\n *\n * @param {Array|String} `value`\n * @param {Number} `length`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [7103, 7392],
      "filename": "array.js",
      "lineno": 313,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000523",
        "name": "helpers.equalsLength",
        "type": "FunctionExpression",
        "paramnames": ["value", "length", "options"]
      },
      "vars": {
        "options": "helpers.equalsLength~options",
        "length": "helpers.equalsLength~length",
        "len": "helpers.equalsLength~len"
      }
    },
    "description": "Returns true if the the length of the given `value` is equal\nto the given `length`. Can be used as a block or inline helper.",
    "params": [
      { "type": { "names": ["Array", "String"] }, "name": "`value`" },
      { "type": { "names": ["Number"] }, "name": "`length`" },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "equalsLength",
    "longname": "helpers.equalsLength",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000043",
    "___s": true
  },
  "last": {
    "comment": "/**\n * Returns the last item, or last `n` items of an array or string.\n * Opposite of [first](#first).\n *\n * ```handlebars\n * <!-- var value = ['a', 'b', 'c', 'd', 'e'] -->\n *\n * {{last value}}\n * <!-- results in: ['e'] -->\n *\n * {{last value 2}}\n * <!-- results in: ['d', 'e'] -->\n *\n * {{last value 3}}\n * <!-- results in: ['c', 'd', 'e'] -->\n * ```\n * @param {Array|String} `value` Array or string.\n * @param {Number} `n` Number of items to return from the end of the array.\n * @return {Array}\n * @api public\n */",
    "meta": {
      "range": [7912, 8132],
      "filename": "array.js",
      "lineno": 349,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000580",
        "name": "helpers.last",
        "type": "FunctionExpression",
        "paramnames": ["value", "n"]
      }
    },
    "description": "Returns the last item, or last `n` items of an array or string.\nOpposite of [first](#first).\n\n```handlebars\n<!-- var value = ['a', 'b', 'c', 'd', 'e'] -->\n\n{{last value}}\n<!-- results in: ['e'] -->\n\n{{last value 2}}\n<!-- results in: ['d', 'e'] -->\n\n{{last value 3}}\n<!-- results in: ['c', 'd', 'e'] -->\n```",
    "params": [
      {
        "type": { "names": ["Array", "String"] },
        "description": "Array or string.",
        "name": "`value`"
      },
      {
        "type": { "names": ["Number"] },
        "description": "Number of items to return from the end of the array.",
        "name": "`n`"
      }
    ],
    "returns": [{ "type": { "names": ["Array"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "last",
    "longname": "helpers.last",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000048",
    "___s": true
  },
  "length": {
    "comment": "/**\n * Returns the length of the given string or array.\n *\n * ```handlebars\n * {{length '[\"a\", \"b\", \"c\"]'}}\n * <!-- results in: 3 -->\n *\n * <!-- results in: myArray = ['a', 'b', 'c', 'd', 'e']; -->\n * {{length myArray}}\n * <!-- results in: 5 -->\n *\n * <!-- results in: myObject = {'a': 'a', 'b': 'b'}; -->\n * {{length myObject}}\n * <!-- results in: 2 -->\n * ```\n * @param {Array|Object|String} `value`\n * @return {Number} The length of the value.\n * @api public\n */",
    "meta": {
      "range": [8602, 8830],
      "filename": "array.js",
      "lineno": 379,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000631",
        "name": "helpers.length",
        "type": "FunctionExpression",
        "paramnames": ["value"]
      },
      "vars": { "value": "helpers.length~value" }
    },
    "description": "Returns the length of the given string or array.\n\n```handlebars\n{{length '[\"a\", \"b\", \"c\"]'}}\n<!-- results in: 3 -->\n\n<!-- results in: myArray = ['a', 'b', 'c', 'd', 'e']; -->\n{{length myArray}}\n<!-- results in: 5 -->\n\n<!-- results in: myObject = {'a': 'a', 'b': 'b'}; -->\n{{length myObject}}\n<!-- results in: 2 -->\n```",
    "params": [
      { "type": { "names": ["Array", "Object", "String"] }, "name": "`value`" }
    ],
    "returns": [
      {
        "type": { "names": ["Number"] },
        "description": "The length of the value."
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "length",
    "longname": "helpers.length",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000049",
    "___s": true
  },
  "lengthEqual": {
    "comment": "/**\n * Alias for [equalsLength](#equalsLength)\n *\n * @api public\n */",
    "meta": {
      "range": [8903, 8945],
      "filename": "array.js",
      "lineno": 395,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000679",
        "name": "helpers.lengthEqual",
        "type": "MemberExpression",
        "value": "helpers.equalsLength",
        "paramnames": []
      }
    },
    "description": "Alias for [equalsLength](#equalsLength)",
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "lengthEqual",
    "longname": "helpers.lengthEqual",
    "kind": "member",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000051",
    "___s": true
  },
  "map": {
    "comment": "/**\n * Returns a new array, created by calling `function` on each\n * element of the given `array`. For example,\n *\n * ```handlebars\n * <!-- array: ['a', 'b', 'c'], and \"double\" is a\n * fictitious function that duplicates letters -->\n * {{map array double}}\n * <!-- results in: '[\"aa\", \"bb\", \"cc\"]' -->\n * ```\n *\n * @param {Array} `array`\n * @param {Function} `fn`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [9352, 9638],
      "filename": "array.js",
      "lineno": 414,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000687",
        "name": "helpers.map",
        "type": "FunctionExpression",
        "paramnames": ["array", "iter"]
      },
      "vars": {
        "len": "helpers.map~len",
        "res": "helpers.map~res",
        "i": "helpers.map~i",
        "res[undefined]": "helpers.map~res.undefined]"
      }
    },
    "description": "Returns a new array, created by calling `function` on each\nelement of the given `array`. For example,\n\n```handlebars\n<!-- array: ['a', 'b', 'c'], and \"double\" is a\nfictitious function that duplicates letters -->\n{{map array double}}\n<!-- results in: '[\"aa\", \"bb\", \"cc\"]' -->\n```",
    "params": [
      { "type": { "names": ["Array"] }, "name": "`array`" },
      { "type": { "names": ["function"] }, "name": "`fn`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "map",
    "longname": "helpers.map",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000052",
    "___s": true
  },
  "pluck": {
    "comment": "/**\n * Map over the given object or array or objects and create an array of values\n * from the given `prop`. Dot-notation may be used (as a string) to get\n * nested properties.\n *\n * ```handlebars\n * // {{pluck items \"data.title\"}}\n * <!-- results in: '[\"aa\", \"bb\", \"cc\"]' -->\n * ```\n * @param {Array|Object} `collection`\n * @param {Function} `prop`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [10031, 10289],
      "filename": "array.js",
      "lineno": 445,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000750",
        "name": "helpers.pluck",
        "type": "FunctionExpression",
        "paramnames": ["arr", "prop"]
      },
      "vars": {
        "res": "helpers.pluck~res",
        "i": "helpers.pluck~i",
        "val": "helpers.pluck~val"
      }
    },
    "description": "Map over the given object or array or objects and create an array of values\nfrom the given `prop`. Dot-notation may be used (as a string) to get\nnested properties.\n\n```handlebars\n// {{pluck items \"data.title\"}}\n<!-- results in: '[\"aa\", \"bb\", \"cc\"]' -->\n```",
    "params": [
      { "type": { "names": ["Array", "Object"] }, "name": "`collection`" },
      { "type": { "names": ["function"] }, "name": "`prop`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "pluck",
    "longname": "helpers.pluck",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000057",
    "___s": true
  },
  "reverse": {
    "comment": "/**\n * Reverse a string.\n *\n * ```handlebars\n * {{reverse \"abcde\"}}\n * <!-- results in:  'edcba' -->\n * ```\n * @param {String} `str`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [10132, 10248],
      "filename": "string.js",
      "lineno": 492,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007629",
        "name": "helpers.reverse",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      }
    },
    "description": "Reverse a string.\n\n```handlebars\n{{reverse \"abcde\"}}\n<!-- results in:  'edcba' -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`str`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "reverse",
    "longname": "helpers.reverse",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000554",
    "___s": true
  },
  "some": {
    "comment": "/**\n * Block helper that returns the block if the callback returns true\n * for some value in the given array.\n *\n * ```handlebars\n * <!-- array: [1, 'b', 3] -->\n * {{#some array isString}}\n *   Render me if the array has a string.\n * {{else}}\n *   Render me if it doesn't.\n * {{/some}}\n * <!-- results in: 'Render me if the array has a string.' -->\n * ```\n * @param {Array} `array`\n * @param {Function} `iter` Iteratee\n * @param {Options} Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [11410, 11655],
      "filename": "array.js",
      "lineno": 504,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000852",
        "name": "helpers.some",
        "type": "FunctionExpression",
        "paramnames": ["array", "iter", "options"]
      },
      "vars": { "i": "helpers.some~i" }
    },
    "description": "Block helper that returns the block if the callback returns true\nfor some value in the given array.\n\n```handlebars\n<!-- array: [1, 'b', 3] -->\n{{#some array isString}}\n  Render me if the array has a string.\n{{else}}\n  Render me if it doesn't.\n{{/some}}\n<!-- results in: 'Render me if the array has a string.' -->\n```",
    "params": [
      { "type": { "names": ["Array"] }, "name": "`array`" },
      {
        "type": { "names": ["function"] },
        "description": "Iteratee",
        "name": "`iter`"
      },
      {
        "type": { "names": ["Options"] },
        "description": "provided options object",
        "name": "Handlebars"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "some",
    "longname": "helpers.some",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000062",
    "___s": true
  },
  "sort": {
    "comment": "/**\n * Sort the given `array`. If an array of objects is passed,\n * you may optionally pass a `key` to sort on as the second\n * argument. You may alternatively pass a sorting function as\n * the second argument.\n *\n * ```handlebars\n * <!-- array: ['b', 'a', 'c'] -->\n * {{sort array}}\n * <!-- results in: '[\"a\", \"b\", \"c\"]' -->\n * ```\n *\n * @param {Array} `array` the array to sort.\n * @param {String|Function} `key` The object key to sort by, or sorting function.\n * @api public\n */",
    "meta": {
      "range": [12141, 12330],
      "filename": "array.js",
      "lineno": 532,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000903",
        "name": "helpers.sort",
        "type": "FunctionExpression",
        "paramnames": ["array", "options"]
      }
    },
    "description": "Sort the given `array`. If an array of objects is passed,\nyou may optionally pass a `key` to sort on as the second\nargument. You may alternatively pass a sorting function as\nthe second argument.\n\n```handlebars\n<!-- array: ['b', 'a', 'c'] -->\n{{sort array}}\n<!-- results in: '[\"a\", \"b\", \"c\"]' -->\n```",
    "params": [
      {
        "type": { "names": ["Array"] },
        "description": "the array to sort.",
        "name": "`array`"
      },
      {
        "type": { "names": ["String", "function"] },
        "description": "The object key to sort by, or sorting function.",
        "name": "`key`"
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "sort",
    "longname": "helpers.sort",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000064",
    "___s": true
  },
  "sortBy": {
    "comment": "/**\n * Sort an `array`. If an array of objects is passed,\n * you may optionally pass a `key` to sort on as the second\n * argument. You may alternatively pass a sorting function as\n * the second argument.\n *\n * ```handlebars\n * <!-- array: [{a: 'zzz'}, {a: 'aaa'}] -->\n * {{sortBy array \"a\"}}\n * <!-- results in: '[{\"a\":\"aaa\"}, {\"a\":\"zzz\"}]' -->\n * ```\n *\n * @param {Array} `array` the array to sort.\n * @param {String|Function} `props` One or more properties to sort by, or sorting functions to use.\n * @api public\n */",
    "meta": {
      "range": [12853, 13159],
      "filename": "array.js",
      "lineno": 557,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100000942",
        "name": "helpers.sortBy",
        "type": "FunctionExpression",
        "paramnames": ["array", "prop", "options"]
      },
      "vars": { "args": "helpers.sortBy~args" }
    },
    "description": "Sort an `array`. If an array of objects is passed,\nyou may optionally pass a `key` to sort on as the second\nargument. You may alternatively pass a sorting function as\nthe second argument.\n\n```handlebars\n<!-- array: [{a: 'zzz'}, {a: 'aaa'}] -->\n{{sortBy array \"a\"}}\n<!-- results in: '[{\"a\":\"aaa\"}, {\"a\":\"zzz\"}]' -->\n```",
    "params": [
      {
        "type": { "names": ["Array"] },
        "description": "the array to sort.",
        "name": "`array`"
      },
      {
        "type": { "names": ["String", "function"] },
        "description": "One or more properties to sort by, or sorting functions to use.",
        "name": "`props`"
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "sortBy",
    "longname": "helpers.sortBy",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000065",
    "___s": true
  },
  "withAfter": {
    "comment": "/**\n * Use the items in the array _after_ the specified index\n * as context inside a block. Opposite of [withBefore](#withBefore).\n *\n * ```handlebars\n * <!-- array: ['a', 'b', 'c', 'd', 'e'] -->\n * {{#withAfter array 3}}\n *   {{this}}\n * {{/withAfter}}\n * <!-- results in: \"de\" -->\n * ```\n * @param {Array} `array`\n * @param {Number} `idx`\n * @param {Object} `options`\n * @return {Array}\n * @block\n * @api public\n */",
    "meta": {
      "range": [13581, 13822],
      "filename": "array.js",
      "lineno": 588,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100001003",
        "name": "helpers.withAfter",
        "type": "FunctionExpression",
        "paramnames": ["array", "idx", "options"]
      },
      "vars": {
        "array": "helpers.withAfter~array",
        "result": "helpers.withAfter~result",
        "i": "helpers.withAfter~i"
      }
    },
    "description": "Use the items in the array _after_ the specified index\nas context inside a block. Opposite of [withBefore](#withBefore).\n\n```handlebars\n<!-- array: ['a', 'b', 'c', 'd', 'e'] -->\n{{#withAfter array 3}}\n  {{this}}\n{{/withAfter}}\n<!-- results in: \"de\" -->\n```",
    "params": [
      { "type": { "names": ["Array"] }, "name": "`array`" },
      { "type": { "names": ["Number"] }, "name": "`idx`" },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["Array"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "withAfter",
    "longname": "helpers.withAfter",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000067",
    "___s": true
  },
  "withBefore": {
    "comment": "/**\n * Use the items in the array _before_ the specified index\n * as context inside a block. Opposite of [withAfter](#withAfter).\n *\n * ```handlebars\n * <!-- array: ['a', 'b', 'c', 'd', 'e'] -->\n * {{#withBefore array 3}}\n *   {{this}}\n * {{/withBefore}}\n * <!-- results in: 'ab' -->\n * ```\n * @param {Array} `array`\n * @param {Number} `idx`\n * @param {Object} `options`\n * @return {Array}\n * @block\n * @api public\n */",
    "meta": {
      "range": [14245, 14491],
      "filename": "array.js",
      "lineno": 618,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100001059",
        "name": "helpers.withBefore",
        "type": "FunctionExpression",
        "paramnames": ["array", "idx", "options"]
      },
      "vars": {
        "array": "helpers.withBefore~array",
        "result": "helpers.withBefore~result",
        "i": "helpers.withBefore~i"
      }
    },
    "description": "Use the items in the array _before_ the specified index\nas context inside a block. Opposite of [withAfter](#withAfter).\n\n```handlebars\n<!-- array: ['a', 'b', 'c', 'd', 'e'] -->\n{{#withBefore array 3}}\n  {{this}}\n{{/withBefore}}\n<!-- results in: 'ab' -->\n```",
    "params": [
      { "type": { "names": ["Array"] }, "name": "`array`" },
      { "type": { "names": ["Number"] }, "name": "`idx`" },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["Array"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "withBefore",
    "longname": "helpers.withBefore",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000072",
    "___s": true
  },
  "withFirst": {
    "comment": "/**\n * Use the first item in a collection inside a handlebars\n * block expression. Opposite of [withLast](#withLast).\n *\n * ```handlebars\n * <!-- array: ['a', 'b', 'c'] -->\n * {{#withFirst array}}\n *   {{this}}\n * {{/withFirst}}\n * <!-- results in: 'a' -->\n * ```\n * @param {Array} `array`\n * @param {Number} `idx`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [14888, 15329],
      "filename": "array.js",
      "lineno": 648,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100001117",
        "name": "helpers.withFirst",
        "type": "FunctionExpression",
        "paramnames": ["array", "idx", "options"]
      },
      "vars": {
        "array": "helpers.withFirst~array",
        "idx": "helpers.withFirst~idx",
        "options": "helpers.withFirst~options",
        "result": "helpers.withFirst~result",
        "i": "helpers.withFirst~i"
      }
    },
    "description": "Use the first item in a collection inside a handlebars\nblock expression. Opposite of [withLast](#withLast).\n\n```handlebars\n<!-- array: ['a', 'b', 'c'] -->\n{{#withFirst array}}\n  {{this}}\n{{/withFirst}}\n<!-- results in: 'a' -->\n```",
    "params": [
      { "type": { "names": ["Array"] }, "name": "`array`" },
      { "type": { "names": ["Number"] }, "name": "`idx`" },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "withFirst",
    "longname": "helpers.withFirst",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000077",
    "___s": true
  },
  "withGroup": {
    "comment": "/**\n * Block helper that groups array elements by given group `size`.\n *\n * ```handlebars\n * <!-- array: ['a','b','c','d','e','f','g','h'] -->\n * {{#withGroup array 4}}\n *   {{#each this}}\n *     {{.}}\n *   {{each}}\n *   <br>\n * {{/withGroup}}\n * <!-- results in: -->\n * <!-- 'a','b','c','d'<br> -->\n * <!-- 'e','f','g','h'<br> -->\n * ```\n * @param {Array} `array` The array to iterate over\n * @param {Number} `size` The desired length of each array \"group\"\n * @param {Object} `options` Handlebars options\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [15888, 16293],
      "filename": "array.js",
      "lineno": 692,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100001218",
        "name": "helpers.withGroup",
        "type": "FunctionExpression",
        "paramnames": ["array", "size", "options"]
      },
      "vars": {
        "result": "helpers.withGroup~result",
        "subcontext": "helpers.withGroup~subcontext",
        "i": "helpers.withGroup~i"
      }
    },
    "description": "Block helper that groups array elements by given group `size`.\n\n```handlebars\n<!-- array: ['a','b','c','d','e','f','g','h'] -->\n{{#withGroup array 4}}\n  {{#each this}}\n    {{.}}\n  {{each}}\n  <br>\n{{/withGroup}}\n<!-- results in: -->\n<!-- 'a','b','c','d'<br> -->\n<!-- 'e','f','g','h'<br> -->\n```",
    "params": [
      {
        "type": { "names": ["Array"] },
        "description": "The array to iterate over",
        "name": "`array`"
      },
      {
        "type": { "names": ["Number"] },
        "description": "The desired length of each array \"group\"",
        "name": "`size`"
      },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars options",
        "name": "`options`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "withGroup",
    "longname": "helpers.withGroup",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000085",
    "___s": true
  },
  "withLast": {
    "comment": "/**\n * Use the last item or `n` items in an array as context inside a block.\n * Opposite of [withFirst](#withFirst).\n *\n * ```handlebars\n * <!-- array: ['a', 'b', 'c'] -->\n * {{#withLast array}}\n *   {{this}}\n * {{/withLast}}\n * <!-- results in: 'c' -->\n * ```\n * @param {Array} `array`\n * @param {Number} `idx` The starting index.\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [16707, 17173],
      "filename": "array.js",
      "lineno": 727,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100001303",
        "name": "helpers.withLast",
        "type": "FunctionExpression",
        "paramnames": ["array", "idx", "options"]
      },
      "vars": {
        "array": "helpers.withLast~array",
        "idx": "helpers.withLast~idx",
        "options": "helpers.withLast~options",
        "len": "helpers.withLast~len",
        "i": "helpers.withLast~i",
        "result": "helpers.withLast~result"
      }
    },
    "description": "Use the last item or `n` items in an array as context inside a block.\nOpposite of [withFirst](#withFirst).\n\n```handlebars\n<!-- array: ['a', 'b', 'c'] -->\n{{#withLast array}}\n  {{this}}\n{{/withLast}}\n<!-- results in: 'c' -->\n```",
    "params": [
      { "type": { "names": ["Array"] }, "name": "`array`" },
      {
        "type": { "names": ["Number"] },
        "description": "The starting index.",
        "name": "`idx`"
      },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "withLast",
    "longname": "helpers.withLast",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000092",
    "___s": true
  },
  "withSort": {
    "comment": "/**\n * Block helper that sorts a collection and exposes the sorted\n * collection as context inside the block.\n *\n * ```handlebars\n * <!-- array: ['b', 'a', 'c'] -->\n * {{#withSort array}}{{this}}{{/withSort}}\n * <!-- results in: 'abc' -->\n * ```\n * @param {Array} `array`\n * @param {String} `prop`\n * @param {Object} `options` Specify `reverse=\"true\"` to reverse the array.\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [17600, 18329],
      "filename": "array.js",
      "lineno": 766,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100001411",
        "name": "helpers.withSort",
        "type": "FunctionExpression",
        "paramnames": ["array", "prop", "options"]
      },
      "vars": {
        "result": "helpers.withSort~result",
        "options": "helpers.withSort~options",
        "array": "helpers.withSort~array",
        "i": "helpers.withSort~i",
        "len": "helpers.withSort~len",
        "": null,
        "alen": "helpers.withSort~alen",
        "j": "helpers.withSort~j"
      }
    },
    "description": "Block helper that sorts a collection and exposes the sorted\ncollection as context inside the block.\n\n```handlebars\n<!-- array: ['b', 'a', 'c'] -->\n{{#withSort array}}{{this}}{{/withSort}}\n<!-- results in: 'abc' -->\n```",
    "params": [
      { "type": { "names": ["Array"] }, "name": "`array`" },
      { "type": { "names": ["String"] }, "name": "`prop`" },
      {
        "type": { "names": ["Object"] },
        "description": "Specify `reverse=\"true\"` to reverse the array.",
        "name": "`options`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "withSort",
    "longname": "helpers.withSort",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000101",
    "___s": true
  },
  "unique": {
    "comment": "/**\n * Block helper that return an array with all duplicate\n * values removed. Best used along with a [each](#each) helper.\n *\n  * ```handlebars\n  * <!-- array: ['a', 'a', 'c', 'b', 'e', 'e'] -->\n  * {{#each (unique array)}}{{.}}{{/each}}\n  * <!-- results in: 'acbe' -->\n  * ```\n * @param {Array} `array`\n * @param {Object} `options`\n * @return {Array}\n * @api public\n */",
    "meta": {
      "range": [18705, 18890],
      "filename": "array.js",
      "lineno": 816,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100001577",
        "name": "helpers.unique",
        "type": "FunctionExpression",
        "paramnames": ["array", "options"]
      },
      "vars": { "": null }
    },
    "description": "Block helper that return an array with all duplicate\nvalues removed. Best used along with a [each](#each) helper.\n\n```handlebars\n<!-- array: ['a', 'a', 'c', 'b', 'e', 'e'] -->\n{{#each (unique array)}}{{.}}{{/each}}\n<!-- results in: 'acbe' -->\n```",
    "params": [
      { "type": { "names": ["Array"] }, "name": "`array`" },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["Array"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "unique",
    "longname": "helpers.unique",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000115",
    "___s": true
  },
  "embed": {
    "comment": "/**\n * Embed code from an external file as preformatted text.\n *\n * ```handlebars\n * {{embed 'path/to/file.js'}}\n * <!-- optionally specify the language to use -->\n * {{embed 'path/to/file.hbs' 'html')}}\n * ```\n *\n * @param {String} `filepath` filepath to the file to embed.\n * @param {String} `language` Optionally specify the language to use for syntax highlighting.\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [539, 919],
      "filename": "code.js",
      "lineno": 23,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100001640",
        "name": "helpers.embed",
        "type": "FunctionExpression",
        "value": "embed",
        "paramnames": ["filepath", "ext"]
      },
      "vars": { "ext": "helpers.embed~ext", "code": "helpers.embed~code" }
    },
    "description": "Embed code from an external file as preformatted text.\n\n```handlebars\n{{embed 'path/to/file.js'}}\n<!-- optionally specify the language to use -->\n{{embed 'path/to/file.hbs' 'html')}}\n```",
    "params": [
      {
        "type": { "names": ["String"] },
        "description": "filepath to the file to embed.",
        "name": "`filepath`"
      },
      {
        "type": { "names": ["String"] },
        "description": "Optionally specify the language to use for syntax highlighting.",
        "name": "`language`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "embed",
    "longname": "helpers.embed",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000120",
    "___s": true
  },
  "gist": {
    "comment": "/**\n * Embed a GitHub Gist using only the id of the Gist\n *\n * ```handlebars\n * {{gist \"12345\"}}\n * ```\n * @param {String} `id`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [1090, 1199],
      "filename": "code.js",
      "lineno": 45,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100001714",
        "name": "helpers.gist",
        "type": "FunctionExpression",
        "paramnames": ["id"]
      }
    },
    "description": "Embed a GitHub Gist using only the id of the Gist\n\n```handlebars\n{{gist \"12345\"}}\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`id`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "gist",
    "longname": "helpers.gist",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000125",
    "___s": true
  },
  "jsfiddle": {
    "comment": "/**\n * Generate the HTML for a jsFiddle link with the given `params`\n *\n * ```handlebars\n * {{jsfiddle id=\"0dfk10ks\" tabs=\"true\"}}\n * ```\n * @param {Object} `params`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [1408, 2103],
      "filename": "code.js",
      "lineno": 60,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100001735",
        "name": "helpers.jsfiddle",
        "type": "FunctionExpression",
        "value": "jsFiddle",
        "paramnames": ["options"]
      },
      "vars": {
        "attr": "helpers.jsfiddle~attr",
        "attr.id": "helpers.jsfiddle~attr.id",
        "attr.width": "helpers.jsfiddle~attr.width",
        "attr.height": "helpers.jsfiddle~attr.height",
        "attr.skin": "helpers.jsfiddle~attr.skin",
        "attr.tabs": "helpers.jsfiddle~attr.tabs",
        "attr.src": "helpers.jsfiddle~attr.src",
        "attr.allowfullscreen": "helpers.jsfiddle~attr.allowfullscreen",
        "attr.frameborder": "helpers.jsfiddle~attr.frameborder"
      }
    },
    "description": "Generate the HTML for a jsFiddle link with the given `params`\n\n```handlebars\n{{jsfiddle id=\"0dfk10ks\" tabs=\"true\"}}\n```",
    "params": [{ "type": { "names": ["Object"] }, "name": "`params`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "jsfiddle",
    "longname": "helpers.jsfiddle",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000127",
    "___s": true
  },
  "isEmpty": {
    "comment": "/**\n * Inline, subexpression, or block helper that returns true (or the block)\n * if the given collection is empty, or false (or the inverse block, if\n * supplied) if the colleciton is not empty.\n *\n * ```handlebars\n * <!-- array: [] -->\n * {{#isEmpty array}}AAA{{else}}BBB{{/isEmpty}}\n * <!-- results in: 'AAA' -->\n *\n * <!-- array: [] -->\n * {{isEmpty array}}\n * <!-- results in: true -->\n * ```\n * @param {Object} `collection`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [718, 1125],
      "filename": "collection.js",
      "lineno": 31,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100001919",
        "name": "helpers.isEmpty",
        "type": "FunctionExpression",
        "paramnames": ["collection", "options"]
      },
      "vars": {
        "options": "helpers.isEmpty~options",
        "keys": "helpers.isEmpty~keys",
        "isEmpty": "helpers.isEmpty~isEmpty"
      }
    },
    "description": "Inline, subexpression, or block helper that returns true (or the block)\nif the given collection is empty, or false (or the inverse block, if\nsupplied) if the colleciton is not empty.\n\n```handlebars\n<!-- array: [] -->\n{{#isEmpty array}}AAA{{else}}BBB{{/isEmpty}}\n<!-- results in: 'AAA' -->\n\n<!-- array: [] -->\n{{isEmpty array}}\n<!-- results in: true -->\n```",
    "params": [
      { "type": { "names": ["Object"] }, "name": "`collection`" },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "isEmpty",
    "longname": "helpers.isEmpty",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000143",
    "___s": true
  },
  "iterate": {
    "comment": "/**\n * Block helper that iterates over an array or object. If\n * an array is given, `.forEach` is called, or if an object\n * is given, `.forOwn` is called, otherwise the inverse block\n * is returned.\n *\n * @param {Object|Array} `collection` The collection to iterate over\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [1479, 1725],
      "filename": "collection.js",
      "lineno": 59,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100001996",
        "name": "helpers.iterate",
        "type": "FunctionExpression",
        "paramnames": ["collection", "options"]
      }
    },
    "description": "Block helper that iterates over an array or object. If\nan array is given, `.forEach` is called, or if an object\nis given, `.forOwn` is called, otherwise the inverse block\nis returned.",
    "params": [
      {
        "type": { "names": ["Object", "Array"] },
        "description": "The collection to iterate over",
        "name": "`collection`"
      },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "iterate",
    "longname": "helpers.iterate",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000147",
    "___s": true
  },
  "and": {
    "comment": "/**\n * Helper that renders the block if **both** of the given values\n * are truthy. If an inverse block is specified it will be rendered\n * when falsy. Works as a block helper, inline helper or\n * subexpression.\n *\n * ```handlebars\n * <!-- {great: true, magnificent: true} -->\n * {{#and great magnificent}}A{{else}}B{{/and}}\n * <!-- results in: 'A' -->\n * ```\n * @param {any} `a`\n * @param {any} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [664, 920],
      "filename": "comparison.js",
      "lineno": 27,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002067",
        "name": "helpers.and",
        "type": "FunctionExpression",
        "paramnames": []
      },
      "vars": {
        "len": "helpers.and~len",
        "options": "helpers.and~options",
        "val": "helpers.and~val",
        "i": "helpers.and~i"
      }
    },
    "description": "Helper that renders the block if **both** of the given values\nare truthy. If an inverse block is specified it will be rendered\nwhen falsy. Works as a block helper, inline helper or\nsubexpression.\n\n```handlebars\n<!-- {great: true, magnificent: true} -->\n{{#and great magnificent}}A{{else}}B{{/and}}\n<!-- results in: 'A' -->\n```",
    "params": [
      { "type": { "names": ["any"] }, "name": "`a`" },
      { "type": { "names": ["any"] }, "name": "`b`" },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "and",
    "longname": "helpers.and",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000152",
    "___s": true
  },
  "compare": {
    "comment": "/**\n * Render a block when a comparison of the first and third\n * arguments returns true. The second argument is\n * the [arithemetic operator][operators] to use. You may also\n * optionally specify an inverse block to render when falsy.\n *\n * @param `a`\n * @param `operator` The operator to use. Operators must be enclosed in quotes: `\">\"`, `\"=\"`, `\"<=\"`, and so on.\n * @param `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or if specified the inverse block is rendered if falsey.\n * @block\n * @api public\n */",
    "meta": {
      "range": [1481, 2329],
      "filename": "comparison.js",
      "lineno": 57,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002122",
        "name": "helpers.compare",
        "type": "FunctionExpression",
        "paramnames": ["a", "operator", "b", "options"]
      },
      "vars": { "result": "helpers.compare~result" }
    },
    "description": "Render a block when a comparison of the first and third\narguments returns true. The second argument is\nthe [arithemetic operator][operators] to use. You may also\noptionally specify an inverse block to render when falsy.",
    "params": [
      { "name": "`a`" },
      {
        "description": "The operator to use. Operators must be enclosed in quotes: `\">\"`, `\"=\"`, `\"<=\"`, and so on.",
        "name": "`operator`"
      },
      { "name": "`b`" },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Block, or if specified the inverse block is rendered if falsey."
      }
    ],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "compare",
    "longname": "helpers.compare",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000158",
    "___s": true
  },
  "contains": {
    "comment": "/**\n * Returns true if the given value contains the given\n * `object`, optionally passing a starting index.\n *\n * @param {Array} val\n * @param {Object} obj\n * @param {Number} start\n * @return {Boolean}\n */",
    "meta": {
      "range": [295, 471],
      "filename": "index.js",
      "lineno": 16,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib/utils",
      "code": {
        "id": "astnode100008572",
        "name": "utils.contains",
        "type": "FunctionExpression",
        "paramnames": ["val", "obj", "start"]
      }
    },
    "description": "Returns true if the given value contains the given\n`object`, optionally passing a starting index.",
    "params": [
      { "type": { "names": ["Array"] }, "name": "val" },
      { "type": { "names": ["Object"] }, "name": "obj" },
      { "type": { "names": ["Number"] }, "name": "start" }
    ],
    "returns": [{ "type": { "names": ["Boolean"] } }],
    "name": "contains",
    "longname": "utils.contains",
    "kind": "function",
    "memberof": "utils",
    "scope": "static",
    "___id": "T000002R000614",
    "___s": true
  },
  ".or": {
    "comment": "/**\n * Returns the first value that is not undefined, otherwise the \"default\" value is returned.\n *\n * @param {any} `value`\n * @param {any} `defaultValue`\n * @return {String}\n * @alias .or\n * @api public\n */",
    "meta": {
      "range": [3587, 3738],
      "filename": "comparison.js",
      "lineno": 143,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002292",
        "name": "helpers.default",
        "type": "FunctionExpression",
        "paramnames": []
      },
      "vars": { "i": ".or~i" }
    },
    "description": "Returns the first value that is not undefined, otherwise the \"default\" value is returned.",
    "params": [
      { "type": { "names": ["any"] }, "name": "`value`" },
      { "type": { "names": ["any"] }, "name": "`defaultValue`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "alias": ".or",
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": ".or",
    "longname": ".or",
    "kind": "function",
    "scope": "global",
    "___id": "T000002R000173",
    "___s": true
  },
  "is": {
    "comment": "/**\n * Block helper that renders a block if `a` is **equal to** `b`.\n * If an inverse block is specified it will be rendered when falsy.\n * Similar to [eq](#eq) but does not do strict equality.\n *\n * @param {any} `a`\n * @param {any} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [9329, 9496],
      "filename": "comparison.js",
      "lineno": 367,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002712",
        "name": "helpers.is",
        "type": "FunctionExpression",
        "paramnames": ["a", "b", "options"]
      },
      "vars": { "options": "helpers.is~options", "b": "helpers.is~b" }
    },
    "description": "Block helper that renders a block if `a` is **equal to** `b`.\nIf an inverse block is specified it will be rendered when falsy.\nSimilar to [eq](#eq) but does not do strict equality.",
    "params": [
      { "type": { "names": ["any"] }, "name": "`a`" },
      { "type": { "names": ["any"] }, "name": "`b`" },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "is",
    "longname": "helpers.is",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000196",
    "___s": true
  },
  "gt": {
    "comment": "/**\n * Block helper that renders a block if `a` is **greater than** `b`.\n *\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */",
    "meta": {
      "range": [4794, 4960],
      "filename": "comparison.js",
      "lineno": 188,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002365",
        "name": "helpers.gt",
        "type": "FunctionExpression",
        "paramnames": ["a", "b", "options"]
      },
      "vars": { "options": "helpers.gt~options", "b": "helpers.gt~b" }
    },
    "description": "Block helper that renders a block if `a` is **greater than** `b`.\n\nIf an inverse block is specified it will be rendered when falsy.\nYou may optionally use the `compare=\"\"` hash argument for the\nsecond value.",
    "params": [
      { "type": { "names": ["String"] }, "name": "`a`" },
      { "type": { "names": ["String"] }, "name": "`b`" },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Block, or inverse block if specified and falsey."
      }
    ],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "gt",
    "longname": "helpers.gt",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000178",
    "___s": true
  },
  "gte": {
    "comment": "/**\n * Block helper that renders a block if `a` is **greater than or\n * equal to** `b`.\n *\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */",
    "meta": {
      "range": [5416, 5584],
      "filename": "comparison.js",
      "lineno": 212,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002404",
        "name": "helpers.gte",
        "type": "FunctionExpression",
        "paramnames": ["a", "b", "options"]
      },
      "vars": { "options": "helpers.gte~options", "b": "helpers.gte~b" }
    },
    "description": "Block helper that renders a block if `a` is **greater than or\nequal to** `b`.\n\nIf an inverse block is specified it will be rendered when falsy.\nYou may optionally use the `compare=\"\"` hash argument for the\nsecond value.",
    "params": [
      { "type": { "names": ["String"] }, "name": "`a`" },
      { "type": { "names": ["String"] }, "name": "`b`" },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Block, or inverse block if specified and falsey."
      }
    ],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "gte",
    "longname": "helpers.gte",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000181",
    "___s": true
  },
  "has": {
    "comment": "/**\n * Block helper that renders a block if `value` has `pattern`.\n * If an inverse block is specified it will be rendered when falsy.\n *\n * @param {any} `val` The value to check.\n * @param {any} `pattern` The pattern to check for.\n * @param {Object} `options` Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [5933, 6667],
      "filename": "comparison.js",
      "lineno": 232,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002443",
        "name": "helpers.has",
        "type": "FunctionExpression",
        "paramnames": ["value", "pattern", "options"]
      },
      "vars": {
        "options": "helpers.has~options",
        "pattern": "helpers.has~pattern",
        "value": "helpers.has~value"
      }
    },
    "description": "Block helper that renders a block if `value` has `pattern`.\nIf an inverse block is specified it will be rendered when falsy.",
    "params": [
      {
        "type": { "names": ["any"] },
        "description": "The value to check.",
        "name": "`val`"
      },
      {
        "type": { "names": ["any"] },
        "description": "The pattern to check for.",
        "name": "`pattern`"
      },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "has",
    "longname": "helpers.has",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000184",
    "___s": true
  },
  "isFalsey": {
    "comment": "/**\n * Returns true if the given `value` is falsey. Uses the [falsey][]\n * library for comparisons. Please see that library for more information\n * or to report bugs with this helper.\n *\n * @param {any} `val`\n * @param {Options} `options`\n * @return {Boolean}\n * @api public\n */",
    "meta": {
      "range": [6950, 7050],
      "filename": "comparison.js",
      "lineno": 274,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002588",
        "name": "helpers.isFalsey",
        "type": "FunctionExpression",
        "paramnames": ["val", "options"]
      }
    },
    "description": "Returns true if the given `value` is falsey. Uses the [falsey][]\nlibrary for comparisons. Please see that library for more information\nor to report bugs with this helper.",
    "params": [
      { "type": { "names": ["any"] }, "name": "`val`" },
      { "type": { "names": ["Options"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["Boolean"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "isFalsey",
    "longname": "helpers.isFalsey",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000190",
    "___s": true
  },
  "isTruthy": {
    "comment": "/**\n * Returns true if the given `value` is truthy. Uses the [falsey][]\n * library for comparisons. Please see that library for more information\n * or to report bugs with this helper.\n *\n * @param {any} `val`\n * @param {Options} `options`\n * @return {Boolean}\n * @api public\n */",
    "meta": {
      "range": [7333, 7434],
      "filename": "comparison.js",
      "lineno": 289,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002609",
        "name": "helpers.isTruthy",
        "type": "FunctionExpression",
        "paramnames": ["val", "options"]
      }
    },
    "description": "Returns true if the given `value` is truthy. Uses the [falsey][]\nlibrary for comparisons. Please see that library for more information\nor to report bugs with this helper.",
    "params": [
      { "type": { "names": ["any"] }, "name": "`val`" },
      { "type": { "names": ["Options"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["Boolean"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "isTruthy",
    "longname": "helpers.isTruthy",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000191",
    "___s": true
  },
  "ifEven": {
    "comment": "/**\n * Return true if the given value is an even number.\n *\n * ```handlebars\n * {{#ifEven value}}\n *   render A\n * {{else}}\n *   render B\n * {{/ifEven}}\n * ```\n * @param {Number} `number`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */",
    "meta": {
      "range": [7788, 7886],
      "filename": "comparison.js",
      "lineno": 310,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002631",
        "name": "helpers.ifEven",
        "type": "FunctionExpression",
        "paramnames": ["num", "options"]
      }
    },
    "description": "Return true if the given value is an even number.\n\n```handlebars\n{{#ifEven value}}\n  render A\n{{else}}\n  render B\n{{/ifEven}}\n```",
    "params": [
      { "type": { "names": ["Number"] }, "name": "`number`" },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Block, or inverse block if specified and falsey."
      }
    ],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "ifEven",
    "longname": "helpers.ifEven",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000192",
    "___s": true
  },
  "ifNth": {
    "comment": "/**\n * Conditionally renders a block if the remainder is zero when\n * `a` operand is divided by `b`. If an inverse block is specified\n * it will be rendered when the remainder is **not zero**.\n *\n * @param {Number}\n * @param {Number}\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */",
    "meta": {
      "range": [8286, 8441],
      "filename": "comparison.js",
      "lineno": 327,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002652",
        "name": "helpers.ifNth",
        "type": "FunctionExpression",
        "paramnames": ["a", "b", "options"]
      },
      "vars": { "isNth": "helpers.ifNth~isNth" }
    },
    "description": "Conditionally renders a block if the remainder is zero when\n`a` operand is divided by `b`. If an inverse block is specified\nit will be rendered when the remainder is **not zero**.",
    "params": [
      { "type": { "names": ["Number"] }, "name": "a" },
      { "type": { "names": ["Number"] }, "name": "b" },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Block, or inverse block if specified and falsey."
      }
    ],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "ifNth",
    "longname": "helpers.ifNth",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000193",
    "___s": true
  },
  "ifOdd": {
    "comment": "/**\n * Block helper that renders a block if `value` is **an odd number**.\n * If an inverse block is specified it will be rendered when falsy.\n *\n * ```handlebars\n * {{#ifOdd value}}\n *   render A\n * {{else}}\n *   render B\n * {{/ifOdd}}\n * ```\n * @param {Object} `value`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */",
    "meta": {
      "range": [8877, 8975],
      "filename": "comparison.js",
      "lineno": 350,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002690",
        "name": "helpers.ifOdd",
        "type": "FunctionExpression",
        "paramnames": ["val", "options"]
      }
    },
    "description": "Block helper that renders a block if `value` is **an odd number**.\nIf an inverse block is specified it will be rendered when falsy.\n\n```handlebars\n{{#ifOdd value}}\n  render A\n{{else}}\n  render B\n{{/ifOdd}}\n```",
    "params": [
      { "type": { "names": ["Object"] }, "name": "`value`" },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Block, or inverse block if specified and falsey."
      }
    ],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "ifOdd",
    "longname": "helpers.ifOdd",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000195",
    "___s": true
  },
  "isnt": {
    "comment": "/**\n * Block helper that renders a block if `a` is **not equal to** `b`.\n * If an inverse block is specified it will be rendered when falsy.\n * Similar to [unlessEq](#unlesseq) but does not use strict equality for\n * comparisons.\n *\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [9892, 10061],
      "filename": "comparison.js",
      "lineno": 389,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002751",
        "name": "helpers.isnt",
        "type": "FunctionExpression",
        "paramnames": ["a", "b", "options"]
      },
      "vars": { "options": "helpers.isnt~options", "b": "helpers.isnt~b" }
    },
    "description": "Block helper that renders a block if `a` is **not equal to** `b`.\nIf an inverse block is specified it will be rendered when falsy.\nSimilar to [unlessEq](#unlesseq) but does not use strict equality for\ncomparisons.",
    "params": [
      { "type": { "names": ["String"] }, "name": "`a`" },
      { "type": { "names": ["String"] }, "name": "`b`" },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "isnt",
    "longname": "helpers.isnt",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000199",
    "___s": true
  },
  "lt": {
    "comment": "/**\n * Block helper that renders a block if `a` is **less than** `b`.\n *\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @param {Object} `context`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */",
    "meta": {
      "range": [10482, 10648],
      "filename": "comparison.js",
      "lineno": 411,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002790",
        "name": "helpers.lt",
        "type": "FunctionExpression",
        "paramnames": ["a", "b", "options"]
      },
      "vars": { "options": "helpers.lt~options", "b": "helpers.lt~b" }
    },
    "description": "Block helper that renders a block if `a` is **less than** `b`.\n\nIf an inverse block is specified it will be rendered when falsy.\nYou may optionally use the `compare=\"\"` hash argument for the\nsecond value.",
    "params": [
      { "type": { "names": ["Object"] }, "name": "`context`" },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Block, or inverse block if specified and falsey."
      }
    ],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "lt",
    "longname": "helpers.lt",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000202",
    "___s": true
  },
  "lte": {
    "comment": "/**\n * Block helper that renders a block if `a` is **less than or\n * equal to** `b`.\n *\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @param {Sring} `a`\n * @param {Sring} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */",
    "meta": {
      "range": [11099, 11267],
      "filename": "comparison.js",
      "lineno": 435,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002829",
        "name": "helpers.lte",
        "type": "FunctionExpression",
        "paramnames": ["a", "b", "options"]
      },
      "vars": { "options": "helpers.lte~options", "b": "helpers.lte~b" }
    },
    "description": "Block helper that renders a block if `a` is **less than or\nequal to** `b`.\n\nIf an inverse block is specified it will be rendered when falsy.\nYou may optionally use the `compare=\"\"` hash argument for the\nsecond value.",
    "params": [
      { "type": { "names": ["Sring"] }, "name": "`a`" },
      { "type": { "names": ["Sring"] }, "name": "`b`" },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Block, or inverse block if specified and falsey."
      }
    ],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "lte",
    "longname": "helpers.lte",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000205",
    "___s": true
  },
  "neither": {
    "comment": "/**\n * Block helper that renders a block if **neither of** the given values\n * are truthy. If an inverse block is specified it will be rendered\n * when falsy.\n *\n * @param {any} `a`\n * @param {any} `b`\n * @param `options` Handlebars options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */",
    "meta": {
      "range": [11617, 11708],
      "filename": "comparison.js",
      "lineno": 456,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002868",
        "name": "helpers.neither",
        "type": "FunctionExpression",
        "paramnames": ["a", "b", "options"]
      }
    },
    "description": "Block helper that renders a block if **neither of** the given values\nare truthy. If an inverse block is specified it will be rendered\nwhen falsy.",
    "params": [
      { "type": { "names": ["any"] }, "name": "`a`" },
      { "type": { "names": ["any"] }, "name": "`b`" },
      { "description": "Handlebars options object", "name": "`options`" }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Block, or inverse block if specified and falsey."
      }
    ],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "neither",
    "longname": "helpers.neither",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000208",
    "___s": true
  },
  "not": {
    "comment": "/**\n * Returns true if `val` is falsey. Works as a block or inline helper.\n *\n * @param {String} `val`\n * @param {Object} `options` Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [11928, 12010],
      "filename": "comparison.js",
      "lineno": 470,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002890",
        "name": "helpers.not",
        "type": "FunctionExpression",
        "paramnames": ["val", "options"]
      }
    },
    "description": "Returns true if `val` is falsey. Works as a block or inline helper.",
    "params": [
      { "type": { "names": ["String"] }, "name": "`val`" },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "not",
    "longname": "helpers.not",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000209",
    "___s": true
  },
  "or": {
    "comment": "/**\n * Block helper that renders a block if **any of** the given values\n * is truthy. If an inverse block is specified it will be rendered\n * when falsy.\n *\n * ```handlebars\n * {{#or a b c}}\n *   If any value is true this will be rendered.\n * {{/or}}\n * ```\n *\n * @param {...any} `arguments` Variable number of arguments\n * @param {Object} `options` Handlebars options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */",
    "meta": {
      "range": [12488, 12769],
      "filename": "comparison.js",
      "lineno": 492,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002908",
        "name": "helpers.or",
        "type": "FunctionExpression",
        "paramnames": []
      },
      "vars": {
        "len": "helpers.or~len",
        "options": "helpers.or~options",
        "val": "helpers.or~val",
        "i": "helpers.or~i"
      }
    },
    "description": "Block helper that renders a block if **any of** the given values\nis truthy. If an inverse block is specified it will be rendered\nwhen falsy.\n\n```handlebars\n{{#or a b c}}\n  If any value is true this will be rendered.\n{{/or}}\n```",
    "params": [
      {
        "type": { "names": ["any"] },
        "variable": true,
        "description": "Variable number of arguments",
        "name": "`arguments`"
      },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars options object",
        "name": "`options`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Block, or inverse block if specified and falsey."
      }
    ],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "or",
    "longname": "helpers.or",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000210",
    "___s": true
  },
  "unlessEq": {
    "comment": "/**\n * Block helper that always renders the inverse block **unless `a` is\n * is equal to `b`**.\n *\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Inverse block by default, or block if falsey.\n * @block\n * @api public\n */",
    "meta": {
      "range": [13077, 13246],
      "filename": "comparison.js",
      "lineno": 518,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100002962",
        "name": "helpers.unlessEq",
        "type": "FunctionExpression",
        "paramnames": ["a", "b", "options"]
      },
      "vars": {
        "options": "helpers.unlessEq~options",
        "b": "helpers.unlessEq~b"
      }
    },
    "description": "Block helper that always renders the inverse block **unless `a` is\nis equal to `b`**.",
    "params": [
      { "type": { "names": ["String"] }, "name": "`a`" },
      { "type": { "names": ["String"] }, "name": "`b`" },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Inverse block by default, or block if falsey."
      }
    ],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "unlessEq",
    "longname": "helpers.unlessEq",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000216",
    "___s": true
  },
  "unlessGt": {
    "comment": "/**\n * Block helper that always renders the inverse block **unless `a` is\n * is greater than `b`**.\n *\n * @param {Object} `a` The default value\n * @param {Object} `b` The value to compare\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Inverse block by default, or block if falsey.\n * @block\n * @api public\n */",
    "meta": {
      "range": [13597, 13765],
      "filename": "comparison.js",
      "lineno": 538,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100003001",
        "name": "helpers.unlessGt",
        "type": "FunctionExpression",
        "paramnames": ["a", "b", "options"]
      },
      "vars": {
        "options": "helpers.unlessGt~options",
        "b": "helpers.unlessGt~b"
      }
    },
    "description": "Block helper that always renders the inverse block **unless `a` is\nis greater than `b`**.",
    "params": [
      {
        "type": { "names": ["Object"] },
        "description": "The default value",
        "name": "`a`"
      },
      {
        "type": { "names": ["Object"] },
        "description": "The value to compare",
        "name": "`b`"
      },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Inverse block by default, or block if falsey."
      }
    ],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "unlessGt",
    "longname": "helpers.unlessGt",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000219",
    "___s": true
  },
  "unlessLt": {
    "comment": "/**\n * Block helper that always renders the inverse block **unless `a` is\n * is less than `b`**.\n *\n * @param {Object} `a` The default value\n * @param {Object} `b` The value to compare\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */",
    "meta": {
      "range": [14116, 14284],
      "filename": "comparison.js",
      "lineno": 558,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100003040",
        "name": "helpers.unlessLt",
        "type": "FunctionExpression",
        "paramnames": ["a", "b", "options"]
      },
      "vars": {
        "options": "helpers.unlessLt~options",
        "b": "helpers.unlessLt~b"
      }
    },
    "description": "Block helper that always renders the inverse block **unless `a` is\nis less than `b`**.",
    "params": [
      {
        "type": { "names": ["Object"] },
        "description": "The default value",
        "name": "`a`"
      },
      {
        "type": { "names": ["Object"] },
        "description": "The value to compare",
        "name": "`b`"
      },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Block, or inverse block if specified and falsey."
      }
    ],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "unlessLt",
    "longname": "helpers.unlessLt",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000222",
    "___s": true
  },
  "unlessGteq": {
    "comment": "/**\n * Block helper that always renders the inverse block **unless `a` is\n * is greater than or equal to `b`**.\n *\n * @param {any} `a`\n * @param {any} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */",
    "meta": {
      "range": [14605, 14774],
      "filename": "comparison.js",
      "lineno": 578,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100003079",
        "name": "helpers.unlessGteq",
        "type": "FunctionExpression",
        "paramnames": ["a", "b", "options"]
      },
      "vars": {
        "options": "helpers.unlessGteq~options",
        "b": "helpers.unlessGteq~b"
      }
    },
    "description": "Block helper that always renders the inverse block **unless `a` is\nis greater than or equal to `b`**.",
    "params": [
      { "type": { "names": ["any"] }, "name": "`a`" },
      { "type": { "names": ["any"] }, "name": "`b`" },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Block, or inverse block if specified and falsey."
      }
    ],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "unlessGteq",
    "longname": "helpers.unlessGteq",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000225",
    "___s": true
  },
  "unlessLteq": {
    "comment": "/**\n * Block helper that always renders the inverse block **unless `a` is\n * is less than or equal to `b`**.\n *\n * @param {any} `a`\n * @param {any} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */",
    "meta": {
      "range": [15092, 15261],
      "filename": "comparison.js",
      "lineno": 598,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100003118",
        "name": "helpers.unlessLteq",
        "type": "FunctionExpression",
        "paramnames": ["a", "b", "options"]
      },
      "vars": {
        "options": "helpers.unlessLteq~options",
        "b": "helpers.unlessLteq~b"
      }
    },
    "description": "Block helper that always renders the inverse block **unless `a` is\nis less than or equal to `b`**.",
    "params": [
      { "type": { "names": ["any"] }, "name": "`a`" },
      { "type": { "names": ["any"] }, "name": "`b`" },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object",
        "name": "`options`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Block, or inverse block if specified and falsey."
      }
    ],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "unlessLteq",
    "longname": "helpers.unlessLteq",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000228",
    "___s": true
  },
  "year": {
    "comment": "/**\n * Get the current year.\n *\n * ```handlebars\n * {{year}}\n * <!-- 2017 -->\n * ```\n * @exposes year as year\n * @api public\n */",
    "meta": {
      "range": [175, 205],
      "filename": "date.js",
      "lineno": 15,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100003167",
        "name": "helpers.year",
        "type": "CallExpression",
        "value": "",
        "paramnames": []
      }
    },
    "description": "Get the current year.\n\n```handlebars\n{{year}}\n<!-- 2017 -->\n```",
    "tags": [
      {
        "originalTitle": "exposes",
        "title": "exposes",
        "text": "year as year",
        "value": "year as year"
      },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "year",
    "longname": "helpers.year",
    "kind": "member",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000232",
    "___s": true
  },
  "moment": {
    "comment": "/**\n * Use [moment][] as a helper. See [helper-date][] for more details.\n *\n * @exposes helper-date as moment\n * @api public\n */",
    "meta": {
      "range": [338, 392],
      "filename": "date.js",
      "lineno": 24,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100003175",
        "name": "helpers.moment",
        "type": "AssignmentExpression",
        "value": "helpers.date",
        "paramnames": []
      }
    },
    "description": "Use [moment][] as a helper. See [helper-date][] for more details.",
    "tags": [
      {
        "originalTitle": "exposes",
        "title": "exposes",
        "text": "helper-date as moment",
        "value": "helper-date as moment"
      },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "moment",
    "longname": "helpers.moment",
    "kind": "member",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000233",
    "___s": true
  },
  "fileSize": {
    "comment": "/**\n * Helper `fileSize` is deprecated. Use `helper.prettyBytes` instead.\n */",
    "meta": {
      "range": [283, 314],
      "filename": "fs.js",
      "lineno": 14,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100003227",
        "name": "helpers.fileSize",
        "type": "MemberExpression",
        "value": "number.bytes",
        "paramnames": []
      }
    },
    "description": "Helper `fileSize` is deprecated. Use `helper.prettyBytes` instead.",
    "name": "fileSize",
    "longname": "helpers.fileSize",
    "kind": "member",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000241",
    "___s": true
  },
  "read": {
    "comment": "/**\n * Read a file from the file system. This is useful in composing\n * \"include\"-style helpers using sub-expressions.\n *\n * ```handlebars\n * {{read \"a/b/c.js\"}}\n * {{someHelper (read \"a/b/c.md\")}}\n * ```\n * @param {String} `filepath`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [592, 682],
      "filename": "fs.js",
      "lineno": 29,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100003235",
        "name": "helpers.read",
        "type": "FunctionExpression",
        "paramnames": ["filepath", "options"]
      }
    },
    "description": "Read a file from the file system. This is useful in composing\n\"include\"-style helpers using sub-expressions.\n\n```handlebars\n{{read \"a/b/c.js\"}}\n{{someHelper (read \"a/b/c.md\")}}\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`filepath`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "read",
    "longname": "helpers.read",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000242",
    "___s": true
  },
  "readdir": {
    "comment": "/**\n * Return an array of files from the given\n * directory.\n *\n * @param {String} `directory`\n * @return {Array}\n * @api public\n */",
    "meta": {
      "range": [819, 1488],
      "filename": "fs.js",
      "lineno": 42,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100003251",
        "name": "helpers.readdir",
        "type": "FunctionExpression",
        "paramnames": ["dir", "filter"]
      },
      "vars": { "files": "helpers.readdir~files", "": null }
    },
    "description": "Return an array of files from the given\ndirectory.",
    "params": [{ "type": { "names": ["String"] }, "name": "`directory`" }],
    "returns": [{ "type": { "names": ["Array"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "readdir",
    "longname": "helpers.readdir",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000243",
    "___s": true
  },
  "attr": {
    "comment": "/**\n * Stringify attributes on the options `hash`.\n *\n * ```handlebars\n * <!-- value = 'bar' -->\n * <div{{attr foo=value}}></div>\n * <!-- results in: <div foo=\"bar\"></div>\n * ```\n * @param {Object} `options`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [468, 598],
      "filename": "html.js",
      "lineno": 23,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100003421",
        "name": "helpers.attr",
        "type": "FunctionExpression",
        "paramnames": ["options"]
      },
      "vars": { "val": "helpers.attr~val" }
    },
    "description": "Stringify attributes on the options `hash`.\n\n```handlebars\n<!-- value = 'bar' -->\n<div{{attr foo=value}}></div>\n<!-- results in: <div foo=\"bar\"></div>\n```",
    "params": [{ "type": { "names": ["Object"] }, "name": "`options`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "attr",
    "longname": "helpers.attr",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000253",
    "___s": true
  },
  "css": {
    "comment": "/**\n * Add an array of `<link>` tags. Automatically resolves\n * relative paths to `options.assets` if passed on the context.\n *\n * ```handlebars\n * <!-- {stylesheets: ['foo.css', 'bar.css']} -->\n * {{css stylesheets}}\n *\n * <!-- results in: -->\n * <!-- <link type=\"text/css\" rel=\"stylesheet\" href=\"foo.css\"> -->\n * <!-- <link type=\"text/css\" rel=\"stylesheet\" href=\"bar.css\"> -->\n * ```\n * @param {String|Array} `list` One or more stylesheet urls.\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [1088, 1791],
      "filename": "html.js",
      "lineno": 45,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100003451",
        "name": "helpers.css",
        "type": "FunctionExpression",
        "paramnames": ["list", "options"]
      },
      "vars": {
        "options": "helpers.css~options",
        "list": "helpers.css~list",
        "styles": "helpers.css~styles",
        "assets": "helpers.css~assets",
        "": null
      }
    },
    "description": "Add an array of `<link>` tags. Automatically resolves\nrelative paths to `options.assets` if passed on the context.\n\n```handlebars\n<!-- {stylesheets: ['foo.css', 'bar.css']} -->\n{{css stylesheets}}\n\n<!-- results in: -->\n<!-- <link type=\"text/css\" rel=\"stylesheet\" href=\"foo.css\"> -->\n<!-- <link type=\"text/css\" rel=\"stylesheet\" href=\"bar.css\"> -->\n```",
    "params": [
      {
        "type": { "names": ["String", "Array"] },
        "description": "One or more stylesheet urls.",
        "name": "`list`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "css",
    "longname": "helpers.css",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000255",
    "___s": true
  },
  "js": {
    "comment": "/**\n * Generate one or more `<script></script>` tags with paths/urls to\n * javascript or coffeescript files.\n *\n * ```handlebars\n * {{js scripts}}\n * ```\n * @param {Object} `context`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [2017, 2546],
      "filename": "html.js",
      "lineno": 89,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100003583",
        "name": "helpers.js",
        "type": "FunctionExpression",
        "paramnames": ["context"]
      },
      "vars": {
        "attr": "helpers.js~attr",
        "context": "helpers.js~context",
        "": null
      }
    },
    "description": "Generate one or more `<script></script>` tags with paths/urls to\njavascript or coffeescript files.\n\n```handlebars\n{{js scripts}}\n```",
    "params": [{ "type": { "names": ["Object"] }, "name": "`context`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "js",
    "longname": "helpers.js",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000265",
    "___s": true
  },
  "sanitize": {
    "comment": "/**\n * Strip HTML tags from a string, so that only the text nodes\n * are preserved.\n *\n * ```handlebars\n * {{sanitize \"<span>foo</span>\"}}\n * //=> 'foo'\n * ```\n *\n * @param {String} `str` The string of HTML to sanitize.\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [1273, 1376],
      "filename": "html.js",
      "lineno": 65,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib/utils",
      "code": {
        "id": "astnode100008458",
        "name": "html.sanitize",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      }
    },
    "description": "Strip HTML tags from a string, so that only the text nodes\nare preserved.\n\n```handlebars\n{{sanitize \"<span>foo</span>\"}}\n//=> 'foo'\n```",
    "params": [
      {
        "type": { "names": ["String"] },
        "description": "The string of HTML to sanitize.",
        "name": "`str`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "sanitize",
    "longname": "html.sanitize",
    "kind": "function",
    "memberof": "html",
    "scope": "static",
    "___id": "T000002R000604",
    "___s": true
  },
  "ul": {
    "comment": "/**\n * Block helper for creating unordered lists (`<ul></ul>`)\n *\n * @param {Object} `context`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [3067, 3329],
      "filename": "html.js",
      "lineno": 135,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100003695",
        "name": "helpers.ul",
        "type": "FunctionExpression",
        "paramnames": ["context", "options"]
      },
      "vars": { "": null }
    },
    "description": "Block helper for creating unordered lists (`<ul></ul>`)",
    "params": [
      { "type": { "names": ["Object"] }, "name": "`context`" },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "ul",
    "longname": "helpers.ul",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000272",
    "___s": true
  },
  "ol": {
    "comment": "/**\n * Block helper for creating ordered lists  (`<ol></ol>`)\n *\n * @param {Object} `context`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [3505, 3767],
      "filename": "html.js",
      "lineno": 154,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100003748",
        "name": "helpers.ol",
        "type": "FunctionExpression",
        "paramnames": ["context", "options"]
      },
      "vars": { "": null }
    },
    "description": "Block helper for creating ordered lists  (`<ol></ol>`)",
    "params": [
      { "type": { "names": ["Object"] }, "name": "`context`" },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "ol",
    "longname": "helpers.ol",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000274",
    "___s": true
  },
  "thumbnailImage": {
    "comment": "/**\n * Returns a `<figure>` with a thumbnail linked to a full picture\n *\n * @param {Object} `context` Object with values/attributes to add to the generated elements:\n * @param {String} `context.alt`\n * @param {String} `context.src`\n * @param {Number} `context.width`\n * @param {Number} `context.height`\n * @return {String} HTML `<figure>` element with image and optional caption/link.\n * @contributor: Marie Hogebrandt <https://github.com/Melindrea>\n * @api public\n */",
    "meta": {
      "range": [4240, 5342],
      "filename": "html.js",
      "lineno": 176,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100003801",
        "name": "helpers.thumbnailImage",
        "type": "FunctionExpression",
        "paramnames": ["context"]
      },
      "vars": {
        "figure": "helpers.thumbnailImage~figure",
        "image": "helpers.thumbnailImage~image",
        "link": "helpers.thumbnailImage~link",
        "imageAttributes": "helpers.thumbnailImage~imageAttributes",
        "figureAttributes": "helpers.thumbnailImage~figureAttributes",
        "linkAttributes": "helpers.thumbnailImage~linkAttributes",
        "imageAttributes.class": "helpers.thumbnailImage~imageAttributes.class",
        "figureAttributes.class": "helpers.thumbnailImage~figureAttributes.class",
        "linkAttributes.class": "helpers.thumbnailImage~linkAttributes.class"
      }
    },
    "description": "Returns a `<figure>` with a thumbnail linked to a full picture",
    "params": [
      {
        "type": { "names": ["Object"] },
        "description": "Object with values/attributes to add to the generated elements:",
        "name": "`context`"
      },
      { "type": { "names": ["String"] }, "name": "`context.alt`" },
      { "type": { "names": ["String"] }, "name": "`context.src`" },
      { "type": { "names": ["Number"] }, "name": "`context.width`" },
      { "type": { "names": ["Number"] }, "name": "`context.height`" }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "HTML `<figure>` element with image and optional caption/link."
      }
    ],
    "tags": [
      {
        "originalTitle": "contributor:",
        "title": "contributor:",
        "text": "Marie Hogebrandt <https://github.com/Melindrea>",
        "value": "Marie Hogebrandt <https://github.com/Melindrea>"
      },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "thumbnailImage",
    "longname": "helpers.thumbnailImage",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000276",
    "___s": true
  },
  "i18n": {
    "comment": "/**\n * i18n helper. See [button-i18n](https://github.com/assemble/buttons)\n * for a working example.\n *\n * @contributor Laurent Goderre <https://github.com/LaurentGoderrre>\n * @param {String} `key`\n * @param {Object} `options`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [385, 1228],
      "filename": "i18n.js",
      "lineno": 18,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004020",
        "name": "helpers.i18n",
        "type": "FunctionExpression",
        "paramnames": ["prop", "locals", "options"]
      },
      "vars": {
        "options": "helpers.i18n~options",
        "locals": "helpers.i18n~locals",
        "opts": "helpers.i18n~opts",
        "context": "helpers.i18n~context",
        "lang": "helpers.i18n~lang",
        "cache": "helpers.i18n~cache",
        "result": "helpers.i18n~result"
      }
    },
    "description": "i18n helper. See [button-i18n](https://github.com/assemble/buttons)\nfor a working example.",
    "tags": [
      {
        "originalTitle": "contributor",
        "title": "contributor",
        "text": "Laurent Goderre <https://github.com/LaurentGoderrre>",
        "value": "Laurent Goderre <https://github.com/LaurentGoderrre>"
      },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "params": [
      { "type": { "names": ["String"] }, "name": "`key`" },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "name": "i18n",
    "longname": "helpers.i18n",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000302",
    "___s": true
  },
  "inflect": {
    "comment": "/**\n * Returns either the `singular` or `plural` inflection of a word based on\n * the given `count`.\n *\n * ```handlebars\n * {{inflect 0 \"string\" \"strings\"}}\n * <!-- \"strings\" -->\n * {{inflect 1 \"string\" \"strings\"}}\n * <!-- \"string\" -->\n * {{inflect 1 \"string\" \"strings\" true}}\n * <!-- \"1 string\" -->\n * {{inflect 2 \"string\" \"strings\"}}\n * <!-- \"strings\" -->\n * {{inflect 2 \"string\" \"strings\" true}}\n * <!-- \"2 strings\" -->\n * ```\n * @param {Number} `count`\n * @param {String} `singular` The singular form\n * @param {String} `plural` The plural form\n * @param {String} `includeCount`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [709, 941],
      "filename": "inflection.js",
      "lineno": 30,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004254",
        "name": "helpers.inflect",
        "type": "FunctionExpression",
        "paramnames": ["count", "singular", "plural", "includeCount"]
      },
      "vars": { "word": "helpers.inflect~word" }
    },
    "description": "Returns either the `singular` or `plural` inflection of a word based on\nthe given `count`.\n\n```handlebars\n{{inflect 0 \"string\" \"strings\"}}\n<!-- \"strings\" -->\n{{inflect 1 \"string\" \"strings\"}}\n<!-- \"string\" -->\n{{inflect 1 \"string\" \"strings\" true}}\n<!-- \"1 string\" -->\n{{inflect 2 \"string\" \"strings\"}}\n<!-- \"strings\" -->\n{{inflect 2 \"string\" \"strings\" true}}\n<!-- \"2 strings\" -->\n```",
    "params": [
      { "type": { "names": ["Number"] }, "name": "`count`" },
      {
        "type": { "names": ["String"] },
        "description": "The singular form",
        "name": "`singular`"
      },
      {
        "type": { "names": ["String"] },
        "description": "The plural form",
        "name": "`plural`"
      },
      { "type": { "names": ["String"] }, "name": "`includeCount`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "inflect",
    "longname": "helpers.inflect",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000333",
    "___s": true
  },
  "ordinalize": {
    "comment": "/**\n * Returns an ordinalized number as a string.\n *\n * ```handlebars\n * {{ordinalize 1}}\n * <!-- '1st' -->\n * {{ordinalize 21}}\n * <!-- '21st' -->\n * {{ordinalize 29}}\n * <!-- '29th' -->\n * {{ordinalize 22}}\n * <!-- '22nd' -->\n * ```\n *\n * @param {String} `val` The value to ordinalize.\n * @return {String} The ordinalized number\n * @api public\n */",
    "meta": {
      "range": [1295, 1678],
      "filename": "inflection.js",
      "lineno": 58,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004294",
        "name": "helpers.ordinalize",
        "type": "FunctionExpression",
        "paramnames": ["val"]
      },
      "vars": {
        "num": "helpers.ordinalize~num",
        "str": "helpers.ordinalize~str",
        "res": "helpers.ordinalize~res"
      }
    },
    "description": "Returns an ordinalized number as a string.\n\n```handlebars\n{{ordinalize 1}}\n<!-- '1st' -->\n{{ordinalize 21}}\n<!-- '21st' -->\n{{ordinalize 29}}\n<!-- '29th' -->\n{{ordinalize 22}}\n<!-- '22nd' -->\n```",
    "params": [
      {
        "type": { "names": ["String"] },
        "description": "The value to ordinalize.",
        "name": "`val`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "The ordinalized number"
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "ordinalize",
    "longname": "helpers.ordinalize",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000335",
    "___s": true
  },
  "exports": {
    "comment": "/**\n * Expose `utils`\n */",
    "meta": {
      "range": [658, 680],
      "filename": "utils.js",
      "lineno": 41,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib/utils",
      "code": {
        "id": "astnode100008837",
        "name": "module.exports",
        "type": "Identifier",
        "value": "utils",
        "paramnames": []
      }
    },
    "description": "Expose `utils`",
    "name": "exports",
    "longname": "module.exports",
    "kind": "member",
    "memberof": "module",
    "scope": "static",
    "___id": "T000002R000627",
    "___s": true
  },
  "helpers": {
    "comment": "/**\n * Expose markdown `helpers` (for performance we're using getters so\n * that the helpers are only loaded if called)\n */",
    "meta": {
      "range": [144, 168],
      "filename": "markdown.js",
      "lineno": 8,
      "columnno": 4,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004387",
        "name": "helpers",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "description": "Expose markdown `helpers` (for performance we're using getters so\nthat the helpers are only loaded if called)",
    "name": "helpers",
    "longname": "helpers",
    "kind": "member",
    "scope": "global",
    "params": [],
    "___id": "T000002R000340",
    "___s": true
  },
  ".markdown": {
    "comment": "/**\n * Block helper that converts a string of inline markdown to HTML.\n *\n * ```handlebars\n * {{#markdown}}\n * # Foo\n * {{/markdown}}\n * <!-- results in: <h1>Foo</h1> -->\n * ```\n * @name .markdown\n * @param {Object} `context`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "filename": "markdown.js",
      "lineno": 11,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {}
    },
    "description": "Block helper that converts a string of inline markdown to HTML.\n\n```handlebars\n{{#markdown}}\n# Foo\n{{/markdown}}\n<!-- results in: <h1>Foo</h1> -->\n```",
    "name": ".markdown",
    "params": [
      { "type": { "names": ["Object"] }, "name": "`context`" },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "longname": ".markdown",
    "kind": "member",
    "scope": "global",
    "___id": "T000002R000342",
    "___s": true
  },
  "md": {
    "comment": "/**\n * Read a markdown file from the file system and inject its contents after\n * converting it to HTML.\n *\n * ```handlebars\n * {{md \"foo/bar.md\"}}\n * ```\n * @param {Object} `context`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [1091, 1124],
      "filename": "markdown.js",
      "lineno": 55,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004428",
        "name": "helpers.md",
        "type": "CallExpression",
        "value": "",
        "paramnames": []
      }
    },
    "description": "Read a markdown file from the file system and inject its contents after\nconverting it to HTML.\n\n```handlebars\n{{md \"foo/bar.md\"}}\n```",
    "params": [
      { "type": { "names": ["Object"] }, "name": "`context`" },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "md",
    "longname": "helpers.md",
    "kind": "member",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000349",
    "___s": true
  },
  "match": {
    "comment": "/**\n * Returns an array of strings that match the given glob pattern(s).\n * Options may be passed on the options hash or locals.\n *\n * ```handlebars\n * {{match (readdir \"foo\") \"*.js\"}}\n * {{match (readdir \"foo\") (toRegex \"\\\\.js$\")}}\n * ```\n * @param {Array|String} `files`\n * @param {Array|String} `patterns` One or more glob patterns.\n * @param {Object} `locals`\n * @param {Object} `options`\n * @return {Array} Array of matches\n * @api public\n */",
    "meta": {
      "range": [567, 801],
      "filename": "match.js",
      "lineno": 23,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004458",
        "name": "helpers.match",
        "type": "FunctionExpression",
        "paramnames": ["files", "patterns", "locals", "options"]
      },
      "vars": {
        "opts": "helpers.match~opts",
        "patterns": "helpers.match~patterns"
      }
    },
    "description": "Returns an array of strings that match the given glob pattern(s).\nOptions may be passed on the options hash or locals.\n\n```handlebars\n{{match (readdir \"foo\") \"*.js\"}}\n{{match (readdir \"foo\") (toRegex \"\\\\.js$\")}}\n```",
    "params": [
      { "type": { "names": ["Array", "String"] }, "name": "`files`" },
      {
        "type": { "names": ["Array", "String"] },
        "description": "One or more glob patterns.",
        "name": "`patterns`"
      },
      { "type": { "names": ["Object"] }, "name": "`locals`" },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [
      { "type": { "names": ["Array"] }, "description": "Array of matches" }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "match",
    "longname": "helpers.match",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000353",
    "___s": true
  },
  "isMatch": {
    "comment": "/**\n * Returns true if a filepath contains the given pattern.\n * Options may be passed on the options hash or locals.\n *\n * ```handlebars\n * {{isMatch \"foo.md\" \"*.md\"}}\n * <!-- results in: true -->\n * ```\n *\n * @param {String} `filepath`\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Boolean}\n * @api public\n */",
    "meta": {
      "range": [1141, 1305],
      "filename": "match.js",
      "lineno": 47,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004501",
        "name": "helpers.isMatch",
        "type": "FunctionExpression",
        "paramnames": ["files", "patterns", "locals", "options"]
      },
      "vars": { "opts": "helpers.isMatch~opts" }
    },
    "description": "Returns true if a filepath contains the given pattern.\nOptions may be passed on the options hash or locals.\n\n```handlebars\n{{isMatch \"foo.md\" \"*.md\"}}\n<!-- results in: true -->\n```",
    "params": [
      { "type": { "names": ["String"] }, "name": "`filepath`" },
      { "type": { "names": ["String"] }, "name": "`pattern`" },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["Boolean"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "isMatch",
    "longname": "helpers.isMatch",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000356",
    "___s": true
  },
  "mm": {
    "comment": "/**\n * Alias for micromatch helper. Deprecated in v0.9.0.\n */",
    "meta": {
      "range": [1371, 1623],
      "filename": "match.js",
      "lineno": 56,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004532",
        "name": "helpers.mm",
        "type": "FunctionExpression",
        "paramnames": []
      }
    },
    "description": "Alias for micromatch helper. Deprecated in v0.9.0.",
    "name": "mm",
    "longname": "helpers.mm",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000358",
    "___s": true
  },
  "abs": {
    "comment": "/**\n * Return the magnitude of `a`.\n *\n * @param {Number} `a`\n * @return {Number}\n * @api public\n */",
    "meta": {
      "range": [217, 346],
      "filename": "math.js",
      "lineno": 15,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004588",
        "name": "helpers.abs",
        "type": "FunctionExpression",
        "paramnames": ["num"]
      }
    },
    "description": "Return the magnitude of `a`.",
    "params": [{ "type": { "names": ["Number"] }, "name": "`a`" }],
    "returns": [{ "type": { "names": ["Number"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "abs",
    "longname": "helpers.abs",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000362",
    "___s": true
  },
  "add": {
    "comment": "/**\n * Return the sum of `a` plus `b`.\n *\n * @param {Number} `a`\n * @param {Number} `b`\n * @return {Number}\n * @api public\n */",
    "meta": {
      "range": [477, 674],
      "filename": "math.js",
      "lineno": 31,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004612",
        "name": "helpers.add",
        "type": "FunctionExpression",
        "paramnames": ["a", "b"]
      }
    },
    "description": "Return the sum of `a` plus `b`.",
    "params": [
      { "type": { "names": ["Number"] }, "name": "`a`" },
      { "type": { "names": ["Number"] }, "name": "`b`" }
    ],
    "returns": [{ "type": { "names": ["Number"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "add",
    "longname": "helpers.add",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000363",
    "___s": true
  },
  "avg": {
    "comment": "/**\n * Returns the average of all numbers in the given array.\n *\n * ```handlebars\n * {{avg \"[1, 2, 3, 4, 5]\"}}\n * <!-- results in: '3' -->\n * ```\n *\n * @param {Array} `array` Array of numbers to add up.\n * @return {Number}\n * @api public\n */",
    "meta": {
      "range": [920, 1087],
      "filename": "math.js",
      "lineno": 54,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004655",
        "name": "helpers.avg",
        "type": "FunctionExpression",
        "paramnames": []
      },
      "vars": { "args": "helpers.avg~args" }
    },
    "description": "Returns the average of all numbers in the given array.\n\n```handlebars\n{{avg \"[1, 2, 3, 4, 5]\"}}\n<!-- results in: '3' -->\n```",
    "params": [
      {
        "type": { "names": ["Array"] },
        "description": "Array of numbers to add up.",
        "name": "`array`"
      }
    ],
    "returns": [{ "type": { "names": ["Number"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "avg",
    "longname": "helpers.avg",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000364",
    "___s": true
  },
  "ceil": {
    "comment": "/**\n * Get the `Math.ceil()` of the given value.\n *\n * @param {Number} `value`\n * @return {Number}\n * @api public\n */",
    "meta": {
      "range": [1209, 1340],
      "filename": "math.js",
      "lineno": 69,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004688",
        "name": "helpers.ceil",
        "type": "FunctionExpression",
        "paramnames": ["num"]
      }
    },
    "description": "Get the `Math.ceil()` of the given value.",
    "params": [{ "type": { "names": ["Number"] }, "name": "`value`" }],
    "returns": [{ "type": { "names": ["Number"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "ceil",
    "longname": "helpers.ceil",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000366",
    "___s": true
  },
  "divide": {
    "comment": "/**\n * Divide `a` by `b`\n *\n * @param {Number} `a` numerator\n * @param {Number} `b` denominator\n * @api public\n */",
    "meta": {
      "range": [1459, 1721],
      "filename": "math.js",
      "lineno": 84,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004712",
        "name": "helpers.divide",
        "type": "FunctionExpression",
        "paramnames": ["a", "b"]
      }
    },
    "description": "Divide `a` by `b`",
    "params": [
      {
        "type": { "names": ["Number"] },
        "description": "numerator",
        "name": "`a`"
      },
      {
        "type": { "names": ["Number"] },
        "description": "denominator",
        "name": "`b`"
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "divide",
    "longname": "helpers.divide",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000367",
    "___s": true
  },
  "floor": {
    "comment": "/**\n * Get the `Math.floor()` of the given value.\n *\n * @param {Number} `value`\n * @return {Number}\n * @api public\n */",
    "meta": {
      "range": [1844, 1977],
      "filename": "math.js",
      "lineno": 102,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004749",
        "name": "helpers.floor",
        "type": "FunctionExpression",
        "paramnames": ["num"]
      }
    },
    "description": "Get the `Math.floor()` of the given value.",
    "params": [{ "type": { "names": ["Number"] }, "name": "`value`" }],
    "returns": [{ "type": { "names": ["Number"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "floor",
    "longname": "helpers.floor",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000368",
    "___s": true
  },
  "subtract": {
    "comment": "/**\n * Return the difference of `a` minus `b`.\n *\n * @param {Number} `a`\n * @param {Number} `b`\n * @alias subtract\n * @api public\n */",
    "meta": {
      "range": [2115, 2376],
      "filename": "math.js",
      "lineno": 118,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004773",
        "name": "helpers.minus",
        "type": "FunctionExpression",
        "paramnames": ["a", "b"]
      }
    },
    "description": "Return the difference of `a` minus `b`.",
    "params": [
      { "type": { "names": ["Number"] }, "name": "`a`" },
      { "type": { "names": ["Number"] }, "name": "`b`" }
    ],
    "alias": "subtract",
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "subtract",
    "longname": "subtract",
    "kind": "function",
    "scope": "global",
    "___id": "T000002R000369",
    "___s": true
  },
  "modulo": {
    "comment": "/**\n * Get the remainder of a division operation.\n *\n * @param {Number} `a`\n * @param {Number} `b`\n * @return {Number}\n * @api public\n */",
    "meta": {
      "range": [2518, 2780],
      "filename": "math.js",
      "lineno": 137,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004810",
        "name": "helpers.modulo",
        "type": "FunctionExpression",
        "paramnames": ["a", "b"]
      }
    },
    "description": "Get the remainder of a division operation.",
    "params": [
      { "type": { "names": ["Number"] }, "name": "`a`" },
      { "type": { "names": ["Number"] }, "name": "`b`" }
    ],
    "returns": [{ "type": { "names": ["Number"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "modulo",
    "longname": "helpers.modulo",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000370",
    "___s": true
  },
  "times": {
    "comment": "/**\n * Return the product of `a` times `b`.\n *\n * @param {Number} `a` factor\n * @param {Number} `b` multiplier\n * @return {Number}\n * @alias times\n * @api public\n */",
    "meta": {
      "range": [2950, 3214],
      "filename": "math.js",
      "lineno": 157,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004847",
        "name": "helpers.multiply",
        "type": "FunctionExpression",
        "paramnames": ["a", "b"]
      }
    },
    "description": "Return the product of `a` times `b`.",
    "params": [
      {
        "type": { "names": ["Number"] },
        "description": "factor",
        "name": "`a`"
      },
      {
        "type": { "names": ["Number"] },
        "description": "multiplier",
        "name": "`b`"
      }
    ],
    "returns": [{ "type": { "names": ["Number"] } }],
    "alias": "times",
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "times",
    "longname": "times",
    "kind": "function",
    "scope": "global",
    "___id": "T000002R000371",
    "___s": true
  },
  "plus": {
    "comment": "/**\n * Add `a` by `b`.\n *\n * @param {Number} `a` factor\n * @param {Number} `b` multiplier\n * @api public\n */",
    "meta": {
      "range": [3327, 3587],
      "filename": "math.js",
      "lineno": 175,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004884",
        "name": "helpers.plus",
        "type": "FunctionExpression",
        "paramnames": ["a", "b"]
      }
    },
    "description": "Add `a` by `b`.",
    "params": [
      {
        "type": { "names": ["Number"] },
        "description": "factor",
        "name": "`a`"
      },
      {
        "type": { "names": ["Number"] },
        "description": "multiplier",
        "name": "`b`"
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "plus",
    "longname": "helpers.plus",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000372",
    "___s": true
  },
  "random": {
    "comment": "/**\n * Generate a random number\n *\n * @param {Number} `min`\n * @param {Number} `max`\n * @return {Number}\n * @api public\n */",
    "meta": {
      "range": [1602, 1699],
      "filename": "index.js",
      "lineno": 80,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib/utils",
      "code": {
        "id": "astnode100008714",
        "name": "utils.random",
        "type": "FunctionExpression",
        "paramnames": ["min", "max"]
      }
    },
    "description": "Generate a random number",
    "params": [
      { "type": { "names": ["Number"] }, "name": "`min`" },
      { "type": { "names": ["Number"] }, "name": "`max`" }
    ],
    "returns": [{ "type": { "names": ["Number"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "random",
    "longname": "utils.random",
    "kind": "function",
    "memberof": "utils",
    "scope": "static",
    "___id": "T000002R000621",
    "___s": true
  },
  "remainder": {
    "comment": "/**\n * Get the remainder when `a` is divided by `b`.\n *\n * @param {Number} `a` a\n * @param {Number} `b` b\n * @api public\n */",
    "meta": {
      "range": [4111, 4165],
      "filename": "math.js",
      "lineno": 212,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004957",
        "name": "helpers.remainder",
        "type": "FunctionExpression",
        "paramnames": ["a", "b"]
      }
    },
    "description": "Get the remainder when `a` is divided by `b`.",
    "params": [
      { "type": { "names": ["Number"] }, "description": "a", "name": "`a`" },
      { "type": { "names": ["Number"] }, "description": "b", "name": "`b`" }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "remainder",
    "longname": "helpers.remainder",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000374",
    "___s": true
  },
  "round": {
    "comment": "/**\n * Round the given number.\n *\n * @param {Number} `number`\n * @return {Number}\n * @api public\n */",
    "meta": {
      "range": [4270, 4403],
      "filename": "math.js",
      "lineno": 224,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004970",
        "name": "helpers.round",
        "type": "FunctionExpression",
        "paramnames": ["num"]
      }
    },
    "description": "Round the given number.",
    "params": [{ "type": { "names": ["Number"] }, "name": "`number`" }],
    "returns": [{ "type": { "names": ["Number"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "round",
    "longname": "helpers.round",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000375",
    "___s": true
  },
  "minus": {
    "comment": "/**\n * Return the product of `a` minus `b`.\n *\n * @param {Number} `a`\n * @param {Number} `b`\n * @return {Number}\n * @alias minus\n * @api public\n */",
    "meta": {
      "range": [4555, 4819],
      "filename": "math.js",
      "lineno": 241,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100004994",
        "name": "helpers.subtract",
        "type": "FunctionExpression",
        "paramnames": ["a", "b"]
      }
    },
    "description": "Return the product of `a` minus `b`.",
    "params": [
      { "type": { "names": ["Number"] }, "name": "`a`" },
      { "type": { "names": ["Number"] }, "name": "`b`" }
    ],
    "returns": [{ "type": { "names": ["Number"] } }],
    "alias": "minus",
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "minus",
    "longname": "minus",
    "kind": "function",
    "scope": "global",
    "___id": "T000002R000376",
    "___s": true
  },
  "sum": {
    "comment": "/**\n * Returns the sum of all numbers in the given array.\n *\n * ```handlebars\n * {{sum \"[1, 2, 3, 4, 5]\"}}\n * <!-- results in: '15' -->\n * ```\n * @param {Array} `array` Array of numbers to add up.\n * @return {Number}\n * @api public\n */",
    "meta": {
      "range": [5059, 5284],
      "filename": "math.js",
      "lineno": 263,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005031",
        "name": "helpers.sum",
        "type": "FunctionExpression",
        "paramnames": []
      },
      "vars": {
        "args": "helpers.sum~args",
        "len": "helpers.sum~len",
        "sum": "helpers.sum~sum"
      }
    },
    "description": "Returns the sum of all numbers in the given array.\n\n```handlebars\n{{sum \"[1, 2, 3, 4, 5]\"}}\n<!-- results in: '15' -->\n```",
    "params": [
      {
        "type": { "names": ["Array"] },
        "description": "Array of numbers to add up.",
        "name": "`array`"
      }
    ],
    "returns": [{ "type": { "names": ["Number"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "sum",
    "longname": "helpers.sum",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000377",
    "___s": true
  },
  "multiply": {
    "comment": "/**\n * Multiply number `a` by number `b`.\n *\n * @param {Number} `a` factor\n * @param {Number} `b` multiplier\n * @return {Number}\n * @alias multiply\n * @api public\n */",
    "meta": {
      "range": [5455, 5535],
      "filename": "math.js",
      "lineno": 286,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005082",
        "name": "helpers.times",
        "type": "FunctionExpression",
        "paramnames": []
      }
    },
    "description": "Multiply number `a` by number `b`.",
    "params": [
      {
        "type": { "names": ["Number"] },
        "description": "factor",
        "name": "`a`"
      },
      {
        "type": { "names": ["Number"] },
        "description": "multiplier",
        "name": "`b`"
      }
    ],
    "returns": [{ "type": { "names": ["Number"] } }],
    "alias": "multiply",
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "multiply",
    "longname": "multiply",
    "kind": "function",
    "scope": "global",
    "___id": "T000002R000382",
    "___s": true
  },
  "frame": {
    "comment": "/**\n * Block helper for exposing private `@` variables on the context\n */",
    "meta": {
      "range": [193, 250],
      "filename": "misc.js",
      "lineno": 11,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005120",
        "name": "helpers.frame",
        "type": "CallExpression",
        "value": "",
        "paramnames": []
      }
    },
    "description": "Block helper for exposing private `@` variables on the context",
    "name": "frame",
    "longname": "helpers.frame",
    "kind": "member",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000386",
    "___s": true
  },
  "option": {
    "comment": "/**\n * Return the given value of `prop` from `this.options`.\n *\n * ```handlebars\n * <!-- context = {options: {a: {b: {c: 'ddd'}}}} -->\n * {{option \"a.b.c\"}}\n * <!-- results => `ddd` -->\n * ```\n * @param {String} `prop`\n * @return {any}\n * @api public\n */",
    "meta": {
      "range": [509, 624],
      "filename": "misc.js",
      "lineno": 26,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005128",
        "name": "helpers.option",
        "type": "FunctionExpression",
        "paramnames": ["prop", "locals", "options"]
      }
    },
    "description": "Return the given value of `prop` from `this.options`.\n\n```handlebars\n<!-- context = {options: {a: {b: {c: 'ddd'}}}} -->\n{{option \"a.b.c\"}}\n<!-- results => `ddd` -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`prop`" }],
    "returns": [{ "type": { "names": ["any"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "option",
    "longname": "helpers.option",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000387",
    "___s": true
  },
  "noop": {
    "comment": "/**\n * Block helper that renders the block without taking any arguments.\n *\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [782, 845],
      "filename": "misc.js",
      "lineno": 39,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005151",
        "name": "helpers.noop",
        "type": "FunctionExpression",
        "paramnames": ["options"]
      }
    },
    "description": "Block helper that renders the block without taking any arguments.",
    "params": [{ "type": { "names": ["Object"] }, "name": "`options`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "noop",
    "longname": "helpers.noop",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000388",
    "___s": true
  },
  "typeOf": {
    "comment": "/**\n * Get the native type of the given `value` including KDB temporal\n *\n * ```handlebars\n * {{typeOf 1}}\n * //=> 'number'\n * {{typeOf \"1\"}}\n * //=> 'string'\n * {{typeOf \"foo\"}}\n * //=> 'string'\n * ```\n * @param {any} `value`\n * @return {String} Returns the type of value.\n * @api public\n */",
    "meta": {
      "range": [1119, 1154],
      "filename": "misc.js",
      "lineno": 59,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005165",
        "name": "helpers.typeOf",
        "type": "CallExpression",
        "value": "",
        "paramnames": []
      }
    },
    "description": "Get the native type of the given `value` including KDB temporal\n\n```handlebars\n{{typeOf 1}}\n//=> 'number'\n{{typeOf \"1\"}}\n//=> 'string'\n{{typeOf \"foo\"}}\n//=> 'string'\n```",
    "params": [{ "type": { "names": ["any"] }, "name": "`value`" }],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Returns the type of value."
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "typeOf",
    "longname": "helpers.typeOf",
    "kind": "member",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000389",
    "___s": true
  },
  "withHash": {
    "comment": "/**\n * Block helper that builds the context for the block\n * from the options hash.\n *\n * @param {Object} `options` Handlebars provided options object.\n * @contributor Vladimir Kuznetsov <https://github.com/mistakster>\n * @block\n * @api public\n */",
    "meta": {
      "range": [1406, 1590],
      "filename": "misc.js",
      "lineno": 71,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005173",
        "name": "helpers.withHash",
        "type": "FunctionExpression",
        "paramnames": ["options"]
      }
    },
    "description": "Block helper that builds the context for the block\nfrom the options hash.",
    "params": [
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars provided options object.",
        "name": "`options`"
      }
    ],
    "tags": [
      {
        "originalTitle": "contributor",
        "title": "contributor",
        "text": "Vladimir Kuznetsov <https://github.com/mistakster>",
        "value": "Vladimir Kuznetsov <https://github.com/mistakster>"
      },
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "withHash",
    "longname": "helpers.withHash",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000390",
    "___s": true
  },
  "bytes": {
    "comment": "/**\n * Format a number to it's equivalent in bytes. If a string is passed,\n * it's length will be formatted and returned.\n *\n * **Examples:**\n *\n *   - `'foo' => 3 B`\n *   - `13661855 => 13.66 MB`\n *   - `825399 => 825.39 kB`\n *   - `1396 => 1.4 kB`\n *\n * @param {Number|String} `number`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [483, 1130],
      "filename": "number.js",
      "lineno": 24,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005239",
        "name": "helpers.bytes",
        "type": "FunctionExpression",
        "paramnames": ["number", "precision", "options"]
      },
      "vars": {
        "number": "helpers.bytes~number",
        "precision": "helpers.bytes~precision",
        "abbr": "helpers.bytes~abbr",
        "len": "helpers.bytes~len",
        "size": "helpers.bytes~size"
      }
    },
    "description": "Format a number to it's equivalent in bytes. If a string is passed,\nit's length will be formatted and returned.\n\n**Examples:**\n\n  - `'foo' => 3 B`\n  - `13661855 => 13.66 MB`\n  - `825399 => 825.39 kB`\n  - `1396 => 1.4 kB`",
    "params": [
      { "type": { "names": ["Number", "String"] }, "name": "`number`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "bytes",
    "longname": "helpers.bytes",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000395",
    "___s": true
  },
  "addCommas": {
    "comment": "/**\n * Add commas to numbers\n *\n * @param {Number} `num`\n * @return {Number}\n * @api public\n */",
    "meta": {
      "range": [1230, 1335],
      "filename": "number.js",
      "lineno": 61,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005371",
        "name": "helpers.addCommas",
        "type": "FunctionExpression",
        "paramnames": ["num"]
      }
    },
    "description": "Add commas to numbers",
    "params": [{ "type": { "names": ["Number"] }, "name": "`num`" }],
    "returns": [{ "type": { "names": ["Number"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "addCommas",
    "longname": "helpers.addCommas",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000405",
    "___s": true
  },
  "phoneNumber": {
    "comment": "/**\n * Convert a string or number to a formatted phone number.\n *\n * @param {Number|String} `num` The phone number to format, e.g. `8005551212`\n * @return {Number} Formatted phone number: `(800) 555-1212`\n * @source http://bit.ly/QlPmPr\n * @api public\n */",
    "meta": {
      "range": [1595, 1751],
      "filename": "number.js",
      "lineno": 74,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005389",
        "name": "helpers.phoneNumber",
        "type": "FunctionExpression",
        "paramnames": ["num"]
      },
      "vars": { "num": "helpers.phoneNumber~num" }
    },
    "description": "Convert a string or number to a formatted phone number.",
    "params": [
      {
        "type": { "names": ["Number", "String"] },
        "description": "The phone number to format, e.g. `8005551212`",
        "name": "`num`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["Number"] },
        "description": "Formatted phone number: `(800) 555-1212`"
      }
    ],
    "tags": [
      {
        "originalTitle": "source",
        "title": "source",
        "text": "http://bit.ly/QlPmPr",
        "value": "http://bit.ly/QlPmPr"
      },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "phoneNumber",
    "longname": "helpers.phoneNumber",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000406",
    "___s": true
  },
  "toAbbr": {
    "comment": "/**\n * Abbreviate numbers to the given number of `precision`. This is for\n * general numbers, not size in bytes.\n *\n * @param {Number} `number`\n * @param {Number} `precision`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [1969, 2554],
      "filename": "number.js",
      "lineno": 92,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005431",
        "name": "helpers.toAbbr",
        "type": "FunctionExpression",
        "paramnames": ["number", "precision"]
      },
      "vars": {
        "number": "helpers.toAbbr~number",
        "precision": "helpers.toAbbr~precision",
        "abbr": "helpers.toAbbr~abbr",
        "len": "helpers.toAbbr~len",
        "size": "helpers.toAbbr~size"
      }
    },
    "description": "Abbreviate numbers to the given number of `precision`. This is for\ngeneral numbers, not size in bytes.",
    "params": [
      { "type": { "names": ["Number"] }, "name": "`number`" },
      { "type": { "names": ["Number"] }, "name": "`precision`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "toAbbr",
    "longname": "helpers.toAbbr",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000408",
    "___s": true
  },
  "toExponential": {
    "comment": "/**\n * Returns a string representing the given number in exponential notation.\n *\n * ```handlebars\n * {{toExponential number digits}};\n * ```\n * @param {Number} `number`\n * @param {Number} `fractionDigits` Optional. An integer specifying the number of digits to use after the decimal point. Defaults to as many digits as necessary to specify the number.\n * @return {Number}\n * @api public\n */",
    "meta": {
      "range": [2951, 3157],
      "filename": "number.js",
      "lineno": 130,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005546",
        "name": "helpers.toExponential",
        "type": "FunctionExpression",
        "paramnames": ["number", "digits"]
      },
      "vars": {
        "number": "helpers.toExponential~number",
        "digits": "helpers.toExponential~digits"
      }
    },
    "description": "Returns a string representing the given number in exponential notation.\n\n```handlebars\n{{toExponential number digits}};\n```",
    "params": [
      { "type": { "names": ["Number"] }, "name": "`number`" },
      {
        "type": { "names": ["Number"] },
        "description": "Optional. An integer specifying the number of digits to use after the decimal point. Defaults to as many digits as necessary to specify the number.",
        "name": "`fractionDigits`"
      }
    ],
    "returns": [{ "type": { "names": ["Number"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "toExponential",
    "longname": "helpers.toExponential",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000418",
    "___s": true
  },
  "toFixed": {
    "comment": "/**\n * Formats the given number using fixed-point notation.\n *\n * ```handlebars\n * {{toFixed \"1.1234\" 2}}\n * //=> '1.12'\n * ```\n * @param {Number} `number`\n * @param {Number} `digits` (Optional) The number of digits to appear after the decimal point; this may be a value between 0 and 20. If this argument is omitted, it is treated as 0.\n * @return {String} A string representing the given number using fixed-point notation.\n * @api public\n */",
    "meta": {
      "range": [3605, 3792],
      "filename": "number.js",
      "lineno": 153,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005586",
        "name": "helpers.toFixed",
        "type": "FunctionExpression",
        "paramnames": ["number", "digits"]
      },
      "vars": {
        "number": "helpers.toFixed~number",
        "digits": "helpers.toFixed~digits"
      }
    },
    "description": "Formats the given number using fixed-point notation.\n\n```handlebars\n{{toFixed \"1.1234\" 2}}\n//=> '1.12'\n```",
    "params": [
      { "type": { "names": ["Number"] }, "name": "`number`" },
      {
        "type": { "names": ["Number"] },
        "description": "(Optional) The number of digits to appear after the decimal point; this may be a value between 0 and 20. If this argument is omitted, it is treated as 0.",
        "name": "`digits`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "A string representing the given number using fixed-point notation."
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "toFixed",
    "longname": "helpers.toFixed",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000421",
    "___s": true
  },
  "toFloat": {
    "comment": "/**\n * @param {Number} `number`\n * @return {Number}\n * @api public\n */",
    "meta": {
      "range": [3867, 3934],
      "filename": "number.js",
      "lineno": 169,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005625",
        "name": "helpers.toFloat",
        "type": "FunctionExpression",
        "paramnames": ["number"]
      }
    },
    "params": [{ "type": { "names": ["Number"] }, "name": "`number`" }],
    "returns": [{ "type": { "names": ["Number"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "toFloat",
    "longname": "helpers.toFloat",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000424",
    "___s": true
  },
  "toInt": {
    "comment": "/**\n * @param {Number} `number`\n * @return {Number}\n * @api public\n */",
    "meta": {
      "range": [4009, 4076],
      "filename": "number.js",
      "lineno": 179,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005637",
        "name": "helpers.toInt",
        "type": "FunctionExpression",
        "paramnames": ["number"]
      }
    },
    "params": [{ "type": { "names": ["Number"] }, "name": "`number`" }],
    "returns": [{ "type": { "names": ["Number"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "toInt",
    "longname": "helpers.toInt",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000425",
    "___s": true
  },
  "toPrecision": {
    "comment": "/**\n * Returns a string representing the `Number` object to the specified precision.\n *\n * ```handlebars\n * {{toPrecision \"1.1234\" 2}}\n * //=> '1.1'\n * ```\n * @param {Number} `number`\n * @param {Number} `precision` (Optional) An integer specifying the number of significant digits. If precison is not between 1 and 100 (inclusive), it will be coerced to `0`.\n * @return {String} A string representing a Number object in fixed-point or exponential notation rounded to precision significant digits.\n * @api public\n */",
    "meta": {
      "range": [4596, 4803],
      "filename": "number.js",
      "lineno": 196,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005650",
        "name": "helpers.toPrecision",
        "type": "FunctionExpression",
        "paramnames": ["number", "precision"]
      },
      "vars": {
        "number": "helpers.toPrecision~number",
        "precision": "helpers.toPrecision~precision"
      }
    },
    "description": "Returns a string representing the `Number` object to the specified precision.\n\n```handlebars\n{{toPrecision \"1.1234\" 2}}\n//=> '1.1'\n```",
    "params": [
      { "type": { "names": ["Number"] }, "name": "`number`" },
      {
        "type": { "names": ["Number"] },
        "description": "(Optional) An integer specifying the number of significant digits. If precison is not between 1 and 100 (inclusive), it will be coerced to `0`.",
        "name": "`precision`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "A string representing a Number object in fixed-point or exponential notation rounded to precision significant digits."
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "toPrecision",
    "longname": "helpers.toPrecision",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000426",
    "___s": true
  },
  "extend": {
    "comment": "/**\n * Extend the context with the properties of other objects.\n * A shallow merge is performed to avoid mutating the context.\n *\n * @param {Object} `objects` One or more objects to extend.\n * @return {Object}\n * @api public\n */",
    "meta": {
      "range": [417, 995],
      "filename": "object.js",
      "lineno": 18,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005723",
        "name": "helpers.extend",
        "type": "FunctionExpression",
        "paramnames": []
      },
      "vars": {
        "args": "helpers.extend~args",
        "opts": "helpers.extend~opts",
        "context": "helpers.extend~context",
        "i": "helpers.extend~i",
        "obj": "helpers.extend~obj",
        "keys": "helpers.extend~keys",
        "j": "helpers.extend~j",
        "key": "helpers.extend~key",
        "context[undefined]": "helpers.extend~context.undefined]"
      }
    },
    "description": "Extend the context with the properties of other objects.\nA shallow merge is performed to avoid mutating the context.",
    "params": [
      {
        "type": { "names": ["Object"] },
        "description": "One or more objects to extend.",
        "name": "`objects`"
      }
    ],
    "returns": [{ "type": { "names": ["Object"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "extend",
    "longname": "helpers.extend",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000434",
    "___s": true
  },
  "forIn": {
    "comment": "/**\n * Block helper that iterates over the properties of\n * an object, exposing each key and value on the context.\n *\n * @param {Object} `context`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [1224, 1526],
      "filename": "object.js",
      "lineno": 55,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005839",
        "name": "helpers.forIn",
        "type": "FunctionExpression",
        "paramnames": ["obj", "options"]
      },
      "vars": {
        "data": "helpers.forIn~data",
        "result": "helpers.forIn~result",
        "key": "helpers.forIn~key",
        "data.key": "helpers.forIn~data.key"
      }
    },
    "description": "Block helper that iterates over the properties of\nan object, exposing each key and value on the context.",
    "params": [
      { "type": { "names": ["Object"] }, "name": "`context`" },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "forIn",
    "longname": "helpers.forIn",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000445",
    "___s": true
  },
  "forOwn": {
    "comment": "/**\n * Block helper that iterates over the **own** properties of\n * an object, exposing each key and value on the context.\n *\n * @param {Object} `obj` The object to iterate over.\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [1787, 2135],
      "filename": "object.js",
      "lineno": 81,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005904",
        "name": "helpers.forOwn",
        "type": "FunctionExpression",
        "paramnames": ["obj", "options"]
      },
      "vars": {
        "data": "helpers.forOwn~data",
        "result": "helpers.forOwn~result",
        "key": "helpers.forOwn~key",
        "data.key": "helpers.forOwn~data.key"
      }
    },
    "description": "Block helper that iterates over the **own** properties of\nan object, exposing each key and value on the context.",
    "params": [
      {
        "type": { "names": ["Object"] },
        "description": "The object to iterate over.",
        "name": "`obj`"
      },
      { "type": { "names": ["Object"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "forOwn",
    "longname": "helpers.forOwn",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000452",
    "___s": true
  },
  "toPath": {
    "comment": "/**\n * Take arguments and, if they are string or number, convert them to a dot-delineated object property path.\n *\n * @param {String|Number} `prop` The property segments to assemble (can be multiple).\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [2379, 2628],
      "filename": "object.js",
      "lineno": 106,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100005976",
        "name": "helpers.toPath",
        "type": "FunctionExpression",
        "paramnames": []
      },
      "vars": { "prop": "helpers.toPath~prop", "i": "helpers.toPath~i" }
    },
    "description": "Take arguments and, if they are string or number, convert them to a dot-delineated object property path.",
    "params": [
      {
        "type": { "names": ["String", "Number"] },
        "description": "The property segments to assemble (can be multiple).",
        "name": "`prop`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "toPath",
    "longname": "helpers.toPath",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000459",
    "___s": true
  },
  "get": {
    "comment": "/**\n * Use property paths (`a.b.c`) to get a value or nested value from\n * the context. Works as a regular helper or block helper.\n *\n * @param {String} `prop` The property to get, optionally using dot notation for nested properties.\n * @param {Object} `context` The context object\n * @param {Object} `options` The handlebars options object, if used as a block helper.\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [3050, 3248],
      "filename": "object.js",
      "lineno": 128,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006029",
        "name": "helpers.get",
        "type": "FunctionExpression",
        "paramnames": ["prop", "context", "options"]
      },
      "vars": { "val": "helpers.get~val" }
    },
    "description": "Use property paths (`a.b.c`) to get a value or nested value from\nthe context. Works as a regular helper or block helper.",
    "params": [
      {
        "type": { "names": ["String"] },
        "description": "The property to get, optionally using dot notation for nested properties.",
        "name": "`prop`"
      },
      {
        "type": { "names": ["Object"] },
        "description": "The context object",
        "name": "`context`"
      },
      {
        "type": { "names": ["Object"] },
        "description": "The handlebars options object, if used as a block helper.",
        "name": "`options`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "get",
    "longname": "helpers.get",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000462",
    "___s": true
  },
  "getObject": {
    "comment": "/**\n * Use property paths (`a.b.c`) to get an object from\n * the context. Differs from the `get` helper in that this\n * helper will return the actual object, including the\n * given property key. Also, this helper does not work as a\n * block helper.\n *\n * @param {String} `prop` The property to get, optionally using dot notation for nested properties.\n * @param {Object} `context` The context object\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [3691, 3779],
      "filename": "object.js",
      "lineno": 149,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006070",
        "name": "helpers.getObject",
        "type": "FunctionExpression",
        "paramnames": ["prop", "context"]
      }
    },
    "description": "Use property paths (`a.b.c`) to get an object from\nthe context. Differs from the `get` helper in that this\nhelper will return the actual object, including the\ngiven property key. Also, this helper does not work as a\nblock helper.",
    "params": [
      {
        "type": { "names": ["String"] },
        "description": "The property to get, optionally using dot notation for nested properties.",
        "name": "`prop`"
      },
      {
        "type": { "names": ["Object"] },
        "description": "The context object",
        "name": "`context`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "getObject",
    "longname": "helpers.getObject",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000464",
    "___s": true
  },
  "hasOwn": {
    "comment": "/**\n * Return true if `key` is an own, enumerable property\n * of the given `context` object.\n *\n * ```handlebars\n * {{hasOwn context key}}\n * ```\n *\n * @param {String} `key`\n * @param {Object} `context` The context object.\n * @return {Boolean}\n * @api public\n */",
    "meta": {
      "range": [4046, 4125],
      "filename": "object.js",
      "lineno": 167,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006086",
        "name": "helpers.hasOwn",
        "type": "FunctionExpression",
        "paramnames": ["context", "key"]
      }
    },
    "description": "Return true if `key` is an own, enumerable property\nof the given `context` object.\n\n```handlebars\n{{hasOwn context key}}\n```",
    "params": [
      { "type": { "names": ["String"] }, "name": "`key`" },
      {
        "type": { "names": ["Object"] },
        "description": "The context object.",
        "name": "`context`"
      }
    ],
    "returns": [{ "type": { "names": ["Boolean"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "hasOwn",
    "longname": "helpers.hasOwn",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000465",
    "___s": true
  },
  "isObject": {
    "comment": "/**\n * Return true if `value` is an object.\n *\n * ```handlebars\n * {{isObject \"foo\"}}\n * //=> false\n * ```\n * @param {String} `value`\n * @return {Boolean}\n * @api public\n */",
    "meta": {
      "range": [4303, 4384],
      "filename": "object.js",
      "lineno": 183,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006102",
        "name": "helpers.isObject",
        "type": "FunctionExpression",
        "paramnames": ["value"]
      }
    },
    "description": "Return true if `value` is an object.\n\n```handlebars\n{{isObject \"foo\"}}\n//=> false\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`value`" }],
    "returns": [{ "type": { "names": ["Boolean"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "isObject",
    "longname": "helpers.isObject",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000466",
    "___s": true
  },
  "JSONparse": {
    "comment": "/**\n * Parses the given string using `JSON.parse`.\n *\n * ```handlebars\n * <!-- string: '{\"foo\": \"bar\"}' -->\n * {{JSONparse string}}\n * <!-- results in: { foo: 'bar' } -->\n * ```\n * @param {String} `string` The string to parse\n * @contributor github.com/keeganstreet\n * @block\n * @api public\n */",
    "meta": {
      "range": [4683, 4755],
      "filename": "object.js",
      "lineno": 201,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006118",
        "name": "helpers.JSONparse",
        "type": "FunctionExpression",
        "paramnames": ["str", "options"]
      }
    },
    "description": "Parses the given string using `JSON.parse`.\n\n```handlebars\n<!-- string: '{\"foo\": \"bar\"}' -->\n{{JSONparse string}}\n<!-- results in: { foo: 'bar' } -->\n```",
    "params": [
      {
        "type": { "names": ["String"] },
        "description": "The string to parse",
        "name": "`string`"
      }
    ],
    "tags": [
      {
        "originalTitle": "contributor",
        "title": "contributor",
        "text": "github.com/keeganstreet",
        "value": "github.com/keeganstreet"
      },
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "JSONparse",
    "longname": "helpers.JSONparse",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000467",
    "___s": true
  },
  "JSONstringify": {
    "comment": "/**\n * Stringify an object using `JSON.stringify`.\n *\n * ```handlebars\n * <!-- object: { foo: 'bar' } -->\n * {{JSONstringify object}}\n * <!-- results in: '{\"foo\": \"bar\"}' -->\n * ```\n * @param {Object} `obj` Object to stringify\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [5025, 5171],
      "filename": "object.js",
      "lineno": 218,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006133",
        "name": "helpers.JSONstringify",
        "type": "FunctionExpression",
        "paramnames": ["obj", "indent"]
      },
      "vars": { "indent": "helpers.JSONstringify~indent" }
    },
    "description": "Stringify an object using `JSON.stringify`.\n\n```handlebars\n<!-- object: { foo: 'bar' } -->\n{{JSONstringify object}}\n<!-- results in: '{\"foo\": \"bar\"}' -->\n```",
    "params": [
      {
        "type": { "names": ["Object"] },
        "description": "Object to stringify",
        "name": "`obj`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "JSONstringify",
    "longname": "helpers.JSONstringify",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000468",
    "___s": true
  },
  "merge": {
    "comment": "/**\n * Deeply merge the properties of the given `objects` with the\n * context object.\n *\n * @param {Object} `object` The target object. Pass an empty object to shallow clone.\n * @param {Object} `objects`\n * @return {Object}\n * @api public\n */",
    "meta": {
      "range": [5418, 5744],
      "filename": "object.js",
      "lineno": 235,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006162",
        "name": "helpers.merge",
        "type": "FunctionExpression",
        "paramnames": ["context"]
      },
      "vars": { "args": "helpers.merge~args", "opts": "helpers.merge~opts" }
    },
    "description": "Deeply merge the properties of the given `objects` with the\ncontext object.",
    "params": [
      {
        "type": { "names": ["Object"] },
        "description": "The target object. Pass an empty object to shallow clone.",
        "name": "`object`"
      },
      { "type": { "names": ["Object"] }, "name": "`objects`" }
    ],
    "returns": [{ "type": { "names": ["Object"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "merge",
    "longname": "helpers.merge",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000470",
    "___s": true
  },
  "parseJSON": {
    "comment": "/**\n * Alias for parseJSON. this will be\n * deprecated in a future release\n */",
    "meta": {
      "range": [5827, 5864],
      "filename": "object.js",
      "lineno": 254,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006221",
        "name": "helpers.parseJSON",
        "type": "MemberExpression",
        "value": "helpers.JSONparse",
        "paramnames": []
      }
    },
    "description": "Alias for parseJSON. this will be\ndeprecated in a future release",
    "name": "parseJSON",
    "longname": "helpers.parseJSON",
    "kind": "member",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000474",
    "___s": true
  },
  "pick": {
    "comment": "/**\n * Pick properties from the context object.\n *\n * @param {Array|String} `properties` One or more properties to pick.\n * @param {Object} `context`\n * @param {Object} `options` Handlebars options object.\n * @return {Object} Returns an object with the picked values. If used as a block helper, the values are passed as context to the inner block. If no values are found, the context is passed to the inverse block.\n * @block\n * @api public\n */",
    "meta": {
      "range": [6313, 6712],
      "filename": "object.js",
      "lineno": 267,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006229",
        "name": "helpers.pick",
        "type": "FunctionExpression",
        "paramnames": ["props", "context", "options"]
      },
      "vars": {
        "keys": "helpers.pick~keys",
        "len": "helpers.pick~len",
        "i": "helpers.pick~i",
        "result": "helpers.pick~result"
      }
    },
    "description": "Pick properties from the context object.",
    "params": [
      {
        "type": { "names": ["Array", "String"] },
        "description": "One or more properties to pick.",
        "name": "`properties`"
      },
      { "type": { "names": ["Object"] }, "name": "`context`" },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars options object.",
        "name": "`options`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["Object"] },
        "description": "Returns an object with the picked values. If used as a block helper, the values are passed as context to the inner block. If no values are found, the context is passed to the inverse block."
      }
    ],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "pick",
    "longname": "helpers.pick",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000475",
    "___s": true
  },
  "stringify": {
    "comment": "/**\n * Alias for JSONstringify. this will be\n * deprecated in a future release\n */",
    "meta": {
      "range": [6799, 6840],
      "filename": "object.js",
      "lineno": 290,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006312",
        "name": "helpers.stringify",
        "type": "MemberExpression",
        "value": "helpers.JSONstringify",
        "paramnames": []
      }
    },
    "description": "Alias for JSONstringify. this will be\ndeprecated in a future release",
    "name": "stringify",
    "longname": "helpers.stringify",
    "kind": "member",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000481",
    "___s": true
  },
  "absolute": {
    "comment": "/**\n * Get the directory path segment from the given `filepath`.\n *\n * ```handlebars\n * {{absolute \"docs/toc.md\"}}\n * <!-- results in: 'docs' -->\n * ```\n * @param {String} `ext`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [364, 629],
      "filename": "path.js",
      "lineno": 20,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006348",
        "name": "helpers.absolute",
        "type": "FunctionExpression",
        "paramnames": ["filepath", "options"]
      },
      "vars": {
        "options": "helpers.absolute~options",
        "context": "helpers.absolute~context",
        "ctx": "helpers.absolute~ctx",
        "cwd": "helpers.absolute~cwd"
      }
    },
    "description": "Get the directory path segment from the given `filepath`.\n\n```handlebars\n{{absolute \"docs/toc.md\"}}\n<!-- results in: 'docs' -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`ext`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "absolute",
    "longname": "helpers.absolute",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000486",
    "___s": true
  },
  "dirname": {
    "comment": "/**\n * Get the directory path segment from the given `filepath`.\n *\n * ```handlebars\n * {{dirname \"docs/toc.md\"}}\n * <!-- results in: 'docs' -->\n * ```\n * @param {String} `ext`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [849, 1050],
      "filename": "path.js",
      "lineno": 40,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006406",
        "name": "helpers.dirname",
        "type": "FunctionExpression",
        "paramnames": ["filepath", "options"]
      }
    },
    "description": "Get the directory path segment from the given `filepath`.\n\n```handlebars\n{{dirname \"docs/toc.md\"}}\n<!-- results in: 'docs' -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`ext`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "dirname",
    "longname": "helpers.dirname",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000492",
    "___s": true
  },
  "relative": {
    "comment": "/**\n * Get the relative filepath from `a` to `b`.\n *\n * ```handlebars\n * {{relative a b}}\n * ```\n * @param {String} `a`\n * @param {String} `b`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [1236, 1519],
      "filename": "path.js",
      "lineno": 59,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006437",
        "name": "helpers.relative",
        "type": "FunctionExpression",
        "paramnames": ["a", "b"]
      }
    },
    "description": "Get the relative filepath from `a` to `b`.\n\n```handlebars\n{{relative a b}}\n```",
    "params": [
      { "type": { "names": ["String"] }, "name": "`a`" },
      { "type": { "names": ["String"] }, "name": "`b`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "relative",
    "longname": "helpers.relative",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000493",
    "___s": true
  },
  "basename": {
    "comment": "/**\n * Get the file extension from the given `filepath`.\n *\n * ```handlebars\n * {{basename \"docs/toc.md\"}}\n * <!-- results in: 'toc.md' -->\n * ```\n * @param {String} `ext`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [1734, 1928],
      "filename": "path.js",
      "lineno": 81,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006485",
        "name": "helpers.basename",
        "type": "FunctionExpression",
        "paramnames": ["filepath"]
      }
    },
    "description": "Get the file extension from the given `filepath`.\n\n```handlebars\n{{basename \"docs/toc.md\"}}\n<!-- results in: 'toc.md' -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`ext`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "basename",
    "longname": "helpers.basename",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000494",
    "___s": true
  },
  "stem": {
    "comment": "/**\n * Get the \"stem\" from the given `filepath`.\n *\n * ```handlebars\n * {{stem \"docs/toc.md\"}}\n * <!-- results in: 'toc' -->\n * ```\n * @param {String} `filepath`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [2133, 2347],
      "filename": "path.js",
      "lineno": 100,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006515",
        "name": "helpers.stem",
        "type": "FunctionExpression",
        "paramnames": ["filepath"]
      }
    },
    "description": "Get the \"stem\" from the given `filepath`.\n\n```handlebars\n{{stem \"docs/toc.md\"}}\n<!-- results in: 'toc' -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`filepath`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "stem",
    "longname": "helpers.stem",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000495",
    "___s": true
  },
  "extname": {
    "comment": "/**\n * Get the file extension from the given `filepath`.\n *\n * ```handlebars\n * {{extname \"docs/toc.md\"}}\n * <!-- results in: '.md' -->\n * ```\n * @param {String} `filepath`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [2563, 2755],
      "filename": "path.js",
      "lineno": 119,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006550",
        "name": "helpers.extname",
        "type": "FunctionExpression",
        "paramnames": ["filepath"]
      }
    },
    "description": "Get the file extension from the given `filepath`.\n\n```handlebars\n{{extname \"docs/toc.md\"}}\n<!-- results in: '.md' -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`filepath`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "extname",
    "longname": "helpers.extname",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000496",
    "___s": true
  },
  "resolve": {
    "comment": "/**\n * Resolve an absolute path from the given `filepath`.\n *\n * ```handlebars\n * {{resolve \"docs/toc.md\"}}\n * <!-- results in: '/User/dev/docs/toc.md' -->\n * ```\n * @param {String} `filepath`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [2991, 3230],
      "filename": "path.js",
      "lineno": 138,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006580",
        "name": "helpers.resolve",
        "type": "FunctionExpression",
        "paramnames": ["filepath"]
      },
      "vars": {
        "args": "helpers.resolve~args",
        "opts": "helpers.resolve~opts",
        "cwd": "helpers.resolve~cwd"
      }
    },
    "description": "Resolve an absolute path from the given `filepath`.\n\n```handlebars\n{{resolve \"docs/toc.md\"}}\n<!-- results in: '/User/dev/docs/toc.md' -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`filepath`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "resolve",
    "longname": "helpers.resolve",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000497",
    "___s": true
  },
  "segments": {
    "comment": "/**\n * Get specific (joined) segments of a file path by passing a\n * range of array indices.\n *\n * ```handlebars\n * {{segments \"a/b/c/d\" \"2\" \"3\"}}\n * <!-- results in: 'c/d' -->\n *\n * {{segments \"a/b/c/d\" \"1\" \"3\"}}\n * <!-- results in: 'b/c/d' -->\n *\n * {{segments \"a/b/c/d\" \"1\" \"2\"}}\n * <!-- results in: 'b/c' -->\n * ```\n *\n * @param {String} `filepath` The file path to split into segments.\n * @return {String} Returns a single, joined file path.\n * @api public\n */",
    "meta": {
      "range": [3700, 3951],
      "filename": "path.js",
      "lineno": 166,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006640",
        "name": "helpers.segments",
        "type": "FunctionExpression",
        "paramnames": ["filepath", "a", "b"]
      },
      "vars": { "segments": "helpers.segments~segments" }
    },
    "description": "Get specific (joined) segments of a file path by passing a\nrange of array indices.\n\n```handlebars\n{{segments \"a/b/c/d\" \"2\" \"3\"}}\n<!-- results in: 'c/d' -->\n\n{{segments \"a/b/c/d\" \"1\" \"3\"}}\n<!-- results in: 'b/c/d' -->\n\n{{segments \"a/b/c/d\" \"1\" \"2\"}}\n<!-- results in: 'b/c' -->\n```",
    "params": [
      {
        "type": { "names": ["String"] },
        "description": "The file path to split into segments.",
        "name": "`filepath`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Returns a single, joined file path."
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "segments",
    "longname": "helpers.segments",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000501",
    "___s": true
  },
  "toRegex": {
    "comment": "/**\n * Convert the given string to a regular expression.\n *\n * ```handlebars\n * {{toRegex \"foo\"}}\n  * <!-- results in: /foo/ -->\n * ```\n * @param {String} `str`\n * @return {RegExp}\n * @api public\n */",
    "meta": {
      "range": [319, 457],
      "filename": "regex.js",
      "lineno": 19,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006707",
        "name": "helpers.toRegex",
        "type": "FunctionExpression",
        "paramnames": ["str", "locals", "options"]
      },
      "vars": { "opts": "helpers.toRegex~opts" }
    },
    "description": "Convert the given string to a regular expression.\n\n```handlebars\n{{toRegex \"foo\"}}\n<!-- results in: /foo/ -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`str`" }],
    "returns": [{ "type": { "names": ["RegExp"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "toRegex",
    "longname": "helpers.toRegex",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000506",
    "___s": true
  },
  "test": {
    "comment": "/**\n * Returns true if the given `str` matches the given regex. A regex can\n * be passed on the context, or using the [toRegex](#toregex) helper as a\n * subexpression.\n *\n * ```handlebars\n * {{test \"bar\" (toRegex \"foo\")}}\n  * <!-- results in: false -->\n * {{test \"foobar\" (toRegex \"foo\")}}\n  * <!-- results in: true -->\n * {{test \"foobar\" (toRegex \"^foo$\")}}\n  * <!-- results in: false -->\n * ```\n * @param {String} `str`\n * @return {RegExp}\n * @api public\n */",
    "meta": {
      "range": [922, 1143],
      "filename": "regex.js",
      "lineno": 42,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006734",
        "name": "helpers.test",
        "type": "FunctionExpression",
        "paramnames": ["str", "regex"]
      }
    },
    "description": "Returns true if the given `str` matches the given regex. A regex can\nbe passed on the context, or using the [toRegex](#toregex) helper as a\nsubexpression.\n\n```handlebars\n{{test \"bar\" (toRegex \"foo\")}}\n<!-- results in: false -->\n{{test \"foobar\" (toRegex \"foo\")}}\n<!-- results in: true -->\n{{test \"foobar\" (toRegex \"^foo$\")}}\n<!-- results in: false -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`str`" }],
    "returns": [{ "type": { "names": ["RegExp"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "test",
    "longname": "helpers.test",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000508",
    "___s": true
  },
  "append": {
    "comment": "/**\n * Append the specified `suffix` to the given string.\n *\n * ```handlebars\n * <!-- given that \"item.stem\" is \"foo\" -->\n * {{append item.stem \".html\"}}\n * <!-- results in:  'foo.html' -->\n * ```\n * @param {String} `str`\n * @param {String} `suffix`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [445, 593],
      "filename": "string.js",
      "lineno": 22,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006801",
        "name": "helpers.append",
        "type": "FunctionExpression",
        "paramnames": ["str", "suffix"]
      }
    },
    "description": "Append the specified `suffix` to the given string.\n\n```handlebars\n<!-- given that \"item.stem\" is \"foo\" -->\n{{append item.stem \".html\"}}\n<!-- results in:  'foo.html' -->\n```",
    "params": [
      { "type": { "names": ["String"] }, "name": "`str`" },
      { "type": { "names": ["String"] }, "name": "`suffix`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "append",
    "longname": "helpers.append",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000513",
    "___s": true
  },
  "camelcase": {
    "comment": "/**\n * camelCase the characters in the given `string`.\n *\n * ```handlebars\n * {{camelcase \"foo bar baz\"}};\n * <!-- results in:  'fooBarBaz' -->\n * ```\n * @param {String} `string` The string to camelcase.\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [840, 996],
      "filename": "string.js",
      "lineno": 41,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006827",
        "name": "helpers.camelcase",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      },
      "vars": { "": null }
    },
    "description": "camelCase the characters in the given `string`.\n\n```handlebars\n{{camelcase \"foo bar baz\"}};\n<!-- results in:  'fooBarBaz' -->\n```",
    "params": [
      {
        "type": { "names": ["String"] },
        "description": "The string to camelcase.",
        "name": "`string`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "camelcase",
    "longname": "helpers.camelcase",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000514",
    "___s": true
  },
  "capitalize": {
    "comment": "/**\n * Capitalize the first word in a sentence.\n *\n * ```handlebars\n * {{capitalize \"foo bar baz\"}}\n * <!-- results in:  \"Foo bar baz\" -->\n * ```\n * @param {String} `str`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [1210, 1339],
      "filename": "string.js",
      "lineno": 60,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006858",
        "name": "helpers.capitalize",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      }
    },
    "description": "Capitalize the first word in a sentence.\n\n```handlebars\n{{capitalize \"foo bar baz\"}}\n<!-- results in:  \"Foo bar baz\" -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`str`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "capitalize",
    "longname": "helpers.capitalize",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000515",
    "___s": true
  },
  "capitalizeAll": {
    "comment": "/**\n * Capitalize all words in a string.\n *\n * ```handlebars\n * {{capitalizeAll \"foo bar baz\"}}\n * <!-- results in:  \"Foo Bar Baz\" -->\n * ```\n * @param {String} `str`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [1549, 1757],
      "filename": "string.js",
      "lineno": 77,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006890",
        "name": "helpers.capitalizeAll",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      },
      "vars": { "": null }
    },
    "description": "Capitalize all words in a string.\n\n```handlebars\n{{capitalizeAll \"foo bar baz\"}}\n<!-- results in:  \"Foo Bar Baz\" -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`str`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "capitalizeAll",
    "longname": "helpers.capitalizeAll",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000516",
    "___s": true
  },
  "center": {
    "comment": "/**\n * Center a string using non-breaking spaces\n *\n * @param {String} `str`\n * @param {String} `spaces`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [1905, 2105],
      "filename": "string.js",
      "lineno": 95,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006929",
        "name": "helpers.center",
        "type": "FunctionExpression",
        "paramnames": ["str", "spaces"]
      },
      "vars": { "space": "helpers.center~space", "i": "helpers.center~i" }
    },
    "description": "Center a string using non-breaking spaces",
    "params": [
      { "type": { "names": ["String"] }, "name": "`str`" },
      { "type": { "names": ["String"] }, "name": "`spaces`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "center",
    "longname": "helpers.center",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000517",
    "___s": true
  },
  "chop": {
    "comment": "/**\n * Remove leading and trailing whitespace and non-word\n * characters from the given string.\n *\n * @param {String} `str`\n * @return {String}\n */",
    "meta": {
      "range": [623, 767],
      "filename": "index.js",
      "lineno": 31,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib/utils",
      "code": {
        "id": "astnode100008612",
        "name": "utils.chop",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      },
      "vars": { "re": "utils.chop~re" }
    },
    "description": "Remove leading and trailing whitespace and non-word\ncharacters from the given string.",
    "params": [{ "type": { "names": ["String"] }, "name": "`str`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "name": "chop",
    "longname": "utils.chop",
    "kind": "function",
    "memberof": "utils",
    "scope": "static",
    "___id": "T000002R000615",
    "___s": true
  },
  "dashcase": {
    "comment": "/**\n * dash-case the characters in `string`. Replaces non-word\n * characters and periods with hyphens.\n *\n * ```handlebars\n * {{dashcase \"a-b-c d_e\"}}\n * <!-- results in:  'a-b-c-d-e' -->\n * ```\n * @param {String} `string`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [2872, 3019],
      "filename": "string.js",
      "lineno": 143,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100006996",
        "name": "helpers.dashcase",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      },
      "vars": { "": null }
    },
    "description": "dash-case the characters in `string`. Replaces non-word\ncharacters and periods with hyphens.\n\n```handlebars\n{{dashcase \"a-b-c d_e\"}}\n<!-- results in:  'a-b-c-d-e' -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`string`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "dashcase",
    "longname": "helpers.dashcase",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000522",
    "___s": true
  },
  "dotcase": {
    "comment": "/**\n * dot.case the characters in `string`.\n *\n * ```handlebars\n * {{dotcase \"a-b-c d_e\"}}\n * <!-- results in:  'a.b.c.d.e' -->\n * ```\n * @param {String} `string`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [3225, 3371],
      "filename": "string.js",
      "lineno": 162,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007026",
        "name": "helpers.dotcase",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      },
      "vars": { "": null }
    },
    "description": "dot.case the characters in `string`.\n\n```handlebars\n{{dotcase \"a-b-c d_e\"}}\n<!-- results in:  'a.b.c.d.e' -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`string`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "dotcase",
    "longname": "helpers.dotcase",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000523",
    "___s": true
  },
  "lowercase": {
    "comment": "/**\n * Lowercase all characters in the given string.\n *\n * ```handlebars\n * {{lowercase \"Foo BAR baZ\"}}\n * <!-- results in:  'foo bar baz' -->\n * ```\n * @param {String} `str`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [5165, 5349],
      "filename": "string.js",
      "lineno": 256,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007146",
        "name": "helpers.lowercase",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      }
    },
    "description": "Lowercase all characters in the given string.\n\n```handlebars\n{{lowercase \"Foo BAR baZ\"}}\n<!-- results in:  'foo bar baz' -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`str`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "lowercase",
    "longname": "helpers.lowercase",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000528",
    "___s": true
  },
  "ellipsis": {
    "comment": "/**\n * Truncates a string to the specified `length`, and appends\n * it with an elipsis, `…`.\n *\n * ```handlebars\n * {{ellipsis (sanitize \"<span>foo bar baz</span>\"), 7}}\n * <!-- results in:  'foo bar…' -->\n * {{ellipsis \"foo bar baz\", 7}}\n * <!-- results in:  'foo bar…' -->\n * ```\n * @param {String} `str`\n * @param {Number} `length` The desired length of the returned string.\n * @return {String} The truncated string.\n * @api public\n */",
    "meta": {
      "range": [4170, 4347],
      "filename": "string.js",
      "lineno": 202,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007072",
        "name": "helpers.ellipsis",
        "type": "FunctionExpression",
        "paramnames": ["str", "limit"]
      }
    },
    "description": "Truncates a string to the specified `length`, and appends\nit with an elipsis, `…`.\n\n```handlebars\n{{ellipsis (sanitize \"<span>foo bar baz</span>\"), 7}}\n<!-- results in:  'foo bar…' -->\n{{ellipsis \"foo bar baz\", 7}}\n<!-- results in:  'foo bar…' -->\n```",
    "params": [
      { "type": { "names": ["String"] }, "name": "`str`" },
      {
        "type": { "names": ["Number"] },
        "description": "The desired length of the returned string.",
        "name": "`length`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "The truncated string."
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "ellipsis",
    "longname": "helpers.ellipsis",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000525",
    "___s": true
  },
  "hyphenate": {
    "comment": "/**\n * Replace spaces in a string with hyphens.\n *\n * ```handlebars\n * {{hyphenate \"foo bar baz qux\"}}\n * <!-- results in:  \"foo-bar-baz-qux\" -->\n * ```\n * @param {String} `str`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [4568, 4678],
      "filename": "string.js",
      "lineno": 223,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007106",
        "name": "helpers.hyphenate",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      }
    },
    "description": "Replace spaces in a string with hyphens.\n\n```handlebars\n{{hyphenate \"foo bar baz qux\"}}\n<!-- results in:  \"foo-bar-baz-qux\" -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`str`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "hyphenate",
    "longname": "helpers.hyphenate",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000526",
    "___s": true
  },
  "isString": {
    "comment": "/**\n * Return true if `value` is a string.\n *\n * ```handlebars\n * {{isString \"foo\"}}\n * <!-- results in:  'true' -->\n * ```\n * @param {String} `value`\n * @return {Boolean}\n * @api public\n */",
    "meta": {
      "range": [4873, 4947],
      "filename": "string.js",
      "lineno": 240,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007133",
        "name": "helpers.isString",
        "type": "FunctionExpression",
        "paramnames": ["value"]
      }
    },
    "description": "Return true if `value` is a string.\n\n```handlebars\n{{isString \"foo\"}}\n<!-- results in:  'true' -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`value`" }],
    "returns": [{ "type": { "names": ["Boolean"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "isString",
    "longname": "helpers.isString",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000527",
    "___s": true
  },
  "occurrences": {
    "comment": "/**\n * Return the number of occurrences of `substring` within the\n * given `string`.\n *\n * ```handlebars\n * {{occurrences \"foo bar foo bar baz\" \"foo\"}}\n * <!-- results in:  2 -->\n * ```\n * @param {String} `str`\n * @param {String} `substring`\n * @return {Number} Number of occurrences\n * @api public\n */",
    "meta": {
      "range": [5656, 5897],
      "filename": "string.js",
      "lineno": 278,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007188",
        "name": "helpers.occurrences",
        "type": "FunctionExpression",
        "paramnames": ["str", "substring"]
      },
      "vars": {
        "len": "helpers.occurrences~len",
        "pos": "helpers.occurrences~pos",
        "n": "helpers.occurrences~n"
      }
    },
    "description": "Return the number of occurrences of `substring` within the\ngiven `string`.\n\n```handlebars\n{{occurrences \"foo bar foo bar baz\" \"foo\"}}\n<!-- results in:  2 -->\n```",
    "params": [
      { "type": { "names": ["String"] }, "name": "`str`" },
      { "type": { "names": ["String"] }, "name": "`substring`" }
    ],
    "returns": [
      {
        "type": { "names": ["Number"] },
        "description": "Number of occurrences"
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "occurrences",
    "longname": "helpers.occurrences",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000529",
    "___s": true
  },
  "pascalcase": {
    "comment": "/**\n * PascalCase the characters in `string`.\n *\n * ```handlebars\n * {{pascalcase \"foo bar baz\"}}\n * <!-- results in:  'FooBarBaz' -->\n * ```\n * @param {String} `string`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [6110, 6319],
      "filename": "string.js",
      "lineno": 303,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007242",
        "name": "helpers.pascalcase",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      },
      "vars": { "str": "helpers.pascalcase~str", "": null }
    },
    "description": "PascalCase the characters in `string`.\n\n```handlebars\n{{pascalcase \"foo bar baz\"}}\n<!-- results in:  'FooBarBaz' -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`string`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "pascalcase",
    "longname": "helpers.pascalcase",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000535",
    "___s": true
  },
  "pathcase": {
    "comment": "/**\n * path/case the characters in `string`.\n *\n * ```handlebars\n * {{pathcase \"a-b-c d_e\"}}\n * <!-- results in:  'a/b/c/d/e' -->\n * ```\n * @param {String} `string`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [6527, 6674],
      "filename": "string.js",
      "lineno": 323,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007290",
        "name": "helpers.pathcase",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      },
      "vars": { "": null }
    },
    "description": "path/case the characters in `string`.\n\n```handlebars\n{{pathcase \"a-b-c d_e\"}}\n<!-- results in:  'a/b/c/d/e' -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`string`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "pathcase",
    "longname": "helpers.pathcase",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000537",
    "___s": true
  },
  "plusify": {
    "comment": "/**\n * Replace spaces in the given string with pluses.\n *\n * ```handlebars\n * {{plusify \"foo bar baz\"}}\n * <!-- results in:  'foo+bar+baz' -->\n * ```\n * @param {String} `str` The input string\n * @return {String} Input string with spaces replaced by plus signs\n * @source Stephen Way <https://github.com/stephenway>\n * @api public\n */",
    "meta": {
      "range": [7012, 7159],
      "filename": "string.js",
      "lineno": 343,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007320",
        "name": "helpers.plusify",
        "type": "FunctionExpression",
        "paramnames": ["str", "ch"]
      },
      "vars": { "ch": "helpers.plusify~ch" }
    },
    "description": "Replace spaces in the given string with pluses.\n\n```handlebars\n{{plusify \"foo bar baz\"}}\n<!-- results in:  'foo+bar+baz' -->\n```",
    "params": [
      {
        "type": { "names": ["String"] },
        "description": "The input string",
        "name": "`str`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Input string with spaces replaced by plus signs"
      }
    ],
    "tags": [
      {
        "originalTitle": "source",
        "title": "source",
        "text": "Stephen Way <https://github.com/stephenway>",
        "value": "Stephen Way <https://github.com/stephenway>"
      },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "plusify",
    "longname": "helpers.plusify",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000538",
    "___s": true
  },
  "prepend": {
    "comment": "/**\n * Prepends the given `string` with the specified `prefix`.\n *\n * ```handlebars\n * <!-- given that \"val\" is \"bar\" -->\n * {{prepend val \"foo-\"}}\n * <!-- results in:  'foo-bar' -->\n * ```\n * @param {String} `str`\n * @param {String} `prefix`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [7445, 7583],
      "filename": "string.js",
      "lineno": 363,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007359",
        "name": "helpers.prepend",
        "type": "FunctionExpression",
        "paramnames": ["str", "prefix"]
      }
    },
    "description": "Prepends the given `string` with the specified `prefix`.\n\n```handlebars\n<!-- given that \"val\" is \"bar\" -->\n{{prepend val \"foo-\"}}\n<!-- results in:  'foo-bar' -->\n```",
    "params": [
      { "type": { "names": ["String"] }, "name": "`str`" },
      { "type": { "names": ["String"] }, "name": "`prefix`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "prepend",
    "longname": "helpers.prepend",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000540",
    "___s": true
  },
  "raw": {
    "comment": "/**\n * Render a block without processing mustache templates inside the block.\n *\n * ```handlebars\n * {{{{#raw}}}}\n * {{foo}}\n * {{{{/raw}}}}\n * <!-- results in:  '{{foo}}' -->\n * ```\n *\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [7851, 8196],
      "filename": "string.js",
      "lineno": 385,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007383",
        "name": "helpers.raw",
        "type": "FunctionExpression",
        "paramnames": ["options"]
      },
      "vars": {
        "str": "helpers.raw~str",
        "opts": "helpers.raw~opts",
        "idx": "helpers.raw~idx"
      }
    },
    "description": "Render a block without processing mustache templates inside the block.\n\n```handlebars\n{{{{#raw}}}}\n{{foo}}\n{{{{/raw}}}}\n<!-- results in:  '{{foo}}' -->\n```",
    "params": [{ "type": { "names": ["Object"] }, "name": "`options`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "raw",
    "longname": "helpers.raw",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000541",
    "___s": true
  },
  "remove": {
    "comment": "/**\n * Remove all occurrences of `substring` from the given `str`.\n *\n * ```handlebars\n * {{remove \"a b a b a b\" \"a \"}}\n * <!-- results in:  'b b b' -->\n * ```\n * @param {String} `str`\n * @param {String} `substring`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [8455, 8602],
      "filename": "string.js",
      "lineno": 413,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007463",
        "name": "helpers.remove",
        "type": "FunctionExpression",
        "paramnames": ["str", "ch"]
      }
    },
    "description": "Remove all occurrences of `substring` from the given `str`.\n\n```handlebars\n{{remove \"a b a b a b\" \"a \"}}\n<!-- results in:  'b b b' -->\n```",
    "params": [
      { "type": { "names": ["String"] }, "name": "`str`" },
      { "type": { "names": ["String"] }, "name": "`substring`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "remove",
    "longname": "helpers.remove",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000548",
    "___s": true
  },
  "removeFirst": {
    "comment": "/**\n * Remove the first occurrence of `substring` from the given `str`.\n *\n * ```handlebars\n * {{remove \"a b a b a b\" \"a\"}}\n * <!-- results in:  ' b a b a b' -->\n * ```\n * @param {String} `str`\n * @param {String} `substring`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [8870, 9019],
      "filename": "string.js",
      "lineno": 432,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007500",
        "name": "helpers.removeFirst",
        "type": "FunctionExpression",
        "paramnames": ["str", "ch"]
      }
    },
    "description": "Remove the first occurrence of `substring` from the given `str`.\n\n```handlebars\n{{remove \"a b a b a b\" \"a\"}}\n<!-- results in:  ' b a b a b' -->\n```",
    "params": [
      { "type": { "names": ["String"] }, "name": "`str`" },
      { "type": { "names": ["String"] }, "name": "`substring`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "removeFirst",
    "longname": "helpers.removeFirst",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000549",
    "___s": true
  },
  "replace": {
    "comment": "/**\n * Replace all occurrences of substring `a` with substring `b`.\n *\n * ```handlebars\n * {{replace \"a b a b a b\" \"a\" \"z\"}}\n * <!-- results in:  'z b z b z b' -->\n * ```\n * @param {String} `str`\n * @param {String} `a`\n * @param {String} `b`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [9304, 9484],
      "filename": "string.js",
      "lineno": 452,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007534",
        "name": "helpers.replace",
        "type": "FunctionExpression",
        "paramnames": ["str", "a", "b"]
      },
      "vars": { "b": "helpers.replace~b" }
    },
    "description": "Replace all occurrences of substring `a` with substring `b`.\n\n```handlebars\n{{replace \"a b a b a b\" \"a\" \"z\"}}\n<!-- results in:  'z b z b z b' -->\n```",
    "params": [
      { "type": { "names": ["String"] }, "name": "`str`" },
      { "type": { "names": ["String"] }, "name": "`a`" },
      { "type": { "names": ["String"] }, "name": "`b`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "replace",
    "longname": "helpers.replace",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000550",
    "___s": true
  },
  "replaceFirst": {
    "comment": "/**\n * Replace the first occurrence of substring `a` with substring `b`.\n *\n * ```handlebars\n * {{replace \"a b a b a b\" \"a\" \"z\"}}\n * <!-- results in:  'z b a b a b' -->\n * ```\n * @param {String} `str`\n * @param {String} `a`\n * @param {String} `b`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [9774, 9956],
      "filename": "string.js",
      "lineno": 473,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007583",
        "name": "helpers.replaceFirst",
        "type": "FunctionExpression",
        "paramnames": ["str", "a", "b"]
      },
      "vars": { "b": "helpers.replaceFirst~b" }
    },
    "description": "Replace the first occurrence of substring `a` with substring `b`.\n\n```handlebars\n{{replace \"a b a b a b\" \"a\" \"z\"}}\n<!-- results in:  'z b a b a b' -->\n```",
    "params": [
      { "type": { "names": ["String"] }, "name": "`str`" },
      { "type": { "names": ["String"] }, "name": "`a`" },
      { "type": { "names": ["String"] }, "name": "`b`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "replaceFirst",
    "longname": "helpers.replaceFirst",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000552",
    "___s": true
  },
  "sentence": {
    "comment": "/**\n * Sentence case the given string\n *\n * ```handlebars\n * {{sentence \"hello world. goodbye world.\"}}\n * <!-- results in:  'Hello world. Goodbye world.' -->\n * ```\n * @param {String} `str`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [10482, 10701],
      "filename": "string.js",
      "lineno": 509,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007659",
        "name": "helpers.sentence",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      },
      "vars": { "": null }
    },
    "description": "Sentence case the given string\n\n```handlebars\n{{sentence \"hello world. goodbye world.\"}}\n<!-- results in:  'Hello world. Goodbye world.' -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`str`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "sentence",
    "longname": "helpers.sentence",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000555",
    "___s": true
  },
  "snakecase": {
    "comment": "/**\n * snake_case the characters in the given `string`.\n *\n * ```handlebars\n * {{snakecase \"a-b-c d_e\"}}\n * <!-- results in:  'a_b_c_d_e' -->\n * ```\n * @param {String} `string`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [10921, 11069],
      "filename": "string.js",
      "lineno": 528,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007703",
        "name": "helpers.snakecase",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      },
      "vars": { "": null }
    },
    "description": "snake_case the characters in the given `string`.\n\n```handlebars\n{{snakecase \"a-b-c d_e\"}}\n<!-- results in:  'a_b_c_d_e' -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`string`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "snakecase",
    "longname": "helpers.snakecase",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000556",
    "___s": true
  },
  "split": {
    "comment": "/**\n * Split `string` by the given `character`.\n *\n * ```handlebars\n * {{split \"a,b,c\" \",\"}}\n * <!-- results in:  ['a', 'b', 'c'] -->\n * ```\n * @param {String} `string` The string to split.\n * @return {String} `character` Default is an empty string.\n * @api public\n */",
    "meta": {
      "range": [11342, 11477],
      "filename": "string.js",
      "lineno": 547,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007733",
        "name": "helpers.split",
        "type": "FunctionExpression",
        "paramnames": ["str", "ch"]
      },
      "vars": { "ch": "helpers.split~ch" }
    },
    "description": "Split `string` by the given `character`.\n\n```handlebars\n{{split \"a,b,c\" \",\"}}\n<!-- results in:  ['a', 'b', 'c'] -->\n```",
    "params": [
      {
        "type": { "names": ["String"] },
        "description": "The string to split.",
        "name": "`string`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "`character` Default is an empty string."
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "split",
    "longname": "helpers.split",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000557",
    "___s": true
  },
  "startsWith": {
    "comment": "/**\n * Tests whether a string begins with the given prefix.\n *\n * ```handlebars\n * {{#startsWith \"Goodbye\" \"Hello, world!\"}}\n *   Whoops\n * {{else}}\n *   Bro, do you even hello world?\n * {{/startsWith}}\n * ```\n * @contributor Dan Fox <http://github.com/iamdanfox>\n * @param {String} `prefix`\n * @param {String} `testString`\n * @param {String} `options`\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [11883, 12189],
      "filename": "string.js",
      "lineno": 572,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007768",
        "name": "helpers.startsWith",
        "type": "FunctionExpression",
        "paramnames": ["prefix", "str", "options"]
      },
      "vars": {
        "args": "helpers.startsWith~args",
        "options": "helpers.startsWith~options"
      }
    },
    "description": "Tests whether a string begins with the given prefix.\n\n```handlebars\n{{#startsWith \"Goodbye\" \"Hello, world!\"}}\n  Whoops\n{{else}}\n  Bro, do you even hello world?\n{{/startsWith}}\n```",
    "tags": [
      {
        "originalTitle": "contributor",
        "title": "contributor",
        "text": "Dan Fox <http://github.com/iamdanfox>",
        "value": "Dan Fox <http://github.com/iamdanfox>"
      },
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "params": [
      { "type": { "names": ["String"] }, "name": "`prefix`" },
      { "type": { "names": ["String"] }, "name": "`testString`" },
      { "type": { "names": ["String"] }, "name": "`options`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "name": "startsWith",
    "longname": "helpers.startsWith",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000559",
    "___s": true
  },
  "titleize": {
    "comment": "/**\n * Title case the given string.\n *\n * ```handlebars\n * {{titleize \"this is title case\"}}\n * <!-- results in:  'This Is Title Case' -->\n * ```\n * @param {String} `str`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [12403, 12720],
      "filename": "string.js",
      "lineno": 596,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007832",
        "name": "helpers.titleize",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      },
      "vars": {
        "title": "helpers.titleize~title",
        "words": "helpers.titleize~words",
        "len": "helpers.titleize~len",
        "res": "helpers.titleize~res",
        "i": "helpers.titleize~i",
        "word": "helpers.titleize~word"
      }
    },
    "description": "Title case the given string.\n\n```handlebars\n{{titleize \"this is title case\"}}\n<!-- results in:  'This Is Title Case' -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`str`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "titleize",
    "longname": "helpers.titleize",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000562",
    "___s": true
  },
  "trim": {
    "comment": "/**\n * Removes extraneous whitespace from the beginning and end\n * of a string.\n *\n * ```handlebars\n * {{trim \" ABC \"}}\n * <!-- results in:  'ABC' -->\n * ```\n * @param {String} `string` The string to trim.\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [12969, 13053],
      "filename": "string.js",
      "lineno": 623,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007907",
        "name": "helpers.trim",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      }
    },
    "description": "Removes extraneous whitespace from the beginning and end\nof a string.\n\n```handlebars\n{{trim \" ABC \"}}\n<!-- results in:  'ABC' -->\n```",
    "params": [
      {
        "type": { "names": ["String"] },
        "description": "The string to trim.",
        "name": "`string`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "trim",
    "longname": "helpers.trim",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000569",
    "___s": true
  },
  "trimLeft": {
    "comment": "/**\n * Removes extraneous whitespace from the beginning of a string.\n *\n * ```handlebars\n * {{trim \" ABC \"}}\n * <!-- results in:  'ABC ' -->\n * ```\n * @param {String} `string` The string to trim.\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [13292, 13396],
      "filename": "string.js",
      "lineno": 639,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007926",
        "name": "helpers.trimLeft",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      }
    },
    "description": "Removes extraneous whitespace from the beginning of a string.\n\n```handlebars\n{{trim \" ABC \"}}\n<!-- results in:  'ABC ' -->\n```",
    "params": [
      {
        "type": { "names": ["String"] },
        "description": "The string to trim.",
        "name": "`string`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "trimLeft",
    "longname": "helpers.trimLeft",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000570",
    "___s": true
  },
  "trimRight": {
    "comment": "/**\n * Removes extraneous whitespace from the end of a string.\n *\n * ```handlebars\n * {{trimRight \" ABC \"}}\n * <!-- results in:  ' ABC' -->\n * ```\n * @param {String} `string` The string to trim.\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [13634, 13739],
      "filename": "string.js",
      "lineno": 657,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007948",
        "name": "helpers.trimRight",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      }
    },
    "description": "Removes extraneous whitespace from the end of a string.\n\n```handlebars\n{{trimRight \" ABC \"}}\n<!-- results in:  ' ABC' -->\n```",
    "params": [
      {
        "type": { "names": ["String"] },
        "description": "The string to trim.",
        "name": "`string`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "trimRight",
    "longname": "helpers.trimRight",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000571",
    "___s": true
  },
  "truncate": {
    "comment": "/**\n * Truncate a string to the specified `length`. Also see [ellipsis](#ellipsis).\n *\n * ```handlebars\n * truncate(\"foo bar baz\", 7);\n * <!-- results in:  'foo bar' -->\n * truncate(sanitize(\"<span>foo bar baz</span>\", 7));\n * <!-- results in:  'foo bar' -->\n * ```\n * @param {String} `str`\n * @param {Number} `limit` The desired length of the returned string.\n * @param {String} `suffix` Optionally supply a string to use as a suffix to\n * denote when the string has been truncated. Otherwise an ellipsis (`…`) will be used.\n * @return {String} The truncated string.\n * @api public\n */",
    "meta": {
      "range": [14330, 14587],
      "filename": "string.js",
      "lineno": 680,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100007970",
        "name": "helpers.truncate",
        "type": "FunctionExpression",
        "paramnames": ["str", "limit", "suffix"]
      },
      "vars": { "suffix": "helpers.truncate~suffix" }
    },
    "description": "Truncate a string to the specified `length`. Also see [ellipsis](#ellipsis).\n\n```handlebars\ntruncate(\"foo bar baz\", 7);\n<!-- results in:  'foo bar' -->\ntruncate(sanitize(\"<span>foo bar baz</span>\", 7));\n<!-- results in:  'foo bar' -->\n```",
    "params": [
      { "type": { "names": ["String"] }, "name": "`str`" },
      {
        "type": { "names": ["Number"] },
        "description": "The desired length of the returned string.",
        "name": "`limit`"
      },
      {
        "type": { "names": ["String"] },
        "description": "Optionally supply a string to use as a suffix to\ndenote when the string has been truncated. Otherwise an ellipsis (`…`) will be used.",
        "name": "`suffix`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "The truncated string."
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "truncate",
    "longname": "helpers.truncate",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000572",
    "___s": true
  },
  "truncateWords": {
    "comment": "/**\n * Truncate a string to have the specified number of words.\n * Also see [truncate](#truncate).\n *\n * ```handlebars\n * truncateWords(\"foo bar baz\", 1);\n * <!-- results in:  'foo…' -->\n * truncateWords(\"foo bar baz\", 2);\n * <!-- results in:  'foo bar…' -->\n * truncateWords(\"foo bar baz\", 3);\n * <!-- results in:  'foo bar baz' -->\n * ```\n * @param {String} `str`\n * @param {Number} `limit` The desired length of the returned string.\n * @param {String} `suffix` Optionally supply a string to use as a suffix to\n * denote when the string has been truncated.\n * @return {String} The truncated string.\n * @api public\n */",
    "meta": {
      "range": [15211, 15573],
      "filename": "string.js",
      "lineno": 712,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100008019",
        "name": "helpers.truncateWords",
        "type": "FunctionExpression",
        "paramnames": ["str", "count", "suffix"]
      },
      "vars": {
        "suffix": "helpers.truncateWords~suffix",
        "num": "helpers.truncateWords~num",
        "arr": "helpers.truncateWords~arr",
        "val": "helpers.truncateWords~val"
      }
    },
    "description": "Truncate a string to have the specified number of words.\nAlso see [truncate](#truncate).\n\n```handlebars\ntruncateWords(\"foo bar baz\", 1);\n<!-- results in:  'foo…' -->\ntruncateWords(\"foo bar baz\", 2);\n<!-- results in:  'foo bar…' -->\ntruncateWords(\"foo bar baz\", 3);\n<!-- results in:  'foo bar baz' -->\n```",
    "params": [
      { "type": { "names": ["String"] }, "name": "`str`" },
      {
        "type": { "names": ["Number"] },
        "description": "The desired length of the returned string.",
        "name": "`limit`"
      },
      {
        "type": { "names": ["String"] },
        "description": "Optionally supply a string to use as a suffix to\ndenote when the string has been truncated.",
        "name": "`suffix`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "The truncated string."
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "truncateWords",
    "longname": "helpers.truncateWords",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000574",
    "___s": true
  },
  "uppercase": {
    "comment": "/**\n * Uppercase all of the characters in the given string. If used as a\n * block helper it will uppercase the entire block. This helper\n * does not support inverse blocks.\n *\n * ```handlebars\n * {{uppercase \"aBcDeF\"}}\n * <!-- results in:  'ABCDEF' -->\n * ```\n * @related capitalize capitalizeAll\n * @param {String} `str` The string to uppercase\n * @param {Object} `options` Handlebars options object\n * @return {String}\n * @block\n * @api public\n */",
    "meta": {
      "range": [16379, 16563],
      "filename": "string.js",
      "lineno": 763,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100008111",
        "name": "helpers.uppercase",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      }
    },
    "description": "Uppercase all of the characters in the given string. If used as a\nblock helper it will uppercase the entire block. This helper\ndoes not support inverse blocks.\n\n```handlebars\n{{uppercase \"aBcDeF\"}}\n<!-- results in:  'ABCDEF' -->\n```",
    "tags": [
      {
        "originalTitle": "related",
        "title": "related",
        "text": "capitalize capitalizeAll",
        "value": "capitalize capitalizeAll"
      },
      { "originalTitle": "block", "title": "block", "text": "" },
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "params": [
      {
        "type": { "names": ["String"] },
        "description": "The string to uppercase",
        "name": "`str`"
      },
      {
        "type": { "names": ["Object"] },
        "description": "Handlebars options object",
        "name": "`options`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "name": "uppercase",
    "longname": "helpers.uppercase",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000581",
    "___s": true
  },
  "encodeURI": {
    "comment": "/**\n * Encodes a Uniform Resource Identifier (URI) component\n * by replacing each instance of certain characters by\n * one, two, three, or four escape sequences representing\n * the UTF-8 encoding of the character.\n *\n * @param {String} `str` The un-encoded string\n * @return {String} The endcoded string\n * @api public\n */",
    "meta": {
      "range": [478, 583],
      "filename": "url.js",
      "lineno": 19,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100008181",
        "name": "helpers.encodeURI",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      }
    },
    "description": "Encodes a Uniform Resource Identifier (URI) component\nby replacing each instance of certain characters by\none, two, three, or four escape sequences representing\nthe UTF-8 encoding of the character.",
    "params": [
      {
        "type": { "names": ["String"] },
        "description": "The un-encoded string",
        "name": "`str`"
      }
    ],
    "returns": [
      { "type": { "names": ["String"] }, "description": "The endcoded string" }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "encodeURI",
    "longname": "helpers.encodeURI",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000586",
    "___s": true
  },
  "escape": {
    "comment": "/**\n * Escape the given string by replacing characters with escape sequences.\n * Useful for allowing the string to be used in a URL, etc.\n *\n * @param {String} `str`\n * @return {String} Escaped string.\n * @api public\n */",
    "meta": {
      "range": [808, 910],
      "filename": "url.js",
      "lineno": 34,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100008200",
        "name": "helpers.escape",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      }
    },
    "description": "Escape the given string by replacing characters with escape sequences.\nUseful for allowing the string to be used in a URL, etc.",
    "params": [{ "type": { "names": ["String"] }, "name": "`str`" }],
    "returns": [
      { "type": { "names": ["String"] }, "description": "Escaped string." }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "escape",
    "longname": "helpers.escape",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000587",
    "___s": true
  },
  "decodeURI": {
    "comment": "/**\n * Decode a Uniform Resource Identifier (URI) component.\n *\n * @param {String} `str`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [1042, 1147],
      "filename": "url.js",
      "lineno": 48,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100008221",
        "name": "helpers.decodeURI",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      }
    },
    "description": "Decode a Uniform Resource Identifier (URI) component.",
    "params": [{ "type": { "names": ["String"] }, "name": "`str`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "decodeURI",
    "longname": "helpers.decodeURI",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000588",
    "___s": true
  },
  "url_encode": {
    "comment": "/**\n * Alias for [encodeURI](#encodeuri).\n * @api public\n */",
    "meta": {
      "range": [1212, 1298],
      "filename": "url.js",
      "lineno": 59,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100008240",
        "name": "helpers.url_encode",
        "type": "FunctionExpression",
        "paramnames": []
      }
    },
    "description": "Alias for [encodeURI](#encodeuri).",
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "url_encode",
    "longname": "helpers.url_encode",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000589",
    "___s": true
  },
  "url_decode": {
    "comment": "/**\n * Alias for [decodeURI](#decodeuri).\n * @api public\n */",
    "meta": {
      "range": [1363, 1452],
      "filename": "url.js",
      "lineno": 68,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100008256",
        "name": "helpers.url_decode",
        "type": "FunctionExpression",
        "paramnames": ["val"]
      }
    },
    "description": "Alias for [decodeURI](#decodeuri).",
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "url_decode",
    "longname": "helpers.url_decode",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000590",
    "___s": true
  },
  "urlResolve": {
    "comment": "/**\n * Take a base URL, and a href URL, and resolve them as a\n * browser would for an anchor tag.\n *\n * @param {String} `base`\n * @param {String} `href`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [1648, 1727],
      "filename": "url.js",
      "lineno": 82,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100008273",
        "name": "helpers.urlResolve",
        "type": "FunctionExpression",
        "paramnames": ["base", "href"]
      }
    },
    "description": "Take a base URL, and a href URL, and resolve them as a\nbrowser would for an anchor tag.",
    "params": [
      { "type": { "names": ["String"] }, "name": "`base`" },
      { "type": { "names": ["String"] }, "name": "`href`" }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "urlResolve",
    "longname": "helpers.urlResolve",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000591",
    "___s": true
  },
  "urlParse": {
    "comment": "/**\n * Parses a `url` string into an object.\n *\n * @param {String} `str` URL string\n * @return {String} Returns stringified JSON\n * @api public\n */",
    "meta": {
      "range": [1879, 1940],
      "filename": "url.js",
      "lineno": 94,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100008289",
        "name": "helpers.urlParse",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      }
    },
    "description": "Parses a `url` string into an object.",
    "params": [
      {
        "type": { "names": ["String"] },
        "description": "URL string",
        "name": "`str`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Returns stringified JSON"
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "urlParse",
    "longname": "helpers.urlParse",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000592",
    "___s": true
  },
  "stripQuerystring": {
    "comment": "/**\n * Strip the query string from the given `url`.\n *\n * @param {String} `url`\n * @return {String} the url without the queryString\n * @api public\n */",
    "meta": {
      "range": [2095, 2201],
      "filename": "url.js",
      "lineno": 106,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100008303",
        "name": "helpers.stripQuerystring",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      }
    },
    "description": "Strip the query string from the given `url`.",
    "params": [{ "type": { "names": ["String"] }, "name": "`url`" }],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "the url without the queryString"
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "stripQuerystring",
    "longname": "helpers.stripQuerystring",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000593",
    "___s": true
  },
  "stripProtocol": {
    "comment": "/**\n * Strip protocol from a `url`. Useful for displaying media that\n * may have an 'http' protocol on secure connections.\n *\n * ```handlebars\n * <!-- url = 'http://foo.bar' -->\n * {{stripProtocol url}}\n * <!-- results in: '//foo.bar' -->\n * ```\n * @param {String} `str`\n * @return {String} the url with http protocol stripped\n * @api public\n */",
    "meta": {
      "range": [2551, 2711],
      "filename": "url.js",
      "lineno": 126,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode100008326",
        "name": "helpers.stripProtocol",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      },
      "vars": {
        "parsed": "helpers.stripProtocol~parsed",
        "parsed.protocol": "helpers.stripProtocol~parsed.protocol"
      }
    },
    "description": "Strip protocol from a `url`. Useful for displaying media that\nmay have an 'http' protocol on secure connections.\n\n```handlebars\n<!-- url = 'http://foo.bar' -->\n{{stripProtocol url}}\n<!-- results in: '//foo.bar' -->\n```",
    "params": [{ "type": { "names": ["String"] }, "name": "`str`" }],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "the url with http protocol stripped"
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "stripProtocol",
    "longname": "helpers.stripProtocol",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R000594",
    "___s": true
  },
  "html": {
    "comment": "/**\n * Expose `utils`\n */",
    "meta": {
      "range": [125, 146],
      "filename": "html.js",
      "lineno": 10,
      "columnno": 4,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib/utils",
      "code": {
        "id": "astnode100008376",
        "name": "html",
        "type": "MemberExpression",
        "value": "module.exports"
      }
    },
    "description": "Expose `utils`",
    "name": "html",
    "longname": "html",
    "kind": "member",
    "scope": "global",
    "params": [],
    "___id": "T000002R000599",
    "___s": true
  },
  "condense": {
    "comment": "/**\n * Remove extra newlines from HTML, respect indentation.\n *\n * @param {String} html\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [277, 374],
      "filename": "html.js",
      "lineno": 20,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib/utils",
      "code": {
        "id": "astnode100008382",
        "name": "html.condense",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      }
    },
    "description": "Remove extra newlines from HTML, respect indentation.",
    "params": [{ "type": { "names": ["String"] }, "name": "html" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "condense",
    "longname": "html.condense",
    "kind": "function",
    "memberof": "html",
    "scope": "static",
    "___id": "T000002R000600",
    "___s": true
  },
  "padcomments": {
    "comment": "/**\n * Add a single newline above code comments in HTML\n *\n * @param {String} `html`\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [502, 582],
      "filename": "html.js",
      "lineno": 32,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib/utils",
      "code": {
        "id": "astnode100008397",
        "name": "html.padcomments",
        "type": "FunctionExpression",
        "paramnames": ["str"]
      }
    },
    "description": "Add a single newline above code comments in HTML",
    "params": [{ "type": { "names": ["String"] }, "name": "`html`" }],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "padcomments",
    "longname": "html.padcomments",
    "kind": "function",
    "memberof": "html",
    "scope": "static",
    "___id": "T000002R000601",
    "___s": true
  },
  "parseAttributes": {
    "comment": "/**\n * Parse HTML tag attributes from the `options.hash`.\n *\n * @param {Object} `hash` Helper options hash, e.g. `{foo: 'bar'}`\n * @return {String} Stringified attributes, e.g. `foo=\"bar\"`\n * @api public\n */",
    "meta": {
      "range": [794, 1010],
      "filename": "html.js",
      "lineno": 44,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib/utils",
      "code": {
        "id": "astnode100008412",
        "name": "html.parseAttributes",
        "type": "FunctionExpression",
        "value": "parseAttributes",
        "paramnames": ["hash"]
      },
      "vars": { "": null }
    },
    "description": "Parse HTML tag attributes from the `options.hash`.",
    "params": [
      {
        "type": { "names": ["Object"] },
        "description": "Helper options hash, e.g. `{foo: 'bar'}`",
        "name": "`hash`"
      }
    ],
    "returns": [
      {
        "type": { "names": ["String"] },
        "description": "Stringified attributes, e.g. `foo=\"bar\"`"
      }
    ],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "parseAttributes",
    "longname": "html.parseAttributes",
    "kind": "function",
    "memberof": "html",
    "scope": "static",
    "___id": "T000002R000602",
    "___s": true
  },
  "changecase": {
    "comment": "/**\n * Change casing on the given `string`, optionally\n * passing a delimiter to use between words in the\n * returned string.\n *\n * ```handlebars\n * utils.changecase('fooBarBaz');\n * //=> 'foo bar baz'\n *\n * utils.changecase('fooBarBaz' '-');\n * //=> 'foo-bar-baz'\n * ```\n * @param {String} `string` The string to change.\n * @return {String}\n * @api public\n */",
    "meta": {
      "range": [1132, 1474],
      "filename": "index.js",
      "lineno": 54,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib/utils",
      "code": {
        "id": "astnode100008643",
        "name": "utils.changecase",
        "type": "FunctionExpression",
        "paramnames": ["str", "fn"]
      },
      "vars": {
        "str": "utils.changecase~str",
        "fn": "utils.changecase~fn",
        "re": "utils.changecase~re",
        "": null
      }
    },
    "description": "Change casing on the given `string`, optionally\npassing a delimiter to use between words in the\nreturned string.\n\n```handlebars\nutils.changecase('fooBarBaz');\n//=> 'foo bar baz'\n\nutils.changecase('fooBarBaz' '-');\n//=> 'foo-bar-baz'\n```",
    "params": [
      {
        "type": { "names": ["String"] },
        "description": "The string to change.",
        "name": "`string`"
      }
    ],
    "returns": [{ "type": { "names": ["String"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "changecase",
    "longname": "utils.changecase",
    "kind": "function",
    "memberof": "utils",
    "scope": "static",
    "___id": "T000002R000617",
    "___s": true
  },
  "isNull": {
    "comment": "/**\n * Return true if `value` is a null or an empty string.\n *\n * ```handlebars\n * {{isNull null}}\n * <!-- results in:  'true' -->\n * ```\n * @param {any} `value`\n * @return {Boolean}\n * @api public\n */",
    "meta": {
      "range": [5000, 5001],
      "filename": "string.js",
      "lineno": 240,
      "columnno": 0,
      "path": "/home/ubuntu/workspace/handlebars-helpers/lib",
      "code": {
        "id": "astnode200007133",
        "name": "helpers.isNull",
        "type": "FunctionExpression",
        "paramnames": ["value"]
      }
    },
    "description": "Return true if `value` is a null or an empty string.\n\n```handlebars\n{{isNull null}}\n<!-- results in:  'true' -->\n```",
    "params": [{ "type": { "names": ["NULL"] }, "name": "`value`" }],
    "returns": [{ "type": { "names": ["Boolean"] } }],
    "tags": [
      {
        "originalTitle": "api",
        "title": "api",
        "text": "public",
        "value": "public"
      }
    ],
    "name": "isNull",
    "longname": "helpers.isNull",
    "kind": "function",
    "memberof": "helpers",
    "scope": "static",
    "___id": "T000002R001000",
    "___s": true
  }
}