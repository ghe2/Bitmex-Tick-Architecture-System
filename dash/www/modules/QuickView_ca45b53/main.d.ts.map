{"version":3,"sources":["templates/combined.ts","models/AppModel.js","views/LoadingScreen.js","views/LoginHistoryDialog.js","views/ShareDashDialog.js","views/MainToolbar.js","classes/log.js","views/AreYouSureDialog.js","classes/AppRouter.js","views/Notificator.js","views/FailedLoginsNotification.js","lib/backbone.localStorage.custom.js","views/app.js"],"names":[],"mappings":"AAEA,cAAM,CAAC;IAEP,MAAM,CAAC,0BAA0B,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,KAAK,MAAM,CAuCrC;IACnB,MAAM,CAAC,eAAe,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,KAAK,MAAM,CAW1B;IACnB,MAAM,CAAC,oBAAoB,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,KAAK,MAAM,CAE/B;IACnB,MAAM,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,KAAK,MAAM,CAyBxB;IACnB,MAAM,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,KAAK,MAAM,CAExB;IACnB,MAAM,CAAC,iBAAiB,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,KAAK,MAAM,CAe5B;IACnB,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,KAAK,MAAM,CAEhB;CAClB;ACxGD,4BAsCG;ACtCH,iCAmBG;ACjBH,sCAyQG;AC1QH,mCA6MG;AC5MH,+BA2lBG;AC9lBH,uBAA6B;ACD7B,oCA4BG;ACzBH,6BA6QG;AC9QH,+BAkEG;AClEH,4CA0BG","file":"main.d.ts","sourcesContent":["/// <reference types=\"handlebars\" />\n//@ts-ignore 2300\nclass T {\n\nstatic 'FailedLoginsNotification': (obj?: any) => string = Handlebars.template({\"1\":function(container:any,depth0:any,helpers:any,partials:any,data:any) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=\"function\", alias4=container.escapeExpression, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"    <div class=\\\"status-\"\n    + alias4(((helper = (helper = lookupProperty(helpers,\"status\") || (depth0 != null ? lookupProperty(depth0,\"status\") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"status\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":2,\"column\":23},\"end\":{\"line\":2,\"column\":33}}}) : helper)))\n    + \"\\\">\\n        <span>\"\n    + alias4(((helper = (helper = lookupProperty(helpers,\"time\") || (depth0 != null ? lookupProperty(depth0,\"time\") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"time\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":3,\"column\":14},\"end\":{\"line\":3,\"column\":22}}}) : helper)))\n    + \"</span>\\n        <span class=\\\"info\\\">from:</span>\\n        <span>\"\n    + alias4(((helper = (helper = lookupProperty(helpers,\"machineID\") || (depth0 != null ? lookupProperty(depth0,\"machineID\") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"machineID\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":5,\"column\":14},\"end\":{\"line\":5,\"column\":27}}}) : helper)))\n    + \"</span>\\n\"\n    + ((stack1 = lookupProperty(helpers,\"if\").call(alias1,(depth0 != null ? lookupProperty(depth0,\"status\") : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(2, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":6,\"column\":8},\"end\":{\"line\":9,\"column\":15}}})) != null ? stack1 : \"\")\n    + \"        <span class=\\\"info\\\">url:</span>\\n        <span>\"\n    + alias4(((helper = (helper = lookupProperty(helpers,\"url\") || (depth0 != null ? lookupProperty(depth0,\"url\") : depth0)) != null ? helper : alias2),(typeof helper === alias3 ? helper.call(alias1,{\"name\":\"url\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":11,\"column\":14},\"end\":{\"line\":11,\"column\":21}}}) : helper)))\n    + \"</span>\\n    </div>\\n\";\n},\"2\":function(container:any,depth0:any,helpers:any,partials:any,data:any) {\n    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"        <span class=\\\"info\\\">status:</span>\\n        <span>\"\n    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,\"status\") || (depth0 != null ? lookupProperty(depth0,\"status\") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{\"name\":\"status\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":8,\"column\":14},\"end\":{\"line\":8,\"column\":24}}}) : helper)))\n    + \"</span>\\n\";\n},\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container:any,depth0:any,helpers:any,partials:any,data:any) {\n    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return ((stack1 = lookupProperty(helpers,\"each\").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,\"rows\") : depth0),{\"name\":\"each\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":1,\"column\":0},\"end\":{\"line\":13,\"column\":9}}})) != null ? stack1 : \"\");\n},\"useData\":true});\nstatic 'LoadingScreen': (obj?: any) => string = Handlebars.template({\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container:any,depth0:any,helpers:any,partials:any,data:any) {\n    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"<div class=\\\"loading\\\" style=\\\"display: table; width: 100%; height: 100%; opacity: 0.9; pointer-events: none;\\\">\\n    <div style=\\\"display: table-cell; width: 100%; height: 100%; vertical-align: middle; text-align: center;\\\">\\n        <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 32 32\\\" width=\\\"64\\\" height=\\\"64\\\" fill=\\\"#D2D2D2\\\">\\n            <circle cx=\\\"16\\\" cy=\\\"3\\\" r=\\\"0\\\">\\n                <animate attributeName=\\\"r\\\" values=\\\"0;3;0;0\\\" dur=\\\"1s\\\" repeatCount=\\\"indefinite\\\" begin=\\\"0\\\" keySplines=\\\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\\\" calcMode=\\\"spline\\\" />\\n            </circle>\\n            <circle transform=\\\"rotate(45 16 16)\\\" cx=\\\"16\\\" cy=\\\"3\\\" r=\\\"0\\\">\\n                <animate attributeName=\\\"r\\\" values=\\\"0;3;0;0\\\" dur=\\\"1s\\\" repeatCount=\\\"indefinite\\\" begin=\\\"0.125s\\\" keySplines=\\\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\\\" calcMode=\\\"spline\\\" />\\n            </circle>\\n            <circle transform=\\\"rotate(90 16 16)\\\" cx=\\\"16\\\" cy=\\\"3\\\" r=\\\"0\\\">\\n                <animate attributeName=\\\"r\\\" values=\\\"0;3;0;0\\\" dur=\\\"1s\\\" repeatCount=\\\"indefinite\\\" begin=\\\"0.25s\\\" keySplines=\\\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\\\" calcMode=\\\"spline\\\" />\\n            </circle>\\n            <circle transform=\\\"rotate(135 16 16)\\\" cx=\\\"16\\\" cy=\\\"3\\\" r=\\\"0.567031\\\">\\n                <animate attributeName=\\\"r\\\" values=\\\"0;3;0;0\\\" dur=\\\"1s\\\" repeatCount=\\\"indefinite\\\" begin=\\\"0.375s\\\" keySplines=\\\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\\\" calcMode=\\\"spline\\\" />\\n            </circle>\\n            <circle transform=\\\"rotate(180 16 16)\\\" cx=\\\"16\\\" cy=\\\"3\\\" r=\\\"1.82452\\\">\\n                <animate attributeName=\\\"r\\\" values=\\\"0;3;0;0\\\" dur=\\\"1s\\\" repeatCount=\\\"indefinite\\\" begin=\\\"0.5s\\\" keySplines=\\\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\\\" calcMode=\\\"spline\\\" />\\n            </circle>\\n            <circle transform=\\\"rotate(225 16 16)\\\" cx=\\\"16\\\" cy=\\\"3\\\" r=\\\"2.88475\\\">\\n                <animate attributeName=\\\"r\\\" values=\\\"0;3;0;0\\\" dur=\\\"1s\\\" repeatCount=\\\"indefinite\\\" begin=\\\"0.625s\\\" keySplines=\\\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\\\" calcMode=\\\"spline\\\" />\\n            </circle>\\n            <circle transform=\\\"rotate(270 16 16)\\\" cx=\\\"16\\\" cy=\\\"3\\\" r=\\\"2.1029\\\">\\n                <animate attributeName=\\\"r\\\" values=\\\"0;3;0;0\\\" dur=\\\"1s\\\" repeatCount=\\\"indefinite\\\" begin=\\\"0.75s\\\" keySplines=\\\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\\\" calcMode=\\\"spline\\\" />\\n            </circle>\\n            <circle transform=\\\"rotate(315 16 16)\\\" cx=\\\"16\\\" cy=\\\"3\\\" r=\\\"0.60761\\\">\\n                <animate attributeName=\\\"r\\\" values=\\\"0;3;0;0\\\" dur=\\\"1s\\\" repeatCount=\\\"indefinite\\\" begin=\\\"0.875s\\\" keySplines=\\\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\\\" calcMode=\\\"spline\\\" />\\n            </circle>\\n            <circle transform=\\\"rotate(180 16 16)\\\" cx=\\\"16\\\" cy=\\\"3\\\" r=\\\"1.82452\\\">\\n                <animate attributeName=\\\"r\\\" values=\\\"0;3;0;0\\\" dur=\\\"1s\\\" repeatCount=\\\"indefinite\\\" begin=\\\"0.5s\\\" keySplines=\\\"0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8;0.2 0.2 0.4 0.8\\\" calcMode=\\\"spline\\\" />\\n            </circle>\\n        </svg>\\n        <div style=\\\"color: #D2D2D2; font-weight: bold; margin-top: 7px; font-size: 11px; letter-spacing: 1px;\\\">\\n            \"\n    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,\"text\") || (depth0 != null ? lookupProperty(depth0,\"text\") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === \"function\" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{\"name\":\"text\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":33,\"column\":12},\"end\":{\"line\":33,\"column\":20}}}) : helper)))\n    + \"\\n        </div>\\n    </div>\\n</div>\";\n},\"useData\":true});\nstatic 'LoginHistoryDialog': (obj?: any) => string = Handlebars.template({\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container:any,depth0:any,helpers:any,partials:any,data:any) {\n    return \"<div class=\\\"grid-div\\\">\\n</div>\";\n},\"useData\":true});\nstatic 'MainToolbar': (obj?: any) => string = Handlebars.template({\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container:any,depth0:any,helpers:any,partials:any,data:any) {\n    var helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), alias2=container.hooks.helperMissing, alias3=container.escapeExpression, alias4=\"function\", lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"<div class=\\\"main-toolbar\\\">\\n    <div class=\\\"logo\\\"></div>\\n\\n    <div class=\\\"document-selector\\\" style=\\\"display: inline-block;\\\"></div>\\n\t\\n    <div class=\\\"main\\\">\\n        <a class=\\\"refresh-dash\\\" style=\\\"display: inline-block;\\\">\"\n    + alias3((lookupProperty(helpers,\"t\")||(depth0 && lookupProperty(depth0,\"t\"))||alias2).call(alias1,\"Refresh Dashboard\",{\"name\":\"t\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":7,\"column\":63},\"end\":{\"line\":7,\"column\":88}}}))\n    + \"</a>\\n        <label for=\\\"\"\n    + alias3(((helper = (helper = lookupProperty(helpers,\"guid\") || (depth0 != null ? lookupProperty(depth0,\"guid\") : depth0)) != null ? helper : alias2),(typeof helper === alias4 ? helper.call(alias1,{\"name\":\"guid\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":8,\"column\":20},\"end\":{\"line\":8,\"column\":28}}}) : helper)))\n    + \"_customise\\\">\"\n    + alias3((lookupProperty(helpers,\"t\")||(depth0 && lookupProperty(depth0,\"t\"))||alias2).call(alias1,\"Customise Dashboard\",{\"name\":\"t\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":8,\"column\":40},\"end\":{\"line\":8,\"column\":67}}}))\n    + \"</label>\\n        <input id=\\\"\"\n    + alias3(((helper = (helper = lookupProperty(helpers,\"guid\") || (depth0 != null ? lookupProperty(depth0,\"guid\") : depth0)) != null ? helper : alias2),(typeof helper === alias4 ? helper.call(alias1,{\"name\":\"guid\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":9,\"column\":19},\"end\":{\"line\":9,\"column\":27}}}) : helper)))\n    + \"_customise\\\" type=\\\"checkbox\\\" class=\\\"customise-dash\\\" />\\n        <a class=\\\"save-dash\\\" style=\\\"display: inline-block;\\\">\"\n    + alias3((lookupProperty(helpers,\"t\")||(depth0 && lookupProperty(depth0,\"t\"))||alias2).call(alias1,\"Save View State\",{\"name\":\"t\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":10,\"column\":60},\"end\":{\"line\":10,\"column\":83}}}))\n    + \"</a>\\n        <a class=\\\"default-dash\\\" style=\\\"display: inline-block;\\\">\"\n    + alias3((lookupProperty(helpers,\"t\")||(depth0 && lookupProperty(depth0,\"t\"))||alias2).call(alias1,\"Reset View State\",{\"name\":\"t\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":11,\"column\":63},\"end\":{\"line\":11,\"column\":87}}}))\n    + \"</a>\\n        <a class=\\\"share-dash\\\" style=\\\"display: inline-block\\\">\"\n    + alias3((lookupProperty(helpers,\"t\")||(depth0 && lookupProperty(depth0,\"t\"))||alias2).call(alias1,\"Share Dashboard\",{\"name\":\"t\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":12,\"column\":60},\"end\":{\"line\":12,\"column\":83}}}))\n    + \"</a>\\n        <a class=\\\"create-pdf\\\" style=\\\"display: inline-block\\\">\"\n    + alias3((lookupProperty(helpers,\"t\")||(depth0 && lookupProperty(depth0,\"t\"))||alias2).call(alias1,\"Create Pdf\",{\"name\":\"t\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":13,\"column\":60},\"end\":{\"line\":13,\"column\":78}}}))\n    + \"</a>\\n    </div>\\n\\n    <div class=\\\"connectionStatus\\\"></div>\\n\\n    <div class=\\\"profile\\\">\\n        <button>\\n            <i class=\\\"fa fa-fw fa-user\\\"></i>\\n            <span class=\\\"user-name-wrap\\\">\\n                <span class=\\\"user-name\\\"></span>\\n            </span>\\n        </button>\\n\\n        <div class=\\\"profile-menu\\\"></div>\\n    </div>\\n</div>\";\n},\"useData\":true});\nstatic 'Notificator': (obj?: any) => string = Handlebars.template({\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container:any,depth0:any,helpers:any,partials:any,data:any) {\n    return \"<div class=\\\"panel ui-widget-content\\\">\\n    <div class=\\\"title\\\"></div>\\n    <div class=\\\"items\\\"></div>\\n    <button class=\\\"close-button\\\">\\n        Close\\n    </button>\\n</div>\";\n},\"useData\":true});\nstatic 'ShareDashDialog': (obj?: any) => string = Handlebars.template({\"1\":function(container:any,depth0:any,helpers:any,partials:any,data:any) {\n    return \"checked\";\n},\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container:any,depth0:any,helpers:any,partials:any,data:any) {\n    var stack1, helper, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    };\n\n  return \"<div>\\n    <input class=\\\"share-dash-url\\\" value=\\\"\"\n    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,\"url\") || (depth0 != null ? lookupProperty(depth0,\"url\") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === \"function\" ? helper.call(alias1,{\"name\":\"url\",\"hash\":{},\"data\":data,\"loc\":{\"start\":{\"line\":2,\"column\":41},\"end\":{\"line\":2,\"column\":48}}}) : helper)))\n    + \"\\\" readonly />\\n</div>\\n<div class=\\\"share-meta\\\">\\n    <label class=\\\"share-shorten\\\">Shorten <input class=\\\"share-shorten-checkbox\\\" type=\\\"checkbox\\\"\\n            \"\n    + ((stack1 = lookupProperty(helpers,\"if\").call(alias1,(depth0 != null ? lookupProperty(depth0,\"shortenUrl\") : depth0),{\"name\":\"if\",\"hash\":{},\"fn\":container.program(1, data, 0),\"inverse\":container.noop,\"data\":data,\"loc\":{\"start\":{\"line\":6,\"column\":12},\"end\":{\"line\":6,\"column\":44}}})) != null ? stack1 : \"\")\n    + \" /></label>\\n    <span class=\\\"share-info\\\"><i class=\\\"fa share-info-icon\\\"></i> <span class=\\\"share-info-text\\\"></span></span>\\n</div>\";\n},\"useData\":true});\nstatic 'app': (obj?: any) => string = Handlebars.template({\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container:any,depth0:any,helpers:any,partials:any,data:any) {\n    return \"<div class=\\\"toolbar-div\\\">\\n</div>\\n\\n<div class=\\\"document-view-div\\\">\\n</div>\\n\\n<div class=\\\"dialog-panel\\\">\\n    <div class=\\\"document\\\" />\\n    <div class=\\\"environment\\\" />\\n</div>\\n<div class=\\\"notifications-div\\\">\\n\\n</div>\";\n},\"useData\":true});\n}","/*global Backbone,DataStore,generateComponentDefintions*/\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst AppModel = Backbone.Model.extend({\n    defaults: {\n        api: null,\n        components: null,\n        deltaClient: null,\n        documents: null,\n        language: \"en\",\n        publisherUrl: null,\n        smartDrop: true,\n        websiteUrl: null,\n        userName: null,\n        paths: null,\n        propertiesPinned: true,\n        isHelpDialogTabbed: true,\n    },\n\n    initialize: function(attributes) {\n        const paths = [];\n\n        for (const key in attributes.versions) {\n            if (attributes.versions.hasOwnProperty(key)) {\n                paths.push({\n                    key: key,\n                    value: attributes.versions[key],\n                });\n            }\n        }\n\n        this.set({\n            api: attributes.api,\n            components: new QuickBase[\"ComponentDefinitionCollection\"](),\n            documents: attributes.documents,\n            PackageName: attributes.PackageName,\n            paths: _.sortBy(paths, \"key\"),\n            publisherUrl: attributes.publisherUrl,\n            websiteUrl: attributes.websiteUrl,\n        });\n    },\n});\n","/// <reference path=\"../templates/combined.ts\" />\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst LoadingScreen = Backbone.View.extend({\n    className: \"quick-dash loadingScreen\",\n    loadText: null,\n\n    initialize: function(options) {\n        this.loadText = options.loadingText;\n        this.render();\n    },\n\n    render: function() {\n        this.$el.html(\n            T.LoadingScreen({\n                text: this.loadText,\n            }),\n        );\n        this.$el.hide();\n        this.$el.fadeIn();\n        return this;\n    },\n});\n","/*globals Backbone, _, $, console*/\n/// <reference path=\"../templates/combined.ts\" />\n/// <reference path=\"../views/LoadingScreen.js\" />\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst LoginHistoryDialog = Backbone.View.extend({\n    $dialog: null,\n\n    close: function() {\n        this.$dialog[\"dialog\"](\"close\");\n    },\n\n    dataGridStuff: (function() {\n        let RAW_COLUMN_NAMES, RAW_COLUMN_TYPES, RAW_COLUMN_DISPLAY_NAMES, RAW_COLUMN_HIDDEN;\n\n        RAW_COLUMN_NAMES = [\"pk\", \"time\", \"machineID\", \"status\", \"url\"];\n        RAW_COLUMN_TYPES = [11, 15, 11, 11, 11];\n        RAW_COLUMN_DISPLAY_NAMES = [\"pk\", \"Time\", \"Machine Id\", \"Status\", \"Url\"];\n        RAW_COLUMN_HIDDEN = [\"pk\"];\n\n        return {\n            generateDatagridConfig: function(Datagrid) {\n                let dataModel, modelToReturn;\n\n                this.Datagrid = Datagrid;\n\n                //generate model\n                dataModel = new QuickBase.DocumentDataModel({\n                    _subscriptionKey: \"pk\",\n                    _dataType: \"copy\",\n                    _maxRows: 1000000,\n                });\n                dataModel.apply();\n                dataModel.onExecuteSuccess(this.getResponse(), true);\n\n                modelToReturn = new Backbone.Model({\n                    data: dataModel,\n                    columnsConfig: this.getColumnsConfiguration(),\n                    datagridConfig: this.datagridConfiguration(),\n                    sortColumns: this.sortColumns,\n                    // ,\n                    // \"theme\": \"Dark\"\n                });\n\n                return modelToReturn;\n            },\n\n            datagridConfiguration: function() {\n                return {\n                    Selection: {\n                        Mode: \"Multi Row\",\n                    },\n                };\n            },\n\n            columnsConfiguration: function() {\n                let fn;\n\n                //http://code.kx.com/wiki/Reference/Datatypes\n                MAP = {\n                    //TODO: \"Number\", \"Formatted Number\", \"Smart Number\", \"Percentage\"\n                    1: \"Boolean\",\n\n                    14: \"Date\",\n                    15: \"DateTime\",\n                    19: \"Time\",\n                };\n\n                fn = function(kdbType) {\n                    return MAP[kdbType] || \"General\";\n                };\n\n                return _.map(RAW_COLUMN_NAMES, function(c, ix) {\n                    return {\n                        Field: c,\n                        DisplayName: RAW_COLUMN_DISPLAY_NAMES[ix],\n                        Sortable: true,\n                        Hidden: _.includes(RAW_COLUMN_HIDDEN, RAW_COLUMN_NAMES[ix]),\n                        Format: fn(RAW_COLUMN_TYPES[ix]),\n                    };\n                });\n            },\n\n            getResponse: function(rows) {\n                return {\n                    rows: rows || [],\n                    columns: RAW_COLUMN_NAMES,\n                    meta: _.zipObject(RAW_COLUMN_NAMES, RAW_COLUMN_TYPES),\n                };\n            },\n\n            getColumnsConfiguration: function() {\n                let toReturn = this.columnsConfiguration(),\n                    self = this;\n\n                toReturn = _.map(toReturn, function(c) {\n                    return _.extend(\n                        {},\n                        self.Datagrid.getColumnSettingsModel(),\n                        {\n                            DisplayName: c[\"Field\"],\n                            TextAlign: \"left\",\n                            IsReadonly: true,\n                            MinWidthAbsolute: 100,\n                        },\n                        c,\n                    );\n                });\n\n                return toReturn;\n            },\n\n            sortColumns: [\n                {\n                    sortCol: \"time\",\n                    sortAsc: false,\n                },\n            ],\n        };\n    })(),\n\n    getLoginHistory: function() {\n        const queryStr = \".session.getLogins\",\n            self = this;\n\n        QuickBase.DeltaClientLib.getAPIQueryData(\n            \"kdb\",\n            undefined,\n            queryStr,\n            [\n                {\n                    IsKdbParam: true,\n                    i: 0,\n                    index: 0,\n                    name: \"user\",\n                    type: \"symbol\",\n                    value: QuickBase.DeltaClientLib.deltaClient.user(),\n                },\n                {\n                    IsKdbParam: true,\n                    i: 1,\n                    index: 1,\n                    name: \"clientType\",\n                    type: \"symbol\",\n                },\n            ],\n            function(result) {\n                self.dgSourceModel.onExecuteSuccess(\n                    self.dataGridStuff.getResponse(\n                        _.map(result.rows, function(item) {\n                            return _.extend(\n                                { pk: _.uniqueId() },\n                                _.pick(item, \"machineID\", \"status\", \"time\", \"url\"),\n                            );\n                        }),\n                    ),\n                    true,\n                );\n                self.hideLoadingScreen();\n\n                self.onResize();\n            },\n            function(result) {\n                //alert(\"error\", result);\n                console.log(\"getLoginHistory session get logins error\", result);\n            },\n            100,\n            false,\n        );\n    },\n\n    hideLoadingScreen: function() {\n        if (this.$loadingScreen) {\n            this.$loadingScreen.fadeOut(function() {\n                $(this).remove();\n            });\n            this.$loadingScreen = null;\n        }\n    },\n\n    initialize: function(options) {\n        const self = this;\n\n        self.$el.html(T.LoginHistoryDialog());\n\n        self.showLoadingScreen();\n\n        self.initializeDataGrid();\n\n        this.$dialog = this.$el[\"dialog\"](\n            _.extend(\n                {\n                    //'appendTo': options.container,\n                    dialogClass: \"quick-base login-history-dialog\",\n                    title: t(\"Login History\"),\n                    resizable: true,\n                    height: 302,\n                    width: 552,\n                    modal: true,\n                    autoOpen: true,\n                    draggable: true,\n                    buttons: [\n                        {\n                            text: t(\"OK\"),\n                            click: $.proxy(self.close, self),\n                            icons: {\n                                primary: \"fa fa-check\",\n                            },\n                        },\n                    ],\n                    open: function() {\n                        // add a dialog icon\n                        $('<i class=\"fa fa-history\" />').insertBefore(\n                            self.$el.parent().find(\".ui-dialog-title\"),\n                        );\n                    },\n                    close: function() {\n                        if (_.isFunction(options.onClose)) {\n                            options.onClose();\n                        }\n\n                        self.remove();\n                    },\n                    resize: $.proxy(this.onResize, this),\n                },\n                options,\n            ),\n        );\n    },\n\n    initializeDataGrid: function(params) {\n        const self = this;\n        require([\"Datagrid\"], function(Datagrid) {\n            // add data grid model\n            const dgModel = self.dataGridStuff.generateDatagridConfig(Datagrid);\n            //dgModel.set(\"theme\", this.options.theme);\n            self.dgSourceModel = dgModel.get(\"data\");\n            self.dgSource = new Datagrid.Master({\n                el: self.$(\".grid-div\"),\n                model: dgModel,\n            });\n            // moved here so it doesn't\n            self.getLoginHistory();\n        });\n    },\n\n    onResize: function() {\n        if (this.dgSource) {\n            this.dgSource.onResize();\n        }\n    },\n\n    remove: function() {\n        // destroy grid\n        this.dgSource.off();\n        this.dgSource.remove();\n\n        // remove from DOM\n        Backbone.View.prototype.remove.apply(this);\n    },\n\n    showLoadingScreen: function(text) {\n        let loadingScreen;\n\n        loadingScreen = new LoadingScreen({\n            loadingText: text,\n        });\n        loadingScreen.$el.appendTo(this.$el);\n        this.$loadingScreen = loadingScreen.$el;\n    },\n});\n","/*global */\n/// <reference path=\"../templates/combined.ts\" />\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst ShareDashDialog = Backbone.View.extend({\n    ICONS: {\n        error: \"fa-times\",\n        loading: \"fa-spinner fa-pulse\",\n        success: \"fa-check\",\n    },\n\n    $closeButton: null,\n    $dialog: null,\n\n    appModel: null,\n    className: \"quick-view window share-dash-dialog\",\n    closeArgs: null,\n    viewModel: null,\n\n    events: {\n        \"change .share-shorten-checkbox\": \"onToggleShorten\",\n        \"click .share-dash-url\": \"onClickUrl\",\n    },\n\n    initialize: function(options) {\n        this.options = options;\n        this.container = options.container;\n        this.shortenUrl = options.shortenUrl;\n        this.url = options.url;\n\n        this.render();\n    },\n\n    onClickClose: function() {\n        this.$dialog[\"dialog\"](\"close\");\n    },\n\n    onClickCopy: function() {\n        this.$urlInput.select();\n\n        try {\n            // execCommand returns true for success, false for fail\n            if (document.execCommand(\"copy\")) {\n                this.showInfo(\"Link copied\", \"success\");\n            } else {\n                this.showInfo(\"Error: link not copied\", \"error\");\n            }\n        } catch (err) {\n            this.showInfo(\"Error: link not copied (\" + err.toString() + \")\", \"error\");\n        }\n    },\n\n    onClickPreview: function() {\n        window.open(this.shortenUrl ? this.shortUrl : this.url, \"_blank\");\n    },\n\n    onClickUrl: function() {\n        this.$urlInput.select();\n    },\n\n    onToggleShorten: function() {\n        const self = this,\n            host = window.location.protocol + \"//\" + window.location.host + \"/\",\n            shorten = this.$shareShortenCheckbox.prop(\"checked\");\n\n        const success = function(data) {\n            self.shortUrl = data[1];\n            self.$urlInput.val(self.shortUrl);\n            self.showInfo(null, \"none\");\n        };\n\n        const error = function(data) {\n            self.shortUrl = null;\n            self.$urlInput.val(self.url);\n            self.showInfo(data.toString(), \"error\");\n\n            // reset shorten setting\n            self.shortenUrl = false;\n            self.$shareShortenCheckbox.prop(\"checked\", false);\n            self.trigger(\"shortenUrlSetting\", false);\n        };\n\n        if (shorten) {\n            if (!this.shortUrl) {\n                self.showInfo(\"Shortening\", \"loading\");\n                if (this.options.isLite) {\n                    QuickBase.DashClient.runAPI(\n                        \".api.shortenUrl\",\n                        \"gw\",\n                        [{ type: \"string\", value: this.url.substring(host.length) }],\n                        function(data) {\n                            success([0, host + data.rows[0].symbol]);\n                        },\n                        error,\n                    );\n                } else {\n                    QuickBase[\"DeltaClientLib\"].deltaClient.request(\n                        \"UrlAPI.getShortUrl\",\n                        success,\n                        error,\n                        this.url,\n                    );\n                }\n            } else {\n                this.$urlInput.val(this.shortUrl);\n            }\n        } else {\n            this.$urlInput.val(this.url);\n        }\n\n        this.shortenUrl = shorten;\n        this.trigger(\"shortenUrlSetting\", shorten);\n    },\n\n    render: function() {\n        let self = this,\n            buttons;\n\n        this.$el.html(\n            T.ShareDashDialog({\n                shortenUrl: this.shortenUrl,\n                url: this.url,\n            }),\n        );\n\n        this.$shareInfoIcon = this.$el.find(\".share-info-icon\");\n        this.$shareInfoText = this.$el.find(\".share-info-text\");\n        this.$urlInput = this.$el.find(\"input.share-dash-url\");\n        this.$shareShortenCheckbox = this.$el.find(\"input.share-shorten-checkbox\");\n\n        buttons = [\n            {\n                text: \"Copy Link\",\n                click: _.bind(this.onClickCopy, this),\n                icons: {\n                    primary: \"fa fa-clipboard\",\n                },\n            },\n            {\n                text: \"Preview\",\n                click: _.bind(this.onClickPreview, this),\n                icons: {\n                    primary: \"fa fa-external-link\",\n                },\n            },\n            {\n                text: \"Close\",\n                click: _.bind(this.onClickClose, this),\n                icons: {\n                    primary: \"fa fa-times\",\n                },\n            },\n        ];\n\n        this.$dialog = this.$el[\"dialog\"](\n            _.extend(\n                {\n                    appendTo: this.container,\n                    title: \"Share Dashboard\",\n                    resizable: false,\n                    width: 500,\n                    modal: true,\n                    autoOpen: true,\n                    draggable: true,\n                    buttons: buttons,\n                    open: function() {\n                        // add a dialog icon\n                        $('<i class=\"fa fa-share-alt\" />').insertBefore(\n                            self.$el.parent().find(\".ui-dialog-title\"),\n                        );\n                    },\n                    close: function() {\n                        self.remove();\n                    },\n                },\n                this.options,\n            ),\n        );\n\n        this.onToggleShorten();\n    },\n\n    showInfo: function(text, type) {\n        const self = this;\n\n        if (type === \"none\") {\n            this.$el.removeClass(\"show-info\");\n            return;\n        }\n\n        this.$el.addClass(\"show-info\");\n\n        // only show info for a few seconds\n        _.delay(function() {\n            self.$el.removeClass(\"show-info\");\n        }, 3000);\n\n        // determine icon\n        icon = this.ICONS[type];\n\n        // set icon/text\n        this.$shareInfoIcon\n            .removeClass(function(index, className) {\n                // remove all classes beginning with fa-\n                return (className.match(/\\bfa-\\S+/g) || []).join(\" \");\n            })\n            .addClass(icon);\n        this.$shareInfoText.text(text);\n    },\n});\n","/// <reference path=\"../templates/combined.ts\" />\n/// <reference path=\"../views/LoginHistoryDialog.js\" />\n/// <reference path=\"../views/ShareDashDialog.js\" />\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst MainToolbar = Backbone.View.extend({\n    AUTOSAVE_THROTTLE: 5000,\n\n    $saveDash: null,\n\n    initialize: function(options) {\n        const self = this;\n\n        this.appModel = options.appModel;\n        this.dialogContainer = options.dialogContainer;\n        this.themes = options.themes;\n        this.viewModel = options.viewModel;\n        // Keep track of current view model for dashboards\n        this.currentDocViewModel = null;\n\n        //render\n        this.$el.html(\n            T.MainToolbar({\n                guid: _.uniqueId(\"toolbar_\"),\n            }),\n        );\n\n        // document selector\n        this.documentSelector = new QuickBase[\"DocumentSelector\"]({\n            el: this.$el.find(\".document-selector\"),\n            appModel: this.appModel,\n            viewModel: this.viewModel,\n        });\n\n        this.listenTo(\n            this.viewModel,\n            \"change:selectedDocumentId\",\n            this.onSelectedDocumentIdChanged,\n        );\n\n        //refresh dash btn\n        this.$refreshDash = this.$el.find(\".refresh-dash\");\n        this.$refreshDash\n            .button({\n                icons: {\n                    primary: \"fa fa-refresh\",\n                },\n                text: false,\n            })\n            .click($.proxy(this.onRefreshDash, this));\n\n        // customise dash btn\n        this.$customiseDash = this.$el.find(\".customise-dash\");\n        this.$customiseDash\n            .button({\n                icons: {\n                    primary: \"fa fa-cog\",\n                },\n                text: false,\n            })\n            .click($.proxy(this.onCustomiseDash, this));\n\n        this.onUserConfigurableChange();\n        this.listenTo(this.viewModel, \"change:userConfigurable\", this.onUserConfigurableChange);\n\n        // save dash btn\n        this.$saveDash = this.$el.find(\".save-dash\");\n        this.$saveDash\n            .button({\n                icons: {\n                    primary: \"fa fa-floppy-o\",\n                },\n                text: false,\n                //,disabled: true\n            })\n            .click($.proxy(this.onSaveDash, this));\n        $(\"<span />\")\n            .addClass(\"save-pending fa fa-asterisk\")\n            .appendTo(this.$saveDash);\n        $(\"<span />\")\n            .addClass(\"save-in-progress fa fa-spinner fa-pulse\")\n            .appendTo(this.$saveDash);\n        this.listenTo(this.viewModel, \"widgets-configured\", this.onWidgetsConfigured);\n        this.throttledAutoSaveDash = _.throttle(this.onSaveDash.bind(this), this.AUTOSAVE_THROTTLE);\n\n        this.$revertDash = this.$el.find(\".default-dash\");\n        this.$revertDash\n            .button({\n                icons: {\n                    primary: \"fa fa-undo\",\n                },\n                text: false,\n                //,disabled: true\n            })\n            .click($.proxy(this.onRevertDash, this));\n\n        this.$shareDash = this.$el.find(\".share-dash\");\n        this.$shareDash\n            .button({\n                icons: {\n                    primary: \"fa fa-share-alt\",\n                },\n                text: false,\n            })\n            .click($.proxy(this.onShareDash, this));\n\n        this.$createPdf = this.$el.find(\".create-pdf\");\n        this.$createPdf\n            .button({\n                icons: {\n                    primary: \"fa fa-file-pdf-o\", //fa-print\n                },\n                text: false,\n            })\n            .click($.proxy(this.onCreatePdf, this));\n\n        if (!this.appModel.get(\"isLite\") || !this.appModel.get(\"PdfUrl\")) {\n            this.$createPdf.hide();\n        }\n\n        // check if pdf server is enabled\n        $(QuickBase[\"DeltaClientLib\"]).on(\"DeltaClientConnect\", function() {\n            const result =\n                QuickBase[\"DeltaClientLib\"].getDashboardProperty(\"pdf_enabled\") === \"true\";\n            if (result) {\n                self.$createPdf.show();\n            }\n        });\n\n        // profile\n        this.$profileButton = this.$el.find(\".profile > button\");\n        this.$profileMenu = this.$el.find(\".profile > .profile-menu\");\n\n        this.$profileButton = this.$el\n            .find(\".profile > button\")\n            [\"button\"]({\n                text: true,\n                icons: {\n                    //primary: \"fa fa-user\",\n                    secondary: \"ui-icon-triangle-1-s\",\n                },\n            })\n            .click(function() {\n                // show menu\n                self.$profileMenu.toggle();\n                // position menu\n                self.$profileMenu.css(\"position\", \"absolute\");\n\n                self.$profileMenu.position({\n                    my: \"right top\",\n                    at: \"right bottom\",\n                    of: this,\n                });\n\n                // close menu\n                $(document).one(\"click\", function() {\n                    // hide menu\n                    self.$profileMenu.hide();\n                });\n                return false;\n            });\n\n        // create profile menu\n        if (this.appModel.get(\"isLite\")) {\n            this.initProfileMenu();\n        } else {\n            $(QuickBase[\"DeltaClientLib\"]).one(\n                \"DeltaClientLogin\",\n                $.proxy(this.initProfileMenu, this),\n            );\n        }\n\n        // user name\n        this.listenTo(this.appModel, \"change:userName\", function(model, value) {\n            self.$el.find(\".user-name\").text(value);\n        });\n\n        var connectStatusListen = function() {\n            $(QuickBase[\"DeltaClientLib\"]).one(\"DeltaClientDisconnect\", function() {\n                self.changeConnectionStatus(false);\n                $(QuickBase[\"DeltaClientLib\"]).one(\"DeltaClientConnect\", function() {\n                    self.changeConnectionStatus(true);\n                    connectStatusListen();\n                });\n            });\n        };\n\n        connectStatusListen();\n    },\n\n    changeConnectionStatus: function(isConnected) {\n        const self = this;\n\n        if (isConnected) {\n            self.$el\n                .find(\".connectionStatus\")\n                .html('<span class=\"fa fa-info-circle\"></span>Delta Client has reconnected');\n            self.$el.find(\".connectionStatus\").css({\n                color: \"#03B103\",\n                display: \"inline-block\",\n            });\n            _.delay(function() {\n                self.$el.find(\".connectionStatus\").hide();\n            }, 7000);\n        } else {\n            self.$el\n                .find(\".connectionStatus\")\n                .html(\n                    '<span class=\"fa fa-warning\"></span>Delta Client connection has been lost, reconnecting...',\n                );\n\n            self.$el.find(\".connectionStatus\").css({\n                color: \"#FF6262\",\n                display: \"inline-block\",\n            });\n        }\n    },\n\n    initProfileMenu: function() {\n        this.profileMenu = new QuickBase[\"ProfileMenu\"]({\n            appModel: this.appModel,\n            dialogContainer: this.dialogContainer,\n            themes: this.themes,\n            isQuickView: true,\n            viewModel: this.viewModel,\n        });\n        this.$profileMenu.html(this.profileMenu.$el);\n\n        this.listenTo(\n            this.profileMenu,\n            \"themeChange\",\n            function() {\n                this.trigger(\"themeChange\");\n            }.bind(this),\n        );\n\n        this.listenTo(\n            this.profileMenu,\n            \"login-history\",\n            function() {\n                this.onLoginHistory();\n            }.bind(this),\n        );\n\n        this.$profileMenu.hide();\n    },\n\n    onChangePassword: function() {\n        let dialog;\n\n        dialog = new QuickBase[\"ChangePasswordDialog\"]();\n    },\n\n    getViewstate: function() {\n        const selectedDocumentId = this.viewModel.get(\"selectedDocumentId\"),\n            doc = this.appModel.get(\"documents\").get(selectedDocumentId),\n            docViewstates = doc.get(\"viewState\").getViewStateList(true),\n            viewstate = {};\n\n        _.each(docViewstates, function(v) {\n            viewstate[v.path] = v.model.get(\"value\");\n        });\n\n        return viewstate;\n    },\n\n    onCreatePdf: function() {\n        let selectedDocumentId = this.viewModel.get(\"selectedDocumentId\"),\n            doc = this.appModel.get(\"documents\").get(selectedDocumentId),\n            urlQueryParams = \"\",\n            toPrintUrl,\n            model,\n            self = this,\n            viewStateParameters,\n            hash,\n            documentWidth,\n            documentHeight;\n\n        if (doc) {\n            viewStateParameters = doc.get(\"viewState\").getViewStateExport();\n            hash = \"#\" + selectedDocumentId + \"/\" + this.viewModel.get(\"selectedScreenId\");\n\n            model = new Backbone.Model({\n                printFilters: false,\n                width: \"standard\",\n                fileName:\n                    this.appModel\n                        .get(\"documents\")\n                        .get(this.viewModel.get(\"selectedDocumentId\"))\n                        .get(\"name\") +\n                    \" \" +\n                    moment().format(\"YYYY-MM-DD HH:mm\"),\n            });\n\n            if (self.appModel.get(\"NewPdf\")) {\n                documentWidth = $(\".toolbar-div\").width();\n                documentHeight = $(\".grid-stack\").height(); // height doesn't change when width does (good)\n\n                model.schema = {\n                    fileName: {\n                        title: \"File Name\",\n                    },\n                    printFilters: {\n                        title: \"Print Filters:\",\n                        type: \"Checkbox\",\n                    },\n                    width: {\n                        title: \"Pdf Width:\",\n                        type: \"Select\",\n                        options: [\"standard\", \"current preview (\" + documentWidth + \"px)\"],\n                        default: \"standard\",\n                    },\n                };\n            } else {\n                model.schema = {};\n            }\n\n            const dialog = new BBForm.NewObjectDialog({\n                dialogTitle: \"Create PDF\",\n                iconClass: \"fa-file-pdf-o\",\n                model: model,\n                userClass: \"create-pdf-dialog\",\n                okBtnLabel: \"Create PDF\",\n                okBtnIcon: \"fa fa-file-pdf-o\",\n                width: 350,\n                callback: function(m) {\n                    if (!_.isEmpty(viewStateParameters)) {\n                        urlQueryParams =\n                            \"?viewstate=\" + encodeURIComponent(JSON.stringify(viewStateParameters));\n                    }\n\n                    // add print filters\n                    if (self.appModel.get(\"NewPdf\")) {\n                        if (!urlQueryParams) {\n                            urlQueryParams += \"?\";\n                        } else {\n                            urlQueryParams += \"&\";\n                        }\n                        urlQueryParams += \"printfilters=\" + (m.get(\"printFilters\") ? 1 : 0);\n\n                        if ($(\".pdf-expandable\").length > 0) {\n                            urlQueryParams += \"&documentHeight=1080\";\n                            urlQueryParams += \"&documentWidth=1920\";\n                        } else {\n                            urlQueryParams += \"&documentWidth=\" + documentWidth;\n                            urlQueryParams +=\n                                m.get(\"width\") === \"standard\" ? \"&width=standard\" : \"&width=other\";\n                            urlQueryParams += \"&documentHeight=\" + documentHeight;\n                        }\n                    }\n\n                    const isLite = self.appModel.get(\"isLite\");\n                    const pdfUrl = self.appModel.get(\"PdfUrl\");\n                    toPrintUrl = (isLite ? \"index.html\" : \"index.jsp\") + urlQueryParams + hash;\n                    url =\n                        (isLite ? pdfUrl : \"pdf.jsp\") +\n                        \"?filename=\" +\n                        encodeURIComponent(m.get(\"fileName\")) +\n                        \"&url=\" +\n                        encodeURIComponent(toPrintUrl);\n\n                    window.open(url);\n                },\n            });\n        }\n    },\n\n    onCustomiseDash: function() {\n        if (this.viewModel.get(\"userConfigurable\")) {\n            this.viewModel.set(\"buildMode\", !this.viewModel.get(\"buildMode\"), {\n                userInitiated: true,\n            });\n        }\n    },\n\n    onDocumentViewStateChanged: function() {\n        const selectedDocumentId = this.viewModel.get(\"selectedDocumentId\");\n        const doc = this.appModel.get(\"documents\").get(selectedDocumentId);\n        const mode = doc ? doc.get(\"saveViewerState\") : \"\";\n\n        if (mode.indexOf(\"enabled\") === 0) {\n            this.currentDocViewModel[\"wasChanged\"] = true;\n            this.$saveDash.addClass(\"changed\");\n        }\n\n        if (mode === \"enabled_auto\") {\n            this.throttledAutoSaveDash();\n        }\n    },\n\n    onDocumentViewStateSaved: function(data) {\n        this.$saveDash.removeClass(\"saving changed\");\n    },\n\n    onLoginHistory: function() {\n        const dialog = new LoginHistoryDialog({\n            appModel: this.appModel,\n        });\n    },\n\n    onLogout: function() {\n        location.reload();\n    },\n\n    onRefreshDash: function() {\n        const doc = this.appModel.get(\"documents\").get(this.viewModel.get(\"selectedDocumentId\"));\n        doc &&\n            doc\n                .get(\"data\")\n                .getTreeList()\n                .forEach(function(dataSource) {\n                    dataSource.stop();\n                    dataSource.isDirty = true;\n                    dataSource.start();\n                });\n    },\n\n    onResize: function() {\n        this.documentSelector.onResize();\n    },\n\n    onRevertDash: function() {\n        let self = this,\n            doc,\n            id,\n            viewState;\n\n        id = this.viewModel.get(\"selectedDocumentId\");\n        doc = this.appModel.get(\"documents\").get(id);\n        viewState = doc.get(\"viewState\");\n\n        QuickBase.ConfirmDialog.ShowConfirm({\n            dialogTitle: \"Confirm Reset\",\n            renderTemplate: () =>\n                \"Are you sure you want to revert all settings for this Dashboard to the Editor defaults?\",\n            callback: () => {\n                if (viewState instanceof QuickBase[\"DocumentViewModel\"]) {\n                    if (viewState.isNew()) {\n                        // we need to set an id attribute so Backbone calls sync delete function\n                        viewState.set(viewState.idAttribute, id, { silent: true });\n                    }\n\n                    // clear user viewstate settings on server\n                    viewState.destroyOnServer({\n                        success: function() {\n                            // clear url viewstate parameters\n                            self.appModel.get(\"router\").navigate(id, { trigger: true });\n\n                            // reset document viewstates to default values\n                            _.each(viewState.getViewStateList(), function(value) {\n                                if (value.model.get(\"_rolling\")) {\n                                    valueToSet = QuickBase[\"Helpers\"].convertRollingToDate(\n                                        value.model.get(\"_default\"),\n                                        value.model.get(\"_type\"),\n                                    );\n                                } else {\n                                    valueToSet = value.model.get(\"_default\");\n                                }\n\n                                value.model.set(\"value\", valueToSet);\n                            });\n                        },\n                        error: function() {\n                            console.log(\"can't delete user settings\", arguments);\n                        },\n                        dashboardId: doc.id,\n                    });\n                }\n            },\n        });\n    },\n\n    onSaveDash: function() {\n        let self = this,\n            id = this.viewModel.get(\"selectedDocumentId\"),\n            doc = this.appModel.get(\"documents\").get(id),\n            viewState;\n\n        this.$saveDash.addClass(\"saving\");\n\n        if (doc && _.includes([\"enabled\", \"enabled_auto\"], doc.get(\"saveViewerState\"))) {\n            // update view state\n            viewState = doc.get(\"viewState\");\n            viewState.withAllProperties = true;\n            doc.get(\"viewState\").save(\n                { id: id },\n                {\n                    error: function(data) {\n                        let error;\n\n                        self.$saveDash.removeClass(\"saving\");\n\n                        error = arguments[1] || \"No error information returned from the server.\";\n\n                        Log.Error(\"ERROR DIALOG: \", data, arguments);\n\n                        QuickBase[\"ErrorDialog\"].ShowError(error);\n                    },\n                    success: function() {\n                        delete doc.get(\"viewState\")[\"wasChanged\"];\n                        self.$saveDash.removeClass(\"saving changed\");\n                    },\n                },\n            );\n            viewState.withAllProperties = false;\n        } else {\n            console.log(\"no document to save!\", id);\n        }\n    },\n\n    onSelectedDocumentIdChanged: function() {\n        let doc, prevDoc, prevSelectedDocumentId, selectedDocumentId;\n\n        prevSelectedDocumentId = this.viewModel.previous(\"selectedDocumentId\");\n        selectedDocumentId = this.viewModel.get(\"selectedDocumentId\");\n\n        this.$shareDash.hide();\n\n        // try to remove previous events\n        if (prevSelectedDocumentId) {\n            // get prev doc\n            prevDoc = this.appModel.get(\"documents\").get(prevSelectedDocumentId);\n            if (prevDoc) {\n                // unsubscribe from events\n                this.stopListening(\n                    prevDoc.get(\"viewState\"),\n                    \"change\",\n                    this.onDocumentViewStateChanged,\n                );\n                this.stopListening(prevDoc.get(\"viewState\"), \"sync\", this.onDocumentViewStateSaved);\n                this.onDocumentViewStateSaved();\n            }\n        }\n\n        if (selectedDocumentId) {\n            // get new doc\n            doc = this.appModel.get(\"documents\").get(selectedDocumentId);\n            if (doc) {\n                // When lestening to view model change, changes happen on each view and not on documentViveModel,\n                this.currentDocViewModel = doc.get(\"viewState\");\n                // When saving documentViewModel does not have id property\n                if (this.currentDocViewModel && !this.currentDocViewModel.id) {\n                    this.currentDocViewModel.id = selectedDocumentId;\n                }\n                // subscribe to events\n                this.listenTo(doc.get(\"viewState\"), \"change\", this.onDocumentViewStateChanged);\n                this.listenTo(doc.get(\"viewState\"), \"sync\", this.onDocumentViewStateSaved);\n\n                this.$saveDash.toggle(\n                    _.includes([\"enabled\", \"enabled_auto\"], doc.get(\"saveViewerState\")),\n                );\n                this.$shareDash.toggle(doc.get(\"enableShareDashboard\"));\n            }\n        }\n    },\n\n    onShareDash: function() {\n        let self = this,\n            dashId = this.viewModel.get(\"selectedDocumentId\"),\n            dialog,\n            doc = this.appModel.get(\"documents\").get(dashId),\n            screenId = this.viewModel.get(\"selectedScreenId\"),\n            url,\n            viewStateParameters;\n\n        if (!this.appModel.has(\"shortenShareUrl\")) {\n            this.appModel.set(\"shortenShareUrl\", true, { silent: true });\n        }\n\n        if (doc && doc.get(\"enableShareDashboard\")) {\n            url = self.appModel.get(\"websiteUrl\") + \"#\" + doc.id;\n\n            // add protocol (required if user copies and pastes url)\n            if (url.indexOf(\"//\") === 0) {\n                url = location.protocol + url;\n            }\n\n            if (screenId) {\n                url += \"/\" + screenId;\n            }\n\n            viewStateParameters = doc.get(\"viewState\").getViewStateExport();\n\n            if (viewStateParameters) {\n                url += \"?viewstate=\" + encodeURIComponent(JSON.stringify(viewStateParameters));\n            }\n\n            dialog = new ShareDashDialog({\n                isLite: this.appModel.get(\"isLite\"),\n                shortenUrl: this.appModel.get(\"shortenShareUrl\"),\n                url: url,\n            });\n\n            this.listenTo(dialog, \"shortenUrlSetting\", function(value) {\n                this.appModel.set(\"shortenShareUrl\", value, { silent: true });\n            });\n        } else {\n            console.log(\"no document to share\", dashId);\n        }\n    },\n\n    onUserConfigurableChange: function() {\n        this.$customiseDash.button(\"widget\").toggle(this.viewModel.get(\"userConfigurable\"));\n    },\n\n    onWidgetsConfigured: function() {\n        this.$saveDash.addClass(\"changed\");\n    },\n});\n","/*global _,$,console,Backbone */\n\nconst Log = QuickBase[\"Log\"];\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst AreYouSureDialog = QuickBase[\"AreYouSureDialog\"].extend({\n    className: \"quick-view window are-you-sure\",\n    viewModel: null,\n\n    initialize: function(options) {\n        QuickBase[\"AreYouSureDialog\"].prototype.initialize.apply(this, arguments);\n\n        this.dashboardId = options.dashboardId;\n    },\n\n    doSave: function() {\n        const deferred = $.Deferred();\n        const viewState = this.model.get(\"viewState\");\n\n        // KXAX-22809 required for child viewstates inside a parent group\n        viewState.withAllProperties = true;\n        this.model.get(\"viewState\").save(null, {\n            dashboardId: this.dashboardId,\n            error: deferred.reject,\n            success: deferred.resolve,\n        });\n        viewState.withAllProperties = false;\n        return deferred.promise();\n    },\n\n    getPromptMessage: function() {\n        return \"There are unsaved view state changes in this dashboard.\";\n    },\n});\n","/// <reference path=\"../classes/log.js\" />\r\n/// <reference path=\"../views/AreYouSureDialog.js\" />\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst AppRouter = Backbone.Router.extend({\r\n    model: null,\r\n    previousRoutes: null,\r\n    viewModel: null,\r\n\r\n    routes: {\r\n        \":dashboardId(/)(:screenId)\": \"onDashboard\", // #dldf-sddf-sddf-sddf-sddd/dldf-sddf-sddf-sddf-sddd\r\n    },\r\n\r\n    initialize: function(options) {\r\n        this.model = options.model;\r\n        this.viewModel = options.viewModel;\r\n        this.dialogContainer = options.dialogContainer;\r\n        this.previousRoutes = [];\r\n\r\n        this.initializeEvents();\r\n    },\r\n\r\n    initializeEvents: function() {\r\n        this.on(\"route\", function() {\r\n            this.previousRoutes.push(Backbone.history.fragment);\r\n        });\r\n    },\r\n\r\n    getUserViewState: function(dashModel, queryString, callback) {\r\n        let userViewState,\r\n            printViewState,\r\n            self = this;\r\n\r\n        userViewState = new QuickBase[\"DocumentViewModel\"]({ id: dashModel.id });\r\n\r\n        // get user's saved view state from server\r\n        QuickBase.Log.Log(\"User Settings Get\");\r\n        userViewState.fetch({\r\n            success: function(viewStateModel) {\r\n                QuickBase.Log.Log(\"User Settings Completed\", viewStateModel);\r\n\r\n                // merge with url view state\r\n                const val = self.getViewstateFromQueryString(queryString);\r\n                if (val) {\r\n                    viewStateModel.set(val);\r\n                }\r\n\r\n                callback(viewStateModel);\r\n            },\r\n            error: function(viewStateModel, e) {\r\n                if (e === \"Record Not Found\") {\r\n                    QuickBase.Log.Log(\"User Settings Not Found\");\r\n                } else {\r\n                    QuickBase.Log.Error(\"User Settings Error\");\r\n                }\r\n\r\n                callback(null);\r\n            },\r\n        });\r\n    },\r\n\r\n    getViewstateFromQueryString: function(queryString) {\r\n        const rxMatch = /(^|&)viewstate=([^&;]+?)(&|;|$)/.exec(queryString);\r\n        let toReturn = null;\r\n\r\n        if (rxMatch) {\r\n            toReturn = JSON.parse(decodeURIComponent(rxMatch[2]));\r\n\r\n            // decompress & parse\r\n            if (toReturn[\".csettings\"]) {\r\n                toReturn[\".settings\"] = JSON.parse(\r\n                    QuickBase.Tools.decompress(\r\n                        QuickBase.Tools.decodeFromBase64(toReturn[\".csettings\"])\r\n                    )\r\n                );\r\n                delete toReturn[\".csettings\"];\r\n            }\r\n        }\r\n\r\n        return toReturn;\r\n    },\r\n\r\n    navigateToDash: function(dashboardId, screenId, queryString) {\r\n        let self = this,\r\n            callback,\r\n            currentDashId = this.viewModel.get(\"selectedDocumentId\"),\r\n            dashboard = this.model.get(\"documents\").get(dashboardId);\r\n\r\n        if (dashboard) {\r\n            callback = function(model) {\r\n                const viewStateParameters = self.getViewstateFromQueryString(queryString);\r\n\r\n                // TODO - review incomingViewState mechanism\r\n                self.viewModel.set(\"incomingViewState\", viewStateParameters, { silent: true });\r\n\r\n                // need to trigger update for incoming viewstate if selected doc won't changed\r\n                if (currentDashId === dashboardId && viewStateParameters) {\r\n                    self.viewModel.trigger(\"processIncomingViewState\", model);\r\n                }\r\n                // end TODO\r\n\r\n                if (!screenId) {\r\n                    const screen =\r\n                        model.get(\"screens\").findWhere({ isDefault: true }) ||\r\n                        model.get(\"screens\").first();\r\n                    if (screen) {\r\n                        screenId = screen.id;\r\n                    } else {\r\n                        Log.Error(\"no default screen, no screens at all\");\r\n                    }\r\n                }\r\n\r\n                // change screen\r\n                self.viewModel.set({\r\n                    selectedDocumentId: dashboardId,\r\n                    selectedScreenId: screenId,\r\n                });\r\n\r\n                // let the document know that the initial view state is set\r\n                model.trigger(\"view-state-init\");\r\n            };\r\n\r\n            // fetch dashboard & get user view state if different\r\n            if (currentDashId !== dashboardId) {\r\n                dashboard.fetch({\r\n                    success: function(model) {\r\n                        self.getUserViewState(model, queryString, function(userViewState) {\r\n                            self.updateDocumentViewState(model, userViewState);\r\n                            callback(model);\r\n                        });\r\n                    },\r\n                    error: function() {\r\n                        alert(t(\"error downloading dashboard\"));\r\n                    },\r\n                    silent: true,\r\n                });\r\n            } else callback(dashboard);\r\n        } else {\r\n            Log.Error(\"dashboard NOT found (?)\");\r\n\r\n            if (!currentDashId) {\r\n                // no selected document set - redirect\r\n                if (this.model.get(\"documents\").length > 0) {\r\n                    this.navigate(this.model.get(\"documents\").first().id, { trigger: true });\r\n                } else {\r\n                    Log.Error(\r\n                        \"dashboard doesn't exist or user doesnt have required permissions. (1)\",\r\n                    );\r\n\r\n                    $(document)\r\n                        .find(\".loadingScreen\")\r\n                        .css({ display: \"none\" });\r\n\r\n                    this.dialog = $(\r\n                        \"<div>The Selected dashboard does not exist or \" +\r\n                            \"user does not have required permissions or no dashboards are \" +\r\n                            \"permissioned to this user.</div>\",\r\n                    ).dialog({\r\n                        autoOpen: true,\r\n                        height: 350,\r\n                        width: 350,\r\n                        modal: true,\r\n                        title: \"Error loading Dashboard\",\r\n                    });\r\n                }\r\n            } else {\r\n                Log.Error(\"dashboard doesn't exist or user doesnt have required permissions. (2)\");\r\n            }\r\n        }\r\n    },\r\n\r\n    onDashboard: function(dashboardId, screenId, queryString) {\r\n        let areYouSureDialog,\r\n            currentDashId = this.viewModel.get(\"selectedDocumentId\"),\r\n            currentDash = this.model.get(\"documents\").find(function(model) {\r\n                return model.id === currentDashId;\r\n            });\r\n\r\n        if (\r\n            currentDash &&\r\n            currentDashId !== dashboardId &&\r\n            currentDash.get(\"unsavedViewerPrompt\") &&\r\n            currentDash.get(\"viewState\")[\"wasChanged\"]\r\n        ) {\r\n            areYouSureDialog = new AreYouSureDialog({\r\n                container: this.dialogContainer,\r\n                dashboardId: currentDashId,\r\n                model: currentDash,\r\n                userClass: \"quick-view\",\r\n            });\r\n\r\n            areYouSureDialog.on(\r\n                \"close\",\r\n                function(closeArgs) {\r\n                    if (closeArgs == \"cancel\") {\r\n                        // discard last route request and set previous one in url\r\n                        this.previousRoutes.pop();\r\n                        this.navigate(_.last(this.previousRoutes), { replace: true });\r\n\r\n                        if (this.onNavCancel) {\r\n                            // may be set by object calling for navigate\r\n                            this.onNavCancel();\r\n                            // forget onNavCancel callback\r\n                            this.onNavCancel = null;\r\n                        }\r\n                    } else {\r\n                        this.navigateToDash(dashboardId, screenId, queryString);\r\n                        this.previousRoutes = [Backbone.history.fragment];\r\n                    }\r\n                }.bind(this),\r\n            );\r\n        } else {\r\n            this.navigateToDash(dashboardId, screenId, queryString);\r\n        }\r\n    },\r\n\r\n    updateDocumentViewState: function(doc, viewStateFromURL) {\r\n        let componentSettings, componentSetting, dashboardViewState, processNode;\r\n\r\n        dashboardViewState = doc.get(\"viewState\");\r\n        componentSettings = dashboardViewState.get(\".settings\");\r\n\r\n        processNode = function(value, key) {\r\n            let valueToSet,\r\n                viewStateModel = dashboardViewState.getByPath(key);\r\n\r\n            if (_.isObject(value)) {\r\n                if (_.isFunction(value.get)) {\r\n                    // DocumentViewModel, use value attribute\r\n                    valueToSet = value.get(\"value\");\r\n                } else if (value[\"_viewType\"]) {\r\n                    // object representing a DocumentViewModel, use value property\r\n                    valueToSet = value[\"value\"];\r\n                } else {\r\n                    // a folder, process children\r\n                    _.each(value, function(childValue, childKey) {\r\n                        processNode(childValue, key + \"/\" + childKey);\r\n                    });\r\n                    return false;\r\n                }\r\n            } else {\r\n                valueToSet = value;\r\n            }\r\n\r\n            if (viewStateModel && !_.isUndefined(valueToSet)) {\r\n                if (viewStateModel instanceof Backbone.Model) {\r\n                    viewStateModel.set(\"value\", valueToSet);\r\n                } else Log.Warn('AppRouter: Invalid view state at \"' + key + '\"', viewStateModel);\r\n            }\r\n        };\r\n\r\n        if (viewStateFromURL) {\r\n            _.each(viewStateFromURL.attributes, function(value, key) {\r\n                if (key !== \".settings\") {\r\n                    processNode(value, key);\r\n                } else {\r\n                    // settings object\r\n                    if (componentSettings) {\r\n                        _.each(value.attributes, function(setting, componentId) {\r\n                            componentSetting = componentSettings.get(componentId);\r\n\r\n                            if (_.isUndefined(componentSetting)) {\r\n                                componentSetting = new Backbone.Model();\r\n                                componentSettings.set(componentId, componentSetting);\r\n                            }\r\n\r\n                            componentSetting.set(setting.attributes);\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    },\r\n});\r\n","/// <reference path=\"../templates/combined.ts\" />\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst Notificator = Backbone.View.extend({\n    className: \"notificator\",\n\n    initialize: function(options) {\n        const self = this;\n\n        this.appModel = options.appModel;\n        this.render();\n\n        // if (\"Notification\" in window) {\n        //     if (Notification.permission === \"granted\") {\n        //         self.useNotificationApi = true;\n        //     } else {\n        //         Notification.requestPermission().then(function(result) {\n        //             if (result === \"granted\") {\n        //                 self.useNotificationApi = true;\n        //             }\n        //         });\n        //     }\n        // }\n    },\n\n    notify: function(title, $html) {\n        // if (this.useNotificationApi) {\n        //     var notification = new Notification($html);\n        // } else {\n        this.$title.text(title);\n\n        this.$items.append($html);\n\n        this.$panel.fadeIn(\"slow\");\n        //}\n    },\n\n    onClose: function() {\n        const self = this;\n        this.$panel.fadeOut(\"slow\", function() {\n            // empty items\n            self.$items.html(\"\");\n        });\n    },\n\n    render: function() {\n        let renderModel;\n\n        this.$el.addClass(this.className);\n        this.$el.html(T.Notificator());\n\n        this.$title = this.$(\".title\");\n        this.$items = this.$(\".items\");\n        this.$panel = this.$(\".panel\");\n\n        this.$close = this.$(\".close-button\");\n        this.$close\n            .button({\n                text: false,\n                icons: {\n                    primary: \"fa fa-times\",\n                },\n            })\n            .click($.proxy(this.onClose, this));\n\n        this.$panel.hide();\n\n        return this;\n    },\n});\n","/// <reference path=\"../templates/combined.ts\" />\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst FailedLoginsNotification = Backbone.View.extend({\n    className: \"failed-logins\",\n\n    initialize: function(options) {\n        this.appModel = options.appModel;\n        this.render();\n    },\n\n    render: function() {\n        const renderModel = this.model.toJSON();\n\n        _.each(renderModel.rows, function(item) {\n            const m = Tools.convertKDBTemporalToMoment(item.time);\n            item.time = m.format(\"YYYY-MM-DD HH:mm:ss\");\n            item.timeSort = m.valueOf();\n        });\n\n        renderModel.rows = _.sortBy(renderModel.rows, \"timeSort\").reverse();\n\n        $(this.$el).css(\"max-height\", $(\".quick-base\").height() / 2);\n\n        this.$el.addClass(this.className);\n        this.$el.html(T.FailedLoginsNotification(renderModel));\n\n        return this;\n    },\n});\n","(function(Backbone) {\n// A simple module to replace `Backbone.sync` with *localStorage*-based\n// persistence. Models are given GUIDS, and saved into a JSON object. Simple\n// as that.\n\n// Generate four random hex digits.\nfunction S4() {\n   return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\n};\n\n// Generate a pseudo-GUID by concatenating random hexadecimal.\nfunction guid() {\n   return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\n};\n\nfunction isObject(item) {\n  return item === Object(item);\n}\n\nfunction contains(array, item) {\n  var i = array.length;\n  while (i--) if (array[i] === item) return true;\n  return false;\n}\n\nfunction extend(obj, props) {\n  for (var key in props) obj[key] = props[key]\n  return obj;\n}\n\nfunction result(object, property) {\n    if (object == null) return void 0;\n    var value = object[property];\n    return (typeof value === 'function') ? object[property]() : value;\n}\n\n// Our Store is represented by a single JS object in *localStorage*. Create it\n// with a meaningful name, like the name you'd give a table.\n// window.Store is deprectated, use Backbone.LocalStorage instead\nBackbone.LocalStorage = window.Store = function(name, serializer) {\n  if( !this.localStorage ) {\n    throw \"Backbone.localStorage: Environment does not support localStorage.\"\n  }\n  this.name = name;\n  this.serializer = serializer || {\n    serialize: function(item) {\n      return isObject(item) ? JSON.stringify(item) : item;\n    },\n    // fix for \"illegal access\" error on Android when JSON.parse is passed null\n    deserialize: function (data) {\n      return data && JSON.parse(data);\n    }\n  };\n  var store = this.localStorage().getItem(this.name);\n  this.records = (store && store.split(\",\")) || [];\n};\n\nextend(Backbone.LocalStorage.prototype, {\n\n  // Save the current state of the **Store** to *localStorage*.\n  save: function() {\n    this.localStorage().setItem(this.name, this.records.join(\",\"));\n  },\n\n  // Add a model, giving it a (hopefully)-unique GUID, if it doesn't already\n  // have an id of it's own.\n  create: function(model) {\n    if (!model.id && model.id !== 0) {\n      model.id = guid();\n      model.set(model.idAttribute, model.id);\n    }\n    this.localStorage().setItem(this._itemName(model.id), this.serializer.serialize(model));\n    this.records.push(model.id.toString());\n    this.save();\n    return this.find(model);\n  },\n\n  // Update a model by replacing its copy in `this.data`.\n  update: function(model) {\n    this.localStorage().setItem(this._itemName(model.id), this.serializer.serialize(model));\n    var modelId = model.id.toString();\n    if (!contains(this.records, modelId)) {\n      this.records.push(modelId);\n      this.save();\n    }\n    // KXAX-22869 KH\n    // backbone save calls, sync which returns the serialised properties\n    // to be set(json) back to the model. \n    // https://backbonejs.org/docs/backbone.html#section-87\n    // in the case of delta sync is overridden to pass emptyin success() so doesn't alter the model\n    // localStorage does return the json and will override the attributes, so we need to prevent this\n    return model.attributes;\n  },\n\n  // Retrieve a model from `this.data` by id.\n  find: function(model) {\n    return this.serializer.deserialize(this.localStorage().getItem(this._itemName(model.id)));\n  },\n\n  // Return the array of all models currently in storage.\n  findAll: function() {\n    var result = [];\n    for (var i = 0, id, data; i < this.records.length; i++) {\n      id = this.records[i];\n      data = this.serializer.deserialize(this.localStorage().getItem(this._itemName(id)));\n      if (data != null) result.push(data);\n    }\n    return result;\n  },\n\n  // Delete a model from `this.data`, returning it.\n  destroy: function(model) {\n    this.localStorage().removeItem(this._itemName(model.id));\n    var modelId = model.id.toString();\n    for (var i = 0, id; i < this.records.length; i++) {\n      if (this.records[i] === modelId) {\n        this.records.splice(i, 1);\n      }\n    }\n    this.save();\n    return model;\n  },\n\n  localStorage: function() {\n    return localStorage;\n  },\n\n  // Clear localStorage for specific collection.\n  _clear: function() {\n    var local = this.localStorage(),\n      itemRe = new RegExp(\"^\" + this.name + \"-\");\n\n    // Remove id-tracking item (e.g., \"foo\").\n    local.removeItem(this.name);\n\n    // Match all data items (e.g., \"foo-ID\") and remove.\n    for (var k in local) {\n      if (itemRe.test(k)) {\n        local.removeItem(k);\n      }\n    }\n\n    this.records.length = 0;\n  },\n\n  // Size of localStorage.\n  _storageSize: function() {\n    return this.localStorage().length;\n  },\n\n  _itemName: function(id) {\n    return this.name+\"-\"+id;\n  }\n\n});\n\n// localSync delegate to the model or collection's\n// *localStorage* property, which should be an instance of `Store`.\n// window.Store.sync and Backbone.localSync is deprecated, use Backbone.LocalStorage.sync instead\nBackbone.LocalStorage.sync = window.Store.sync = Backbone.localSync = function(method, model, options) {\n  var store = result(model, 'localStorage') || result(model.collection, 'localStorage');\n\n  var resp, errorMessage;\n  //If $ is having Deferred - use it.\n  var syncDfd = Backbone.$ ?\n    (Backbone.$.Deferred && Backbone.$.Deferred()) :\n    (Backbone.Deferred && Backbone.Deferred());\n\n  try {\n\n    switch (method) {\n      case \"read\":\n        resp = model.id != undefined ? store.find(model) : store.findAll();\n        break;\n      case \"create\":\n        resp = store.create(model);\n        break;\n      case \"update\":\n        resp = store.update(model);\n        break;\n      case \"delete\":\n        resp = store.destroy(model);\n        break;\n    }\n\n  } catch(error) {\n    if (error.code === 22 && store._storageSize() === 0)\n      errorMessage = \"Private browsing is unsupported\";\n    else\n      errorMessage = error.message;\n  }\n\n  if (resp) {\n    if (options && options.success) {\n      if (Backbone.VERSION === \"0.9.10\") {\n        options.success(model, resp, options);\n      } else {\n        options.success(resp);\n      }\n    }\n    if (syncDfd) {\n      syncDfd.resolve(resp);\n    }\n\n  } else {\n    errorMessage = errorMessage ? errorMessage\n                                : \"Record Not Found\";\n\n    if (options && options.error)\n      if (Backbone.VERSION === \"0.9.10\") {\n        options.error(model, errorMessage, options);\n      } else {\n        options.error(errorMessage);\n      }\n\n    if (syncDfd)\n      syncDfd.reject(errorMessage);\n  }\n\n  // add compatibility with $.ajax\n  // always execute callback for success and error\n  if (options && options.complete) options.complete(resp);\n\n  return syncDfd && syncDfd.promise();\n};\n\nBackbone.ajaxSync = Backbone.sync;\n\nBackbone.getSyncMethod = function(model, options) {\n  var forceAjaxSync = options && options.ajaxSync;\n\n  if(!forceAjaxSync && (result(model, 'localStorage') || result(model.collection, 'localStorage'))) {\n    return Backbone.localSync;\n  }\n\n  return Backbone.ajaxSync;\n};\n\n// Override 'Backbone.sync' to default to localSync,\n// the original 'Backbone.sync' is still available in 'Backbone.ajaxSync'\nBackbone.sync = function(method, model, options) {\n  return Backbone.getSyncMethod(model, options).apply(this, [method, model, options]);\n};\n\nreturn Backbone.LocalStorage;\n})(Backbone);\n","/*global AppModel, MutationObserver*/\n/// <reference path=\"../templates/combined.ts\" />\n/// <reference path=\"../models/AppModel.js\" />\n/// <reference path=\"../lib/backbone.localStorage.custom.js\" />\n/// <reference path=\"../views/MainToolbar.js\" />\n/// <reference path=\"../classes/AppRouter.js\" />\n/// <reference path=\"../views/Notificator.js\" />\n/// <reference path=\"../views/FailedLoginsNotification.js\" />\n\nconst Tools = QuickBase.Tools;\n\nconst App = Backbone.View.extend({\n    DOCUMENT_TITLE: {\n        SEPARATOR: \" - \",\n        SUFFIX: \"Dashboards\",\n    },\n    THEMES: [\n        {\n            id: \"kx-darkroom\",\n            name: \"Dark\",\n        },\n        {\n            id: \"kx-light\",\n            name: \"Light\",\n        },\n    ],\n\n    $documentDialogPanel: null,\n    $documentViewDiv: null,\n    $environmentDialogPanel: null,\n    loadingScreen: null,\n\n    documentView: null,\n    environmentTheme: null,\n    viewModel: null,\n    router: null,\n\n    appid: \"dashboards\",\n\n    hideLoadingScreen: function() {\n        if (this.loadingScreen) this.loadingScreen.remove();\n    },\n\n    initialize: function(options) {\n        let self = this,\n            initCallback,\n            path;\n\n        // check saml\n        if (document.location.href.indexOf(\"auth=saml\") !== -1) {\n            this.saml = true;\n        }\n\n        // external resize handler\n        window.resizeHandler = function() {\n            window.dispatchEvent(new Event(\"resize\"));\n        };\n\n        // prevent backspace triggering a browser back event\n        QuickBase[\"Helpers\"].preventBackspaceBack();\n\n        // Get url path to dashboards\n        path =\n            document.location.pathname.indexOf(\".\") !== -1\n                ? document.location.pathname.substr(\n                      0,\n                      document.location.pathname.lastIndexOf(\"/\") + 1,\n                  )\n                : document.location.pathname;\n\n        path = path.replace(\"quickview/\", \"\");\n\n        // if lite\n        if (options.isLite) {\n            QuickBase[\"Document\"].prototype.sync = QuickBase[\"DashClientLib\"].documentSync;\n            QuickBase[\"DocumentCollection\"].prototype.sync =\n                QuickBase[\"DashClientLib\"].documentCollectionSync;\n            QuickBase[\"DocumentViewModel\"].prototype.localStorage = new Backbone.LocalStorage(\n                \"viewstate\",\n            );\n            _.extend(QuickBase[\"DocumentDataModel\"].prototype, QuickBase[\"DashClientLib\"]);\n            QuickBase[\"DeltaClientLib\"].PIVOT_SOURCE_CODE =\n                QuickBase[\"DashClientLib\"].PIVOT_SOURCE_CODE;\n        } else {\n            QuickBase[\"Document\"].prototype.sync = QuickBase[\"DeltaClientLib\"].documentSync;\n            QuickBase[\"DocumentCollection\"].prototype.sync =\n                QuickBase[\"DeltaClientLib\"].documentCollectionSync;\n            QuickBase[\"DocumentViewModel\"].prototype.sync =\n                QuickBase[\"DeltaClientLib\"].documentViewSync;\n        }\n\n        this.model = new AppModel(\n            $.extend(\n                {\n                    documents: new QuickBase.DocumentCollection(),\n                    websiteUrl: \"//\" + document.location.host + path,\n                    saml: this.saml,\n                },\n                options,\n            ),\n        );\n\n        this.viewModel = new QuickBase[\"AppViewModel\"]({\n            buildMode: false,\n        }); // default app view\n\n        if (options.printMode) {\n            this.$el.addClass(\"print-mode\");\n        }\n\n        initCallback = function(parameters) {\n            // set parameters\n            self.model.set(\"language\", parameters[\"language\"] || \"en\");\n\n            self.render();\n\n            // set default dialog container\n            $.extend($.ui.dialog.prototype.options, {\n                appendTo: self.$documentDialogPanel,\n            });\n            self.setThemeFromCookie();\n\n            self.model.get(\"components\").reset(options.components);\n            options.deltaToken = options.deltaToken || $.cookie(\"deltaToken\");\n\n            if (self.model.get(\"isLite\")) {\n                QuickBase[\"DashClient\"].client = new QuickBase[\"DashClient\"](options);\n                QuickBase[\"DeltaClientLib\"] = QuickBase[\"DashClient\"];\n            } else if (self.saml) {\n                self.initializeDeltaClient(\n                    null,\n                    null,\n                    function(e) {\n                        alert(e);\n                    },\n                    null,\n                    true,\n                );\n            } else if (options && options.delta) {\n                self.model.set({\n                    userName: options.delta.username,\n                    DeltaClientHost: options.delta.options.host,\n                    DeltaClientPort: options.delta.options.port,\n                    DeltaClientSecure: options.delta.options.secure,\n                    DeltaClientFromUrl: options.delta.options.fromURL,\n                });\n\n                QuickBase[\"DeltaClientLib\"].initializeDeltaClientCopy(\n                    options.delta.client,\n                    self.model.get(\"DeltaClientHost\"),\n                    self.model.get(\"DeltaClientPort\"),\n                    self.model.get(\"DeltaClientSecure\"),\n                    self.model.get(\"DeltaClientFromUrl\"),\n                    options.delta.username,\n                    options.delta.password,\n                    null,\n                    function(e) {\n                        alert(e);\n                    },\n                    self.appid,\n                );\n            } else if (options.deltaToken || options.credentials) {\n                $(QuickBase[\"DeltaClientLib\"]).one(\"DeltaClientLogin\", function(e) {\n                    self.model.set(\"userName\", QuickBase[\"DeltaClientLib\"].deltaClient.user());\n\n                    // extend deltaToken expiry\n                    if (options.deltaToken) {\n                        $.cookie(\"deltaToken\", options.deltaToken, {\n                            expires: 30,\n                            path: \"/\",\n                        });\n                    }\n                });\n\n                self.initializeDeltaClient(\n                    options.credentials ? options.credentials.username : null,\n                    options.credentials ? options.credentials.password : null,\n                    null,\n                    options.deltaToken,\n                );\n            } else {\n                self.showLogin();\n            }\n\n            // Add dashboard theme to new datepicker, select2 divs\n            if (\"MutationObserver\" in window) {\n                self.observer = new MutationObserver(function(mutations) {\n                    for (let i = 0; i < mutations.length; i++) {\n                        const addedNodes = mutations[i].addedNodes;\n                        if (!addedNodes) continue;\n                        for (let j = 0; j < addedNodes.length; j++) {\n                            const node = addedNodes[j];\n                            if (node.id === \"ui-datepicker-div\") {\n                                self.$documentDialogPanel[0].appendChild(node);\n                            } else if (\n                                _.isString(node.className) &&\n                                node.className.indexOf(\"select2-container\") !== -1\n                            ) {\n                                if (\n                                    node.className.indexOf(\n                                        \"select2-container--document-selector\",\n                                    ) !== -1 ||\n                                    node.className.indexOf(\n                                        \"select2-container--dashboards-properties\",\n                                    ) !== -1 ||\n                                    node.className.indexOf(\"select2--environment\") !== -1\n                                ) {\n                                    self.$environmentDialogPanel[0].appendChild(node);\n                                } else {\n                                    self.$documentDialogPanel[0].appendChild(node);\n                                }\n                            }\n                        }\n                    }\n                });\n\n                self.observer.observe(document.querySelector(\"body\"), {\n                    attributes: false,\n                    childList: true,\n                    characterData: false,\n                });\n            }\n\n            self.initializeEvents();\n            self.fixSelect2DialogIssue();\n        };\n\n        try {\n            QuickBase[\"InitializeQuickbase\"](initCallback);\n        } catch (error) {\n            console.log(\"error loading quickbase\", error);\n            if (_.isFunction()) {\n                // dummy translate function\n                window.t = function(key) {\n                    return key;\n                };\n                initCallback();\n            }\n        }\n\n        window.startPdfCreation = this.startPdfCreation;\n    },\n\n    initializeEvents: function() {\n        const self = this,\n            client = this.model.get(\"isLite\")\n                ? QuickBase[\"DashClient\"].client\n                : QuickBase[\"DeltaClientLib\"];\n\n        $(window).resize($.proxy(this.onResize, this));\n\n        this.listenTo(this.toolbar, \"themeChange\", this.setThemeFromCookie);\n\n        // reconnect datasources on client reconnect, see KXAX-2942\n        $(client).one(\"DeltaClientConnect\", function() {\n            // this is first login, reconnect events coming below\n            self.hideLoadingScreen();\n            $(client).on(\"DeltaClientConnect\", function() {\n                self.hideLoadingScreen();\n                const doc = self.getCurrentDocument();\n                doc &&\n                    doc\n                        .get(\"data\")\n                        .getTreeList()\n                        .forEach(function(dataSource) {\n                            dataSource.stop();\n                            dataSource.start();\n                        });\n            });\n        });\n\n        $(client).on(\"DeltaClientDisconnect\", function(e, msg) {\n            const doc = self.getCurrentDocument();\n            msg = msg ? _.startCase(msg) + \": \" : \"\";\n            self.showLoadingScreen(msg + t(\"reconnecting...\"));\n\n            if (doc) {\n                self.getCurrentDocument()\n                    .get(\"data\")\n                    .getTreeList()\n                    .forEach(function(dataSource) {\n                        dataSource.stop();\n                    });\n            }\n        });\n\n        $(client).one(\"DeltaClientLogin\", $.proxy(this.onDeltaClientLogin, this));\n\n        this.listenTo(this.viewModel, \"change:buildMode\", this.onBuildModeChange);\n        this.listenTo(this.viewModel, \"change:selectedDocumentId\", this.onDocumentChanged);\n        this.listenTo(this.viewModel, \"processIncomingViewState\", this.processIncomingViewState);\n\n        // prompt user if they navigate away from an unsaved dashboard\n        window.onbeforeunload = function(e) {\n            let doc = self.getCurrentDocument(),\n                message = \"There are unsaved changes in this dashboard.\",\n                showPrompt = false;\n\n            doc &&\n                doc\n                    .get(\"data\")\n                    .getTreeList()\n                    .forEach(function(dataSource) {\n                        dataSource.stop();\n                    });\n\n            if (doc && doc.get(\"unsavedViewerPrompt\")) {\n                if (doc.get(\"viewState\")[\"wasChanged\"]) {\n                    showPrompt = true;\n                } else if (\n                    _.some(QuickBase[\"ComponentView\"].getInstances(), function(componentView) {\n                        return componentView.beforeRemove();\n                    })\n                ) {\n                    showPrompt = true;\n                }\n            }\n\n            if (showPrompt) {\n                (e || window.event).returnValue = message; //Gecko + IE\n                return message; //Webkit, Safari, Chrome\n            }\n\n            return undefined;\n        };\n    },\n\n    initializeDeltaClient: function(username, password, errorCallback, token, saml, forceLogin) {\n        const self = this;\n\n        QuickBase[\"DeltaClientLib\"].initializeDeltaClient(\n            self.model.get(\"DeltaClientHost\"),\n            self.model.get(\"DeltaClientPort\"),\n            self.model.get(\"DeltaClientSecure\"),\n            self.model.get(\"DeltaClientFromUrl\"),\n            username,\n            password,\n            null,\n            function(e) {\n                if (_.isFunction(errorCallback)) {\n                    errorCallback(e);\n                } else {\n                    const errorMessage = _.isString(e) ? e.toLowerCase() : null;\n\n                    if (e === \"loginRequired\") {\n                        self.showLogin();\n                    } else if (e === \"userSessionLimit\") {\n                        self.showForceLoginPrompt(function() {\n                            self.initializeDeltaClient(\n                                username,\n                                password,\n                                errorCallback,\n                                token,\n                                saml,\n                                forceLogin,\n                            );\n                        });\n                    } else if (\n                        (errorMessage && _.some([\"login\", \"token\", \"session\", \"websocket\"]),\n                        function(keyword) {\n                            return errorMessage.indexOf(keyword) !== -1;\n                        })\n                    ) {\n                        self.showLogin(e);\n                    }\n                }\n            },\n            token,\n            self.appid,\n            true,\n            !!saml,\n            !!forceLogin,\n        );\n    },\n\n    fixSelect2DialogIssue: function() {\n        // http://stackoverflow.com/questions/19787982/select2-plugin-and-jquery-ui-modal-dialogs\n        if ($.ui && $.ui.dialog && $.ui.dialog.prototype._allowInteraction) {\n            const ui_dialog_interaction = $.ui.dialog.prototype._allowInteraction;\n            $.ui.dialog.prototype._allowInteraction = function(e) {\n                if ($(e.target).closest(\".select2-dropdown\").length) return true;\n                return ui_dialog_interaction.apply(this, arguments);\n            };\n        }\n    },\n\n    getAPIPrefix: function() {\n        return location.protocol === \"file:\" || \"FSBL\" in window\n            ? \"http://localhost:10001/api/\"\n            : \"/api/\";\n    },\n\n    getCurrentDocument: function() {\n        const currentDashId = this.viewModel.get(\"selectedDocumentId\"),\n            currentDash = this.model.get(\"documents\").find(function(model) {\n                return model.id === currentDashId;\n            });\n        return currentDash;\n    },\n\n    onBuildModeChange: function() {\n        this.$el.toggleClass(\"buildMode\", this.viewModel.get(\"buildMode\"));\n    },\n\n    onDocumentChanged: function() {\n        let self = this,\n            doc,\n            theme,\n            title,\n            themeSwitchable;\n\n        if (this.viewModel.get(\"selectedDocumentId\")) {\n            doc = this.model.get(\"documents\").get(this.viewModel.get(\"selectedDocumentId\"));\n            themeSwitchable = doc.get(\"themeSwitchable\");\n            this.viewModel.set(\"themeSwitchable\", themeSwitchable);\n            if (window.isPDF) {\n                const d = this.model.get(\"documents\").get(this.viewModel.get(\"selectedDocumentId\"));\n\n                if (d) {\n                    $(\"html\").addClass(d.get(\"dashboardTheme\"));\n                }\n\n                if (doc.get(\"relativeHeight\")) {\n                    // toggle class\n                    $(\"html\").toggleClass(\"one-page\", true);\n                } else {\n                    $(\"html\").toggleClass(\"one-page\", false);\n                }\n            } else {\n                $(\"html\").toggleClass(\"one-page\", false);\n            }\n\n            // re-create document view\n            this.resetDocumentView(doc);\n\n            this.onResize();\n\n            this.processIncomingViewState(doc);\n\n            this.viewModel.set(\"userConfigurable\", false);\n        }\n\n        if (doc) {\n            if (!themeSwitchable) {\n                theme = doc.get(\"dashboardTheme\");\n\n                if (theme !== \"None\") {\n                    this.viewModel.set(\"DashboardTheme\", theme);\n\n                    this.setDocumentTheme(theme);\n                    this.setEnvironmentTheme(theme);\n                }\n            } else {\n                this.setThemeFromCookie();\n            }\n            title = doc.get(\"name\") + this.DOCUMENT_TITLE.SEPARATOR + this.DOCUMENT_TITLE.SUFFIX;\n        } else {\n            title = this.DOCUMENT_TITLE.SUFFIX;\n        }\n\n        $(document).attr(\"title\", title);\n    },\n\n    onDeltaClientLogin: function() {\n        // fetch user documents\n        Log.Log(\"Dash Documents Fetch\");\n        this.model.get(\"documents\").fetch({\n            success: $.proxy(this.onDocumentsFetched, this),\n            error: function() {\n                // TODO handle errors\n                alert(\"document fetch error\");\n            },\n            reset: true,\n        });\n\n        // update user components\n        if (!this.model.get(\"isLite\")) {\n            // set user name\n            this.model.set(\"userName\", QuickBase[\"DeltaClientLib\"].username);\n\n            // update components\n            this.updateUserComponents();\n\n            //Populate Delta Client Information for About Dialog\n            this.onPopulateDeltaClientInformation();\n\n            // show failed login attempts\n            if (QuickBase.DeltaClientLib.showLastLoginAttempts) {\n                this.onShowLastLoginAttempts();\n            }\n        } else this.model.set(\"userName\", \"User\");\n    },\n\n    onPopulateDeltaClientInformation: function() {\n        const queryStr = \".ui.controlDetails\",\n            self = this;\n        QuickBase.DeltaClientLib.getAPIQueryData(\n            \"kdb\",\n            undefined,\n            queryStr,\n            [],\n            function(result) {\n                self.model.set(\n                    \"dashboardControlDetails\",\n                    result.rows.reduce(function(ans, x) {\n                        ans[x.Property] = _.isArray(x.Value) ? x.Value.join(\"\") : x.Value;\n                        return ans;\n                    }, {}),\n                );\n            },\n            function(result) {\n                console.log(\"Error Fetching Delta Client Information:\", result);\n            },\n            100,\n            false,\n        );\n    },\n\n    onDocumentsFetched: function() {\n        Log.Log(\"Dash Documents Complete\");\n        // init router\n        this.router = new AppRouter({\n            dialogContainer: this.$environmentDialogPanel,\n            model: this.model,\n            viewModel: this.viewModel,\n        });\n        this.model.set(\"router\", this.router);\n\n        // start history & add base if using push-state\n        const pushStateBase = this.model.get(\"pushStateBase\");\n        if (pushStateBase) {\n            const base = document.createElement(\"base\");\n            base.setAttribute(\"href\", pushStateBase);\n            document.getElementsByTagName(\"head\")[0].appendChild(base);\n        }\n        Backbone.history.start(\n            pushStateBase ? { pushState: !!pushStateBase, root: pushStateBase } : undefined,\n        );\n\n        // at this point if there is no # tag in the url nothing will happen\n        if (Backbone.history.fragment.length <= 0) {\n            // get selected documetnt id\n            let id = this.viewModel.get(\"selectedDocumentId\");\n            if (!id) {\n                // no selected document id\n                const sortedDashes = this.model.get(\"documents\").getSortedDocuments();\n\n                if (sortedDashes.length > 0) {\n                    id = sortedDashes[0].id;\n                }\n            }\n\n            // no dashboards\n            if (!id) {\n                Log.Error(\"this user doesn't have any dashboards\");\n            } else {\n                // navigate to dash\n                this.router.navigate(id, { trigger: true });\n            }\n        }\n\n        this.hideLoadingScreen();\n    },\n\n    onResize: function() {\n        this.documentView && this.documentView.onResize();\n        if (this.toolbar && this.toolbar.onResize) {\n            this.toolbar.onResize();\n        }\n    },\n\n    onShowLastLoginAttempts: function() {\n        // get data here and pass results to notificator\n        let queryStr,\n            level = QuickBase.DeltaClientLib.showLastLoginAttempts,\n            msg = \"\",\n            self = this;\n\n        if (level === \"failures\" || level === \"true\") {\n            // only failures\n            queryStr = \".session.getFailedLoginsUI\";\n            msg = \"Unsuccessful login attempts:\";\n        } else if (level === \"all\") {\n            // last 10\n            queryStr = \".session.getLoginsUI\";\n            msg = \"Last 10 login attempts:\";\n        } else {\n            //} if (showLastLoginAttempts === \"none\") {\n            // nothing\n            return;\n        }\n\n        QuickBase.DeltaClientLib.getAPIQueryData(\n            \"kdb\",\n            undefined,\n            queryStr,\n            [],\n            function(result) {\n                let model, rows, view;\n\n                rows = _.filter(result.rows, function(row) {\n                    return row.machineID && row.machineID.length > 0;\n                });\n\n                if (rows.length > 0) {\n                    view = new FailedLoginsNotification({\n                        appModel: self.model,\n                        model: new Backbone.Model({\n                            rows: rows,\n                        }),\n                    });\n\n                    self.notificator.notify(msg, view.$el);\n                }\n            },\n            function(result) {\n                //alert(\"error\", result);\n                console.log(\"show last login attempts error:\", result);\n            },\n            100,\n            false,\n        );\n    },\n\n    processIncomingViewState: function(docModel) {\n        const incomingViewState = this.viewModel.get(\"incomingViewState\");\n\n        if (incomingViewState) {\n            _.each(incomingViewState, function(value, key) {\n                const viewStateModel = docModel.get(\"viewState\").getByPath(key);\n\n                if (viewStateModel) {\n                    if (key === \".settings\") {\n                        // these need to be set on the component's model within .settings\n                        _.each(value, function(settingsValue, settingskey) {\n                            let componentSettingsModel = viewStateModel.get(settingskey);\n\n                            if (componentSettingsModel) {\n                                componentSettingsModel.set(settingsValue);\n                            } else {\n                                // create a new .settings entry if it doesn't exist\n                                // e.g. quickview user may have modified settings that the editor user didn't\n                                componentSettingsModel = new Backbone.Model(settingsValue);\n                                viewStateModel.set(settingskey, componentSettingsModel);\n                            }\n                        });\n                    } else {\n                        viewStateModel.set(\"value\", value);\n                    }\n                }\n            });\n            this.viewModel.unset(\"incomingViewState\");\n        }\n    },\n\n    remove: function() {\n        this.observer.disconnect();\n        Backbone.View.prototype.remove.call(this);\n    },\n\n    render: function() {\n        if (this.model.get(\"isLite\")) {\n            this.$el.addClass(\"quick-view quick-base is-lite\");\n        } else {\n            this.$el.addClass(\"quick-view quick-base\");\n        }\n\n        // render\n        this.$el.html(T.app());\n\n        this.$notificationsDiv = this.$(\".notifications-div\");\n        this.notificator = new Notificator({\n            el: this.$notificationsDiv,\n        });\n\n        this.$documentDialogPanel = this.$el.find(\"> .dialog-panel .document\");\n        this.$documentViewDiv = this.$el.find(\".document-view-div\");\n        this.$environmentDialogPanel = this.$el.find(\"> .dialog-panel .environment\");\n\n        this.toolbar = new MainToolbar({\n            el: this.$el.find(\".toolbar-div\"),\n            appModel: this.model,\n            dialogContainer: this.$environmentDialogPanel,\n            themes: this.THEMES,\n            viewModel: this.viewModel,\n        });\n    },\n\n    resetDocumentView: function(model) {\n        let cfg, notificator;\n\n        if (this.documentView) {\n            this.documentView.remove();\n            this.documentView = null;\n        }\n\n        notificator = QuickBase[\"NotificationManager\"];\n\n        notificator.setDocumentDataModel(model.get(\"data\"));\n\n        cfg = notificator.CONFIG.upgradeConfig(model.get(\"notifications\"));\n        notificator.setOptions(cfg);\n\n        // new document view\n        this.documentView = new QuickBase[\"DocumentView\"]({\n            appModel: this.model,\n            model: model,\n            quickView: true,\n            viewModel: this.viewModel,\n        });\n\n        this.$documentViewDiv.append(this.documentView.$el);\n    },\n\n    setThemeFromCookie: function() {\n        this.environmentTheme = $.cookie(\"dashboard-viewer-theme\") || this.THEMES[0][\"id\"];\n\n        this.setEnvironmentTheme(this.environmentTheme);\n        this.setDocumentTheme(this.environmentTheme);\n\n        if (_.includes(self.THEMES, this.environmentTheme)) {\n            require([\"css!\" + this.environmentTheme]);\n        }\n    },\n\n    setDocumentTheme: function(theme) {\n        let themeId, themeName;\n\n        switch (theme) {\n            case \"kx-darkroom\":\n            case \"Dark\":\n                themeId = \"kx-darkroom\";\n                themeName = \"Dark\";\n                break;\n            case \"kx-light\":\n            case \"Light\":\n                themeId = \"kx-light\";\n                themeName = \"Light\";\n                break;\n        }\n\n        if (theme !== \"None\") {\n            this.viewModel.set(\"DashboardTheme\", themeName);\n\n            _.each([this.$documentViewDiv, this.$documentDialogPanel], function(panel) {\n                if (panel) {\n                    panel.removeClass(\"Dark Light kx-darkroom kx-light\");\n\n                    panel.addClass(themeName);\n                    panel.addClass(themeId);\n                }\n            });\n        }\n    },\n\n    setEnvironmentTheme: function(theme) {\n        const themesString = \"Dark Light kx-darkroom kx-light\";\n\n        switch (theme) {\n            case \"Dark\":\n                theme = \"kx-darkroom\";\n                break;\n            case \"Light\":\n                theme = \"kx-light\";\n                break;\n        }\n\n        _.each([this.toolbar.$el, this.$environmentDialogPanel, this.$notificationsDiv], function(\n            panel,\n        ) {\n            if (panel) {\n                panel.removeClass(themesString).addClass(theme);\n            }\n        });\n    },\n\n    showForceLoginPrompt: function(callback) {\n        QuickBase.ConfirmDialog.ShowConfirm({\n            dialogTitle: \"Session Limit exceeded\",\n            renderTemplate: function() {\n                return t(\"User session limit has been reached, terminate oldest open session?\");\n            },\n            callback: callback,\n            cancelBtnCallback: this.showLogin.bind(this),\n            container: this.$environmentDialogPanel,\n        });\n    },\n\n    showLoadingScreen: function(text) {\n        if (this.loadingScreen) {\n            this.loadingScreen.remove();\n        }\n\n        this.loadingScreen = new LoadingScreen({\n            loadingText: text,\n        });\n        this.$el.append(this.loadingScreen.$el);\n    },\n\n    showLogin: function(errorMessage) {\n        const self = this;\n\n        new QuickBase[\"LoginDialog\"]({\n            appModel: this.model,\n            container: this.$environmentDialogPanel,\n            errorMessage: errorMessage,\n            doLogin: function(username, password, errorCallback) {\n                self.initializeDeltaClient(username, password, function(e) {\n                    if (e === \"loginRequired\") {\n                        self.showLogin();\n                    } else if (e === \"userSessionLimit\") {\n                        self.showForceLoginPrompt(function() {\n                            self.initializeDeltaClient(\n                                username,\n                                password,\n                                errorCallback,\n                                null,\n                                null,\n                                true,\n                            );\n                        });\n                    } else {\n                        errorCallback(e);\n                    }\n                });\n            },\n        });\n    },\n\n    startPdfCreation: function() {\n        if ($(\"body.pdf\").length > 0 && $(\".pdf-expandable\").length > 0) {\n            $(\".fillHeightMode\").toggleClass(\"fillHeightMode\", false);\n            $(\"html\").toggleClass(\"pdf-flow-layout\", true);\n        }\n    },\n\n    updateUserComponents: function() {\n        const componentsModel = this.model.get(\"components\");\n\n        QuickBase[\"DeltaClientLib\"].getComponents(\n            function(data) {\n                componentsModel.remove(componentsModel.where({ user: true }));\n                _.each(data, function(datum) {\n                    const attributes = $.parseJSON(datum[\"dataJSON\"]);\n\n                    attributes[\"user\"] = true;\n\n                    componentsModel.add(attributes);\n                });\n            },\n            function(error) {\n                Log.Error(\"DeltaClientLib.getComponents: Error\", error);\n            },\n        );\n    },\n});\n"],"sourceRoot":"/home/devadmin/ui-rhel7/workspace/DashboardsDirectForKx_direct/dash/dash-core/QuickView"}